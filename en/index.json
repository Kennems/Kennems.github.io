[{"content":"算法笔记（一）——基础+杂项（Python实现） 基础+杂项 快速排序 def quick_sort(q, l, r): if l\u0026gt;=r: return i,j,x=l-1,r+1,q[(l+r)\u0026gt;\u0026gt;1] while i\u0026lt;j: i+=1 while q[i]\u0026lt;x: i+=1 j-=1 while q[j]\u0026gt;x: j-=1 if i\u0026lt;j: q[i], q[j] = q[j], q[i] quick_sort(q, l, j) quick_sort(q, j+1, r) n=int(input()) arr=list(map(int, input().split())) quick_sort(arr,0,n-1) print(\u0026#34; \u0026#34;.join(map(str, arr))) 归并排序 j = mid+1 !!!\ndef merge_sort(q,l,r): if l\u0026gt;=r: return mid = (l+r)\u0026gt;\u0026gt;1 merge_sort(q, l, mid) merge_sort(q, mid+1, r) i,j,k = l, mid+1, 0 tmp = [0]*(r-l+1) while i\u0026lt;=mid and j\u0026lt;=r: if q[i]\u0026lt;q[j]: tmp[k]=q[i] k+=1 i+=1 else: tmp[k]=q[j] k+=1 j+=1 while i\u0026lt;=mid: tmp[k]=q[i] i+=1 k+=1 while j\u0026lt;=r: tmp[k]=q[j] j+=1 k+=1 for i in range(l, r+1): q[i]=tmp[i-l] # q[l:r+1] = tmp[:] n=int(input()) arr=list(map(int, input().split())) merge_sort(arr, 0, n-1) print(\u0026#34; \u0026#34;.join(map(str, arr))) 二分 def check(x): # 检查 x 是否满足某种性质 pass # 这里需要根据具体的情况实现 def bsearch_1(l, r): while l \u0026lt; r: mid = (l + r) // 2 if check(mid): r = mid else: l = mid + 1 return l def bsearch_2(l, r): while l \u0026lt; r: mid = (l + r + 1) // 2 if check(mid): l = mid else: r = mid - 1 return l # 示例用法 # 首先定义 check 函数来检查性质 # 然后使用 bsearch_1 或 bsearch_2 来进行二分搜索 最佳牛围栏 题意：n块地，每块地上有奶牛，现在需要用围栏围起一些奶牛， 但至少有f块地，问最终围起的地中牛的数量的最大值为多少。 浮点数二分最大数量，判断所有数减去当前二分的平均数后，有没有一段长度为f并且是全为正数的，如果有则合法。判断方法：b数组存原数组减去平均数，求前缀和，用前缀和数组求某一段内的和是否为正数即可， 只要长度大于f的所有段都要枚举，但是我们只要求$s[i]-s[0-\u0026gt;i-f]$是否有一个大于0即可，所以只用求$min(s[0:i-f])$即可。注意浮点数二分因为误差需要用eps判断，并且r会稍微大于答案，l会稍微小于答案，题目问的是向下取整最近的整数，所以取r向下取整。 import sys input = lambda:sys.stdin.readline().strip() N = int(1e5+10) a, b = [0]*N, [0]*N n, f = map(int , input().split()) for i in range(1, n+1): a[i] = int(input()) l, r = 0.0, 2e3+10 eps = 1e-6 while r-l \u0026gt; eps: mid = (l+r)/2 s, mi, cur = [0]*N, 1e18, -1e18 for i in range(1, n+1): b[i] = a[i]-mid for i in range(1, n+1): s[i] = s[i-1]+b[i] for i in range(f, n+1): mi = min(mi, s[i-f]) cur = max(cur, s[i]-mi) if cur\u0026gt;=0: l = mid else: r = mid print(int(r*1000)) 浮点数二分 def check(x): # 检查x是否满足某种性质 pass # 这里需要根据具体情况实现check函数 def bsearch_3(l, r): eps = 1e-6 # eps 表示精度，取决于题目对精度的要求 while r - l \u0026gt; eps: mid = (l + r) / 2 if check(mid): r = mid else: l = mid return l 一维前缀和 def prefixSum(arr): n = len(arr) prefixSum = [0] * n prefixSum[0] = arr[0] for i in range(1, n): prefixSum[i] = prefixSum[i-1] + arr[i] for i in range(n): print(prefixSum[i], end=\u0026#34; \u0026#34;) arr = [1, 2, 3, 4, 5] prefixSum(arr) 二维前缀和 def prefixSum2D(arr): n = len(arr) m = len(arr[0]) prefixSum = [[0] * m for _ in range(n)] # 计算第一行的前缀和 prefixSum[0][0] = arr[0][0] for j in range(1, m): prefixSum[0][j] = prefixSum[0][j-1] + arr[0][j] # 计算第一列的前缀和 for i in range(1, n): prefixSum[i][0] = prefixSum[i-1][0] + arr[i][0] # 计算其他部分的前缀和 for i in range(1, n): for j in range(1, m): prefixSum[i][j] = prefixSum[i-1][j] + prefixSum[i][j-1] - prefixSum[i-1][j-1] + arr[i][j] return prefixSum def submatrixSum(prefixSum, x1, y1, x2, y2): return prefixSum[x2][y2] - prefixSum[x1-1][y2] - prefixSum[x2][y1-1] + prefixSum[x1-1][y1-1] arr = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] prefixSum = prefixSum2D(arr) print(prefixSum) x1, y1 = 1, 1 x2, y2 = 2, 2 submatrixSum = submatrixSum(prefixSum, x1, y1, x2, y2) print(submatrixSum) 一维差分 差分和前缀和是逆运算。\n需要计算某一段区间$+-$操作时，运用差分操作 updateRange 需要先构造差分数组\n$s[i] = s[i-1]+a[i]$ 逆运算 $d[i]=a[i]-a[i-1]$ （原数组看作为前缀和数组）\ndef updateRange(B, l, r, c): B[l] += c B[r + 1] -= c def printArray(arr): for i in range(len(arr)): print(arr[i], end=\u0026#34; \u0026#34;) print() n= 5 B = [0] * (n + 1) updateRange(B, 1, 3, 2) updateRange(B, 2, 4, 3) printArray(B) 二维差分 def updateSubmatrix(S, x1, y1, x2, y2, c): S[x1][y1] += c S[x2 + 1][y1] -= c S[x1][y2 + 1] -= c S[x2 + 1][y2 + 1] += c def printMatrix(S): rows = len(S) cols = len(S[0]) for i in range(rows): for j in range(cols): print(S[i][j], end=\u0026#34; \u0026#34;) print() rows = 3 cols = 3 S = [[0] * cols for _ in range(rows + 1)] updateSubmatrix(S, 0, 0, 1, 1, 1) updateSubmatrix(S, 1, 1, 2, 2, 2) printMatrix(S) 双指针 for i in range(n): j = 0 while j \u0026lt; i and check(j, i): j += 1 # 具体问题的逻辑 # 常见问题分类： # (1) 对于一个序列，用两个指针维护一段区间 # (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作 位运算 原码，反码，补码 求n二进制表示中第k位数字: n \u0026gt;\u0026gt; k \u0026amp; 1 返回n的最后一位1：lowbit(n) = n \u0026amp; -n 树状数组基本操作 离散化 alls = [] # 存储所有待离散化的值 # 将所有值排序 alls.sort() # 去掉重复元素 alls = list(set(alls)) # 二分求出x对应的离散化的值 def find(x): l, r = 0, len(alls) - 1 while l \u0026lt; r: mid = (l + r) // 2 if alls[mid] \u0026gt;= x: r = mid else: l = mid + 1 return r + 1 # 映射到1, 2, ...n 区间合并 def merge(segs): segs.sort() # 区间左端点排序 res = [] st, ed = -2e9, -2e9 for seg in segs: if ed \u0026lt; seg[0]: if st != -2e9: res.append((st, ed)) st, ed = seg[0], seg[1] else: ed = max(ed, seg[1]) if st != -2e9: res.append((st, ed)) segs[:] = res ","permalink":"https://showguan.github.io/en/posts/tech/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%B8%80%E5%9F%BA%E7%A1%80+%E6%9D%82%E9%A1%B9python%E5%AE%9E%E7%8E%B0/","summary":"算法笔记（一）——基础+杂项（Python实现） 基础+杂项 快速排序 def quick_sort(q, l, r): if l\u0026gt;=r: return i,j,x=l-1,r+1,q[(l+r)\u0026gt;\u0026gt;1] while i\u0026lt;j: i+=1 while q[i]\u0026lt;x: i+=1 j-=1 while q[j]\u0026gt;x: j-=1 if i\u0026lt;j: q[i], q[j] = q[j], q[i] quick_sort(q, l, j) quick_sort(q, j+1, r) n=int(input()) arr=list(map(int, input().split())) quick_sort(arr,0,n-1) print(\u0026#34; \u0026#34;.join(map(str,","title":"算法笔记（一）——基础+杂项（Python实现）"},{"content":"算法笔记（三）——图论（Python实现） 图论 树的存储 邻接矩阵 # 创建一个二维列表表示邻接矩阵 n = 10 # 顶点数量 g = [[0] * n for _ in range(n)] # 添加一条边a-\u0026gt;b def add_edge(a, b): g[a][b] = 1 # 初始化 g = [[0] * n for _ in range(n)] 邻接表 # 创建一个列表表示邻接表 n = 10 # 顶点数量 h = [-1] * n e = [0] * n ne = [0] * n idx = 0 # 添加一条边a-\u0026gt;b def add_edge(a, b): global idx e[idx] = b ne[idx] = h[a] h[a] = idx idx += 1 # 初始化 idx = 0 h = [-1] * n 树和图的存储 # 邻接表表示的图 N = 100010 # 根据具体需求设置合适的最大节点数量 # 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点 h = [-1] * N # 存储边的目标节点 e = [0] * N # 存储下一条边的索引 ne = [0] * N # 边的索引 idx = 0 # 添加一条边a-\u0026gt;b def add(a, b): global idx e[idx] = b ne[idx] = h[a] h[a] = idx idx += 1 # 初始化 idx = 0 for i in range(N): h[i] = -1 树和图的遍历 DFS def dfs(u): st[u] = True i = h[u] while i!=-1: j = e[i] if not st[j]: dfs(j) i = ne[i] BFS from collections import deque q = deque() st[1] = True q.append(1) while q: t = q.popleft() i = h[t] while i!=-1: j=e[i] if not st[j]: st[j] = True q.append(j) i=ne[i] 拓扑排序 def topsort(): hh, tt = 0, -1 for i in range(1, n+1): if d[i]==0: q.append(i) tt+=1 while hh\u0026lt;=tt: t = q[hh] hh+=1 i = h[t] while i!=-1: j = e[i] d[j]-=1 if d[j]==0: q.append(j) tt+=1 i = ne[i] return tt==n-1 LCA def lca(x,y): if dep[x] \u0026lt; dep[y]: x,y = y,x d = dep[x]-dep[y] while d: # 循环直到深度差为 0 v = d \u0026amp; -d # 获取 d 的最低位的 1 所在的位置 i = v.bit_length() - 1 # 计算最低位的位置索引 x = fa[i][x] # 将节点 x 上移到和节点 y 同一深度 d -= v # 更新深度差 if x==y: return x for k in range(K-1, -1, -1): if fa[k][x] != fa[k][y]: x = fa[k][x] y = fa[k][y] return fa[0][x] # 初始化深度以及父节点信息 dep[x]=dep[val]+1 dep[y]=dep[val]+1 fa[0][x] = val fa[0][y] = val for k in range(K-1): fa[k+1][x] = fa[k][fa[k][x]] # 自己的第2^(1+1)级父亲即为 自己的第2^(1)级父亲 的第2^(1)级父亲 fa[k+1][y] = fa[k][fa[k][y]] 最短路 单元最短路\n​\t所有边权为正：\n​\t朴素版Dijkstra $O(n^2)$,堆优化版的Dijkstra $O(mlogn)$, ​\t存在负权边\n​\tBellman-Ford $O(nm)$, SPFA 队列优化的Bellman-Ford, 一般情况：$O(m)$ 最坏情况：$O(nm)$ 多元汇最短路：\n​\tFloyed $O(n^3)$ 朴素Dijkstra Dijkstra不能处理负权边：\nN = int(5e2)+10 INF = 0x3f3f3f3f g = [[INF]*N for _ in range(N)] #g = defaultdict(lambda:defaultdict(lambda:INF)) 同样的效果 dis = [INF]*N st = [False]*N def dijkstra(): dis[1]=0 for i in range(n-1): t=-1 for j in range(1,n+1): if not st[j] and (t==-1 or dis[j]\u0026lt;dis[t]): t=j for j in range(1,n+1): dis[j]=min(dis[j], dis[t] + g[t][j]) st[t]=True if dis[n]==INF: return -1 return dis[n] n, m = map(int, input().split()) for _ in range(m): x, y, z = map(int ,input().split()) g[x][y] = min(g[x][y], z) print(dijkstra()) 堆优化版Dijkstra from heapq import * import sys input = lambda:sys.stdin.readline().strip() N = 150010 INF = 0x3f3f3f3f e, ne, head, w, dis= [0]*N, [0]*N, [-1]*N, [0]*N, [INF]*N st = [False]*N idx=0 def add(a, b, x): global idx e[idx]=b w[idx]=x ne[idx]=head[a] head[a]=idx idx+=1 def dijkstra(): dis[1]=0 h=[] heappush(h, (0,1)) while h: dist, ver = heappop(h) if st[ver]: continue st[ver]=True i=head[ver] while i!=-1: j=e[i] if not st[j] and dis[j]\u0026gt;dist+w[i]: dis[j]=dist+w[i] heappush(h, (dis[j], j)) i=ne[i] if dis[n]==INF: print(-1) else: print(dis[n]) n, m = map(int, input().split()) for _ in range(m): x, y, z = map(int, input().split()) add(x,y,z) dijkstra() 另一种写法 from heapq import * from collections import defaultdict import sys input=lambda:sys.stdin.readline().strip() N, INF = 150010, 0x3f3f3f3f dis, st = [INF]*N, [False]*N g=defaultdict(list) def dijkstra(): dis[1]=0 h=[] heappush(h, (0, 1)) while h: dist, ver = heappop(h) if st[ver]: continue st[ver]=True for y, z in g[ver]: if dis[y]\u0026gt;dis[ver]+z: dis[y]=dis[ver]+z heappush(h, (dis[y], y)) if dis[n]==INF: print(-1) else: print(dis[n]) n, m = map(int, input().split()) for _ in range(m): x,y,z = map(int, input().split()) g[x].append((y, z)) dijkstra() Bellman-Ford # n表示点数，m表示边数 dist = [float(\u0026#39;inf\u0026#39;)] * (n + 1) # dist[x]存储1到x的最短路距离 # 边，a表示出点，b表示入点，w表示边的权重 edges = [] # 求1到n的最短路距离，如果无法从1走到n，则返回-1。 def bellman_ford(): dist[1] = 0 # 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。 for i in range(n): for j in range(m): a, b, w = edges[j][\u0026#39;a\u0026#39;], edges[j][\u0026#39;b\u0026#39;], edges[j][\u0026#39;w\u0026#39;] if dist[b] \u0026gt; dist[a] + w: dist[b] = dist[a] + w if dist[n] \u0026gt; float(\u0026#39;inf\u0026#39;) / 2: return -1 return dist[n] SPFA from collections import defaultdict, deque import sys input = lambda:sys.stdin.readline().strip() N, INF = int(1e5+10), 0x3f3f3f3f dis, st = [INF]*N, [False]*N g=defaultdict(list) def spfa(): q=deque() q.append(1) st[1]=True dis[1]=0 while q: x=q.popleft() st[x]=False for y, z in g[x]: if dis[y]\u0026gt;dis[x]+z: dis[y]=dis[x]+z if not st[y]: st[y]=True q.append(y) if dis[n]==INF: print(\u0026#39;impossible\u0026#39;) else: print(dis[n]) n, m = map(int, input().split()) for _ in range(m): x, y, z = map(int, input().split()) g[x].append((y, z)) spfa() 判断负环 from collections import deque N = int(1e5+10) INF = 0x3f3f3f3f n = 0 # 总点数 h = [-1] * N # 邻接表存储所有边 e, ne, w = [0] * N, [0] * N, [0] * N idx = 0 dist, cnt = [INF] * N, [0] * N # dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数 st = [False] * N # 存储每个点是否在队列中 # 如果存在负环，则返回True，否则返回False。 def spfa(): # 不需要初始化dist数组 # 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环 q = deque() for i in range(1, n + 1): q.append(i) st[i] = True while q: t = q.popleft() st[t] = False i = h[t] while i != -1: j = e[i] if dist[j] \u0026gt; dist[t] + w[i]: dist[j] = dist[t] + w[i] cnt[j] = cnt[t] + 1 if cnt[j] \u0026gt;= n: return True # 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环 if not st[j]: q.append(j) st[j] = True i = ne[i] return False # Example usage: # n = 5 # h = [-1, 2, 1, 4, 3, -1] # e = [0, 2, 1, 4, 3, 0] # ne = [1, -1, 3, -1, -1, 2] # w = [0, 1, 2, 3, 4, 5] # if spfa(): # print(\u0026#34;Exist negative cycle\u0026#34;) # else: # print(\u0026#34;No negative cycle\u0026#34;) floyd INF = float(\u0026#39;inf\u0026#39;) # 初始化距离矩阵d，d[a][b]表示a到b的最短距离 def initialize(n): d = [[0 if i == j else INF for j in range(n)] for i in range(n)] return d # Floyd算法求解最短路径 def floyd(d, n): for k in range(n): for i in range(n): for j in range(n): d[i][j] = min(d[i][j], d[i][k] + d[k][j]) return d # Example usage: # n = 5 # d = initialize(n) # d = floyd(d, n) # print(d) Prim INF = float(\u0026#39;inf\u0026#39;) # Prim算法求解最小生成树的权重之和 def prim(n, g): dist = [INF] * (n + 1) st = [False] * (n + 1) res = 0 for i in range(n): t = -1 for j in range(1, n + 1): if not st[j] and (t == -1 or dist[t] \u0026gt; dist[j]): t = j if i and dist[t] == INF: return INF if i: res += dist[t] st[t] = True for j in range(1, n + 1): dist[j] = min(dist[j], g[t][j]) return res # Example usage: # n = 5 # g = [[0] * (n + 1) for _ in range(n + 1)] # dist = prim(n, g) # print(dist) Kruskal INF = float(\u0026#39;inf\u0026#39;) # 并查集的查找操作 def find(x, p): if p[x] != x: p[x] = find(p[x], p) return p[x] # Kruskal算法求解最小生成树的权重之和 def kruskal(n, m, edges): edges.sort(key=lambda x: x[2]) # 按照边权重对边进行排序 p = [i for i in range(n + 1)] # 初始化并查集的父节点数组 res = 0 cnt = 0 for edge in edges: a, b, w = edge a = find(a, p) b = find(b, p) if a != b: # 如果两个连通块不连通，则将这两个连通块合并 p[a] = b res += w cnt += 1 if cnt \u0026lt; n - 1: return INF return res # Example usage: # n, m = 5, 7 # edges = [(1, 2, 2), (1, 3, 5), (1, 4, 6), (2, 3, 1), (2, 4, 3), (3, 4, 4), (4, 5, 7)] # min_spanning_tree_weight = kruskal(n, m, edges) # print(min_spanning_tree_weight) 染色法 使用了深度优先搜索算法（DFS）来判断一个图是否是二分图\n二分图：顶点分为两个集合，边仅存在于两个不同的集合中，而集合内部都没有边。\nPython优先使用BFS，因为DFS会出现各种问题，爆战，段错误（还没搞清楚原因）等\n这段代码使用了染色法来判断一个无向图是否为二分图。下面我来解释一下：\n题目大意： 给定一个无向图，判断是否可以将其顶点集合划分为两个不相交的子集，使得每条边的两个端点分别属于这两个子集。如果可以，则输出\u0026quot;Yes\u0026quot;，否则输出\u0026quot;No\u0026quot;。\n实现思路：\n使用邻接表 g 来表示无向图，其中 g[u] 存储与顶点 u 相连的所有顶点。 定义一个数组 color 来标记每个顶点的染色情况，初始值设为 -1 表示未染色。 定义一个 BFS 函数 bfs(u, c)，其中 u 表示起始顶点，c 表示初始颜色。该函数使用 BFS 遍历图，并将顶点染色，保证相邻顶点颜色不同。 在主体部分，遍历所有顶点，对于每个未染色的顶点，调用 bfs 函数进行染色。如果染色过程中发现相邻顶点颜色相同，则返回 \u0026ldquo;No\u0026rdquo;，表示无法划分为二分图；否则返回 \u0026ldquo;Yes\u0026rdquo;。 import sys from collections import deque, defaultdict input = lambda:sys.stdin.readline().strip() N = int(1e5)+10 g = defaultdict(list) color = [-1]*N def bfs(u, c): color[u] = c q = deque() q.append((u, c)) while q: cur, col = q.popleft() for nx in g[cur]: if color[nx]==-1: color[nx] = 1-col q.append((nx, 1-col)) elif color[nx]==col: return False return True n, m = map(int, input().split()) for i in range(m): u, v = map(int, input().split()) # if u==v: #***自环不能去掉*** # continue if u not in g[v]: g[v].append(u) if v not in g[u]: g[u].append(v) for i in range(1, n+1): if color[i]==-1: if not bfs(i, 0): print(\u0026#34;No\u0026#34;) exit() print(\u0026#34;Yes\u0026#34;) 匈牙利算法 题目大意： 给定一个二分图，其中左侧顶点集合为 (N_1)，右侧顶点集合为 (N_2)，图中存在一些边。需要找到尽可能多的匹配，使得左侧的每个顶点最多与一个右侧的顶点相连，而右侧的每个顶点最多与一个左侧的顶点相连。\n实现思路：\n使用一个二维数组 g 存储图的邻接表表示。其中 g[u] 表示与左侧顶点 u 相连的所有右侧顶点的集合。 定义一个函数 find(x)，用于从左侧顶点 x 开始尝试寻找增广路径，如果找到了增广路径就返回 True，否则返回 False。 在主体部分，遍历左侧的每个顶点，对每个顶点调用 find 函数进行匹配，若成功匹配，则匹配数加一。 import sys from collections import defaultdict N = int(1e3)+10 mat, st = [0]*N, [False]*N g = defaultdict(list) def find(x): for v in g[x]: if not st[v]: st[v] = True if mat[v]==0 or find(mat[v]): mat[v] = x return True return False n1, n2, m = map(int, input().split()) for i in range(m): u, v = map(int, input().split()) g[u].append(v) # hungarian 主体部分 ans = 0 for i in range(1, n1+1): st = [False]*N if find(i): ans+=1 print(ans) ","permalink":"https://showguan.github.io/en/posts/tech/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%B8%89%E5%9B%BE%E8%AE%BApython%E5%AE%9E%E7%8E%B0/","summary":"算法笔记（三）——图论（Python实现） 图论 树的存储 邻接矩阵 # 创建一个二维列表表示邻接矩阵 n = 10 # 顶点数量 g = [[0] * n for _ in range(n)] # 添加一条边a","title":"算法笔记（三）——图论（Python实现）"},{"content":"算法笔记（二）——数据结构(Python实现) 数据结构 单链表 N = int(1e5+10) e=[0]*N ne=[0]*N head=-1 idx=1 def insert(x): global idx, head e[idx]=x ne[idx]=head head=idx idx+=1 def add(k, x): global idx e[idx]=x ne[idx]=ne[k] ne[k]=idx idx+=1 def remove(k): global idx, head if k==0: head = ne[head] else: ne[k]=ne[ne[k]] n = int(input()) for _ in range(n): s = input().split() op=s[0] if op==\u0026#39;H\u0026#39;: insert(int(s[1])) elif op==\u0026#39;I\u0026#39;: add(int(s[1]), int(s[2])) else: remove(int(s[1])) i=head while i!=-1: print(e[i], end=\u0026#39; \u0026#39;) i=ne[i] 双链表 N = int(1e5+10) e=[0]*N l=[0]*N r=[0]*N idx=0 def init(): global idx r[2]=1 l[1]=2 idx=3 def insert(k, x): global idx e[idx]=x l[idx]=k r[idx]=r[k] l[r[k]]=idx r[k]=idx idx+=1 def remove(k): l[r[k]]=l[k] r[l[k]]=r[k] init() m=int(input()) for _ in range(m): s=input().split() if s[0]==\u0026#39;L\u0026#39;: x=int(s[1]) insert(2,x) elif s[0]==\u0026#39;R\u0026#39;: x=int(s[1]) insert(l[1],x) elif s[0]==\u0026#39;D\u0026#39;: k=int(s[1])+2 remove(k) elif s[0]==\u0026#39;IL\u0026#39;: k=int(s[1])+2 x=int(s[2]) insert(l[k],x) elif s[0]==\u0026#39;IR\u0026#39;: k=int(s[1])+2 x=int(s[2]) insert(k,x) i=2 while i!=0: if i==2 or i==1: i=r[i] continue print(e[i],end=\u0026#34; \u0026#34;) i=r[i] 栈 N = int(1e5+10) # 假设N的值为100 stk = [0] * N tt = 0 # 向栈顶插入一个数 tt += 1 stk[tt] = x # 从栈顶弹出一个数 tt -= 1 # 栈顶的值 stk[tt] # 判断栈是否为空 if tt \u0026gt; 0: pass 队列 N = 100 # 假设N的值为100 q = [0] * N hh = 0 tt = -1 # 向队尾插入一个数 tt += 1 q[tt] = x # 从队头弹出一个数 hh += 1 # 队头的值 q[hh] # 判断队列是否为空 if hh \u0026lt;= tt: pass N = 100 # 假设N的值为100 q = [0] * N hh = 0 tt = 0 # 向队尾插入一个数 q[tt] = x tt += 1 if tt == N: tt = 0 # 从队头弹出一个数 hh += 1 if hh == N: hh = 0 # 队头的值 q[hh] # 判断队列是否为空 if hh != tt: pass 单调栈 tt = 0 stk = [0] * (n + 1) for i in range(1, n + 1): while tt and check(stk[tt], i): tt -= 1 stk[tt + 1] = i tt += 1 单调队列 n = 10 # 假设n的值为10 hh = 0 tt = -1 q = [0] * n for i in range(n): while hh \u0026lt;= tt and check_out(q[hh]): hh += 1 while hh \u0026lt;= tt and check(q[tt], i): tt -= 1 q[tt + 1] = i tt += 1 N = int(1e6+10) q=[0 for _ in range(N)] n,k=map(int, input().split()) a=[0]+[int(x) for x in input().split()] hh,tt=0,-1 for i in range(1,n+1): if hh\u0026lt;=tt and i-q[hh]+1\u0026gt;k: hh+=1 while hh\u0026lt;=tt and a[q[tt]] \u0026gt;= a[i]: tt-=1 tt+=1 q[tt]=i if i \u0026gt;= k: print(a[q[hh]], end=\u0026#34; \u0026#34;) print() hh,tt=0,-1 for i in range(1,n+1): if hh\u0026lt;=tt and i-q[hh]+1\u0026gt;k: hh+=1 while hh\u0026lt;=tt and a[q[tt]] \u0026lt;= a[i]: tt-=1 tt+=1 q[tt]=i if i\u0026gt;=k: print(a[q[hh]], end=\u0026#34; \u0026#34;) KMP m = len(p) # 假设p为模板串，长度为m n = len(s) # 假设s为模式串，长度为n ne = [0] * (m + 1) # 初始化ne数组 # 求Next数组 j = 0 for i in range(2, m + 1): while j and p[i] != p[j + 1]: j = ne[j] if p[i] == p[j + 1]: j += 1 ne[i] = j # 匹配 j = 0 for i in range(1, n + 1): while j and s[i] != p[j + 1]: j = ne[j] if s[i] == p[j + 1]: j += 1 if j == m: j = ne[j] # 匹配成功后的逻辑 Tire N = 100010 son = [[0] * 26 for _ in range(N)] cnt = [0] * N idx = 0 # 0号点既是根节点，又是空节点 # son[][]存储树中每个节点的子节点 # cnt[]存储以每个节点结尾的单词数量 # 插入一个字符串 def insert(s): global idx p = 0 for i in range(len(s)): u = ord(s[i]) - ord(\u0026#39;a\u0026#39;) if not son[p][u]: idx += 1 son[p][u] = idx p = son[p][u] cnt[p] += 1 # 查询字符串出现的次数 def query(s): p = 0 for i in range(len(s)): u = ord(s[i]) - ord(\u0026#39;a\u0026#39;) if not son[p][u]: return 0 p = son[p][u] return cnt[p] 马拉车（字符串回文串算法） class Solution: # 推荐教学视频 ：https://www.bilibili.com/video/BV1Sx4y1k7jG/?spm_id_from=333.337.search-card.all.click\u0026amp;vd_source=a4a2b56f746715b34521bfb853094cf4 def longestPalindrome(self, s: str) -\u0026gt; str: s = \u0026#39;#\u0026#39; + \u0026#39;#\u0026#39;.join(list(s)) + \u0026#39;#\u0026#39; n = len(s) p = [0]*n #每个点的 最长回文字串 能到的 右侧位置 c, r = 0, 0 # 右边能到达最远的蘑菇的位置 和 其最右边能达到的位置 for i in range(n): if i\u0026lt;=r: p[i] = min(r-i, p[c + c-i]) # 由已知条件得到当前位置能达到的最大右侧距离( 需要取min(镜像位置的值, 当前最大蘑菇能覆盖到的最大值) ) while i+p[i]+1 \u0026lt; n and s[i-p[i]-1] == s[i+p[i]+1]: p[i]+=1 if p[i]+i \u0026gt; r: r = p[i] + i c = i ma = max(p) idx = p.index(ma) return s[idx-ma+1:idx+ma+1:2] 并查集 N = 1000005 # 假设N的值为1000005 p = [0] * N # 初始化p数组 # 返回x的祖宗节点 def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] # 初始化，假定节点编号是1~n for i in range(1, n + 1): p[i] = i # 合并a和b所在的两个集合 p[find(a)] = find(b) 维护size信息\n# Python中没有类似于C++的数组声明方式，我们直接使用列表来代替 p = [i for i in range(N)] size = [1] * N # 返回x的祖宗节点 def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] # 初始化，假定节点编号是1~n n = N # 假设n是提前定义好的 for i in range(1, n + 1): p[i] = i size[i] = 1 # 合并a和b所在的两个集合 p[find(a)] = find(b) size[b] += size[a] 维护到祖宗节点距离的并查集\n# Python中没有类似于C++的数组声明方式，我们直接使用列表来代替 p = [i for i in range(N)] d = [0] * N # 返回x的祖宗节点 def find(x): if p[x] != x: u = find(p[x]) d[x] += d[p[x]] p[x] = u return p[x] # 初始化，假定节点编号是1~n n = N # 假设n是提前定义好的 for i in range(1, n + 1): p[i] = i d[i] = 0 # 合并a和b所在的两个集合 p[find(a)] = find(b) d[find(a)] = distance # 根据具体问题，初始化find(a)的偏移量 堆 # h[N] 存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1 # ph pos[k] 存储第k个插入的点在堆中的位置 # hp ord[k] 存储堆中下标是k的点是第几个插入的 N = 1000005 # 假设N的值为1000005 h = [0] * N # 初始化h数组 ph = [0] * N # 初始化ph数组 hp = [0] * N # 初始化hp数组 size = 0 # 初始化size为0 # 交换两个点，及其映射关系 def heap_swap(a, b): ph[hp[a]], ph[hp[b]] = ph[hp[b]], ph[hp[a]] hp[a], hp[b] = hp[b], hp[a] h[a], h[b] = h[b], h[a] def down(u): t = u if u * 2 \u0026lt;= size and h[u * 2] \u0026lt; h[t]: t = u * 2 if u * 2 + 1 \u0026lt;= size and h[u * 2 + 1] \u0026lt; h[t]: t = u * 2 + 1 if u != t: heap_swap(u, t) down(t) def up(u): while u // 2 and h[u] \u0026lt; h[u // 2]: heap_swap(u, u // 2) u \u0026gt;\u0026gt;= 1 # O(n)建堆 for i in range(n // 2, 0, -1): down(i) def add_element(x): global size size += 1 h[size] = x ph[size] = size hp[size] = size up(size) def get_heap_top(): return h[1] def delete_element(k): global size heap_swap(k, size) size -= 1 down(k) up(k) def update_element(k, x): h[k] = x down(k) up(k) # 添加元素 add_element(x) # 堆顶元素 heap_top = get_heap_top() # 删除第size个节点 delete_element(1) # 删除第k个节点 delete_element(k) # 将第k个元素赋值为x update_element(k, x) 哈希 (1)拉链法 N = 1000005 # 假设N的值为1000005 h = [-1] * N # 初始化h数组为-1 e = [0] * N # 初始化e数组 ne = [0] * N # 初始化ne数组 idx = 0 # 初始化idx为0 # 向哈希表中插入一个数 def insert(x): k = (x % N + N) % N e[idx] = x ne[idx] = h[k] h[k] = idx idx += 1 # 在哈希表中查询某个数是否存在 def find(x): k = (x % N + N) % N i = h[k] while i != -1: if e[i] == x: return True i = ne[i] return False N = 100003 e, ne, h = [0]*N, [0]*N, [-1]*N idx = 0 def insert(x): global idx k = (x%N + N)%N e[idx] = x ne[idx] = h[k] h[k] = idx idx+=1 def query(x): k = (x%N + N)%N i = h[k] while i!=-1: if e[i]==x: return True i = ne[i] return False n = int(input()) for i in range(n): s = input().split() op, k = s[0], int(s[1]) if op==\u0026#39;I\u0026#39;: insert(k) else: if query(k): print(\u0026#34;Yes\u0026#34;) else: print(\u0026#34;No\u0026#34;) (2) 开放寻址法 N = 1000005 # 假设N的值为1000005 h = [0] * N # 初始化h数组 # 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置 def find(x): t = (x % N + N) % N while h[t] != 0 and h[t] != x: t += 1 if t == N: t = 0 return t 字符串哈希 这段代码实现了字符串的哈希算法，用于快速计算子串的哈希值。下面我来解释一下：\n题目大意： 这段代码实现了字符串哈希算法，可以用于快速计算给定字符串中任意子串的哈希值。\n实现思路：\n首先定义了两个数组 h 和 p，分别用于存储字符串的哈希值和幂次值。 对于字符串的每个位置，计算其对应的哈希值并存储在数组 h 中。同时计算幂次值并存储在数组 p 中。 字符串的哈希值由以下公式计算得到：[h[i] = h[i - 1] \\times P + \\text{ord}(str[i])]其中，(P) 是一个预先定义的质数（例如 131 或 13331），(\\text{ord}(str[i])) 表示字符串中第 (i) 个字符的 ASCII 值。 计算子串 (str[l:r]) 的哈希值时，使用以下公式：$ \\text{get}(l, r) = h[r] - h[l - 1] \\times p[r - l + 1] $其中，(h[r]) 是子串起始位置到结束位置的哈希值，(h[l - 1]) 是子串起始位置前一个位置的哈希值，(p[r - l + 1]) 是子串长度对应的幂次值。 总体来说，这段代码实现了字符串哈希算法，用于快速计算给定字符串中任意子串的哈希值。\nh 数组存储了字符串的哈希值，即从字符串的起始位置到当前位置的子串的哈希值。 h[i] 表示字符串从第一个字符到第 i 个字符（包括第 i 个字符）的子串的哈希值。 p[i] 表示幂次值，即 $P^i$ 的值，其中 $P$ 是一个预先定义的质数。 p 数组存储了幂次值，用于计算子串的哈希值时使用。 N = 1000005 # 假设N的值为1000005 P = 131 # 或者可以设置为13331 h = [0] * N # 初始化h数组 p = [0] * N # 初始化p数组 # 初始化 p[0] = 1 for i in range(1, n + 1): h[i] = h[i - 1] * P + ord(str[i]) p[i] = p[i - 1] * P # 计算子串 str[l ~ r] 的哈希值 def get(l, r): return h[r] - h[l - 1] * p[r - l + 1] 树状数组 楼兰图腾\nimport sys input=lambda:sys.stdin.readline() M = 200010 suml, sumg = 0, 0 tr = [0]*M n = int(input()) a = [0]+[int(_) for _ in input().split()] def lowbit(x): return x\u0026amp;-x def add(x,v): while x\u0026lt;M: tr[x]+=v x+=lowbit(x) def query(x): res = 0 while x: res+=tr[x] x-=lowbit(x) return res for i in range(1,n+1): y=a[i] lw = query(y-1) lwr = y-1-lw # the lower element on the right side gr = query(n)-query(y) grr = (n-y) - gr suml += (lw*lwr) sumg += (gr*grr) add(y,1) print(sumg, suml) 线段树 # 定义树节点，l,r, val表示该节点记录的是区间[l, r]的最大值是val class Tree(): def __init__(self): self.l = 0 self.r = 0 self.lazy = 0 self.val = 0 # 二叉树是堆形式，可以用一维数组存储，注意数组长度要开4倍空间 tree = [Tree() for i in range(10*4)] # 建树，用cur\u0026lt;\u0026lt;1访问左子树，cur\u0026lt;\u0026lt;1|1访问右子树，位运算操作很方便 def build(cur, l, r): tree[cur].l, tree[cur].r, tree[cur].lazy, tree[cur].val = l, r, 0, 0 # 当l==r的时候结束递归 if l \u0026lt; r: mid = l + r \u0026gt;\u0026gt; 1 build(cur\u0026lt;\u0026lt;1, l, mid) build(cur\u0026lt;\u0026lt;1|1, mid+1, r) # 当子节点计算完成后，用子节点的值来更新自己的值 def pushup(cur): tree[cur].val = max(tree[cur\u0026lt;\u0026lt;1].val, tree[cur\u0026lt;\u0026lt;1|1].val) # 单点更新 def add(cur, x, v): if tree[cur].l == tree[cur].r: tree[cur].val += v else: mid = tree[cur].r + tree[cur].l \u0026gt;\u0026gt; 1 if x \u0026gt; mid: add(cur\u0026gt;\u0026gt;1|1, x, v) else: add(cur\u0026lt;\u0026lt;1, x, v) pushup(cur) # 将lazy标记向下传递一层 def pushdown(cur): if tree[cur].lazy: lazy = tree[cur].lazy tree[cur\u0026lt;\u0026lt;1].lazy += lazy tree[cur\u0026lt;\u0026lt;1|1].lazy += lazy tree[cur\u0026lt;\u0026lt;1].val += lazy tree[cur\u0026lt;\u0026lt;1|1].val += lazy tree[cur].lazy = 0 # 区间更新 def update(cur, l, r, v): if l \u0026lt;= tree[cur].l and tree[cur].r \u0026lt;= r: tree[cur].lazy += v tree[cur].val += v return if r \u0026lt; tree[cur].l or l \u0026gt; tree[cur].r: return if tree[cur].lazy: pushdown(cur) update(cur\u0026lt;\u0026lt;1, l, r, v) update(cur\u0026lt;\u0026lt;1|1, l, r, v) pushup(cur) # 区间查询 def query(cur, l, r): if l \u0026lt;= tree[cur].l and tree[cur].r \u0026lt;= r: return tree[cur].val if tree[cur].l \u0026gt; r or tree[cur].r \u0026lt; l: return 0 if tree[cur].lazy: pushdown(cur) return max(query(cur\u0026lt;\u0026lt;1, l, r), query(cur\u0026lt;\u0026lt;1|1)) # 测试 # ----- # --- # ------- # -- # -- build(1, 1, 10) update(1, 1, 5, 1) update(1, 7, 10, 1) update(1, 2, 8, 1) update(1, 3, 4, 1) update(1, 9, 10, 1) print(query(1, 1, 10)) def pushup(u): tr[u] = tr[u \u0026lt;\u0026lt; 1] + tr[u \u0026lt;\u0026lt; 1 | 1] def build(u, l, r): if l == r: tr[u] = 0 else: mid = (l + r) \u0026gt;\u0026gt; 1 build(u \u0026lt;\u0026lt; 1, l, mid) build(u \u0026lt;\u0026lt; 1 | 1, mid + 1, r) pushup(u) def query(u, l, r, ql, qr): if l \u0026gt;= ql and r \u0026lt;= qr: return tr[u] mid = (l + r) \u0026gt;\u0026gt; 1 if mid==l and mid==r: return 0 res = 0 if ql \u0026lt;= mid: res = query(u \u0026lt;\u0026lt; 1, l, mid, ql, qr) if qr \u0026gt; mid: res += query(u \u0026lt;\u0026lt; 1 | 1, mid + 1, r, ql, qr) return res def modify(u, x, l, r, val): if l == r: tr[u] += val else: mid = (l + r) \u0026gt;\u0026gt; 1 if x \u0026lt;= mid: modify(u \u0026lt;\u0026lt; 1, x, l, mid, val) else: modify(u \u0026lt;\u0026lt; 1 | 1, x, mid + 1, r, val) pushup(u) 搜索深入 池塘计数 import sys from collections import deque input = lambda:sys.stdin.readline().strip() N = int(1e3+10) M = N*N g = [0]*N cnt=0 vis = [ [False]*N for _ in range(N) ] def bfs(x, y): q=deque() q.append( (x,y) ) while q: tx, ty = q[0] q.popleft() for i in range(-1, 2): for j in range(-1, 2): if i==0 and j==0: continue xx, yy = tx+i, ty+j if xx\u0026lt;0 or xx\u0026gt;=n or yy\u0026lt;0 or yy\u0026gt;=m or vis[xx][yy] or g[xx][yy]==\u0026#39;.\u0026#39;: continue vis[xx][yy]=True q.append( (xx,yy) ) n, m = map(int, input().split()) for i in range(n): g[i]=input() for i in range(n): for j in range(m): if g[i][j]!=\u0026#39;W\u0026#39; or vis[i][j]: continue bfs(i, j) cnt+=1 print(cnt) 城堡问题 import sys from collections import deque input = lambda:sys.stdin.readline().strip() N = 55 g = [] vis = [[False]*N for _ in range(N)] area = 0 cnt=0 def bfs(x, y): vis[x][y]=True q = deque() q.append((x, y)) dx, dy = [0, -1, 0, 1], [-1, 0, 1, 0] ans=1 while q: tx, ty = q.popleft() for i in range(4): xx = tx+dx[i] yy = ty+dy[i] if xx\u0026lt;0 or xx\u0026gt;=n or yy\u0026lt;0 or yy\u0026gt;=m or vis[xx][yy]: continue if (g[tx][ty]\u0026gt;\u0026gt;i)\u0026amp;1: continue ans+=1 vis[xx][yy]=True q.append((xx,yy)) return ans n, m = map(int, input().split()) for _ in range(n): g.append(list(map(int, input().split()))) for i in range(n): for j in range(m): if vis[i][j]: continue area = max(area, bfs(i, j)) cnt+=1 print(cnt) print(area) 山峰和山谷 import sys from collections import deque N = 1010 g = [] vis = [[0]*N for _ in range(N)] pek, val = 0, 0 def bfs(x, y): global higher, lower vis[x][y]=True q = deque() q.append((x,y)) while q: tx,ty = q.popleft() for i in range(-1, 2): for j in range(-1, 2): if i==0 and j==0: continue xx, yy = tx+i, ty+j if xx\u0026lt;0 or xx\u0026gt;=n or yy\u0026lt;0 or yy\u0026gt;=n: continue if g[xx][yy]!=g[tx][ty]: if g[xx][yy]\u0026gt;g[tx][ty]: higher=True elif g[xx][yy]\u0026lt;g[tx][ty]: lower=True elif not vis[xx][yy]: vis[xx][yy]=True q.append((xx,yy)) higher, lower = False, False n = int(input()) for _ in range(n): g.append(list(map(int, input().split()))) # print(g) for i in range(n): for j in range(n): if vis[i][j]: continue higher, lower = False, False bfs(i, j) if not higher:pek+=1 if not lower:val+=1 print(pek, val) BFS P1038 [NOIP2003 提高组] 神经网络 题目大意：兰兰提出了一个神经网络模型，该模型可以表示为一个有向图，图中的节点称为神经元，节点之间的连接代表神经元之间的联系。神经元按照一定的顺序排列，构成整个神经网络。每个神经元都有一个状态和阈值，当神经元处于兴奋状态时，会向其他神经元传送信号。\n实现思路：\n首先，根据输入的网络结构信息，构建神经元之间的连接关系。使用字典g来表示神经元之间的连接关系，以及字典wei来表示连接神经元之间的边的权值。 然后，根据输入的初始状态和阈值信息，初始化神经元的状态。同时，记录输入层神经元的初始状态，如果神经元的状态不为0，则将其加入队列q中。 利用广度优先搜索（BFS）算法，遍历神经元，根据模型公式更新每个神经元的状态。同时，更新神经元的状态时，考虑到边的权值以及神经元的阈值。 最后，输出输出层神经元的状态。如果输出层神经元的最后状态均小于等于0，则输出\u0026quot;NULL\u0026quot;，否则按照编号从小到大顺序输出输出层神经元的状态。 from collections import deque, defaultdict maxn = 1e3 + 10 c = [0] * int(maxn) u = [0] * int(maxn) wei = defaultdict(lambda: defaultdict(int)) vis = [False] * int(maxn) beginer = [False] * int(maxn) g = defaultdict(list) n, p = map(int, input().split()) en = [] q = deque() for i in range(1, n + 1): c[i], u[i] = map(int, input().split()) if c[i] != 0: q.append(i) beginer[i] = True else: en.append(i) if not en: for i in range(1, n + 1): print(i, c[i]) exit() for _ in range(p): s, e, w = map(int, input().split()) g[s].append(e) wei[s][e] = w while q: t = q.popleft() if not beginer[t]: c[t] -= u[t] base = c[t] if base \u0026gt; 0: for j in g[t]: c[j] += base * wei[t][j] if not vis[j]: q.append(j) vis[j] = True ans = 0 for i in en: if c[i] \u0026gt; 0 and not g[i]: print(i, c[i]) ans += 1 if not ans: print(\u0026#34;NULL\u0026#34;) ","permalink":"https://showguan.github.io/en/posts/tech/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%BA%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84python%E5%AE%9E%E7%8E%B0/","summary":"算法笔记（二）——数据结构(Python实现) 数据结构 单链表 N = int(1e5+10) e=[0]*N ne=[0]*N head=-1 idx=1 def insert(x): global idx, head e[idx]=x ne[idx]=head head=idx idx+=1 def add(k, x): global idx e[idx]=x ne[idx]=ne[k] ne[k]=idx idx+=1 def remove(k): global idx, head if k==0: head = ne[head] else: ne[k]=ne[ne[k]] n = int(input())","title":"算法笔记（二）——数据结构(Python实现)"},{"content":"算法笔记（五）——DP（Python实现） DP 数字三角形 f=[] n=int(input()) for _ in range(n): f.append([int(x) for x in input().split()]) for i in range(n-2,-1,-1): for j in range(i+1): f[i][j]=max(f[i+1][j], f[i+1][j+1])+f[i][j] print(f[0][0]) 背包 空间优化成1维之后，只有完全背包问题的体积是从小到大循环的\n01背包 N = int(1e3+10) f=[ 0 for _ in range(N) ] n,v=map(int,input().split()) for i in range(n): vi,wi=map(int,input().split()) for j in range(v, vi-1,-1): f[j]=max(f[j],f[j-vi]+wi) print(f[v]) 多重背包 单调队列 MN = int(2e4+10) f=[0 for _ in range(MN)] q=[0 for _ in range(MN)] g=[0 for _ in range(MN)] N,V = map(int, input().split()) for i in range(N): v,w,s=map(int, input().split()) g=f[:] for j in range(v): hh,tt=0,-1 for k in range(j,V+1,v): while hh\u0026lt;=tt and q[hh]\u0026lt;k-s*v: hh+=1 while hh\u0026lt;=tt and g[q[tt]]+(k-q[tt])//v*w \u0026lt;= g[k]: tt-=1 tt+=1 q[tt]=k f[k]=g[q[hh]]+(k-q[hh])//v*w print(f[V]) 二维费用背包 N = int(1e2+10) f=[[0]*N for _ in range(N)] n,V,M = map(int , input().split()) for i in range(n): v,m,w=map(int , input().split()) for j in range(V,v-1,-1): for k in range(M, m-1, -1): f[j][k]=max(f[j][k], f[j-v][k-m]+w) print(f[V][M]) 宠物小精灵 题目大意：小智在野外捕捉宠物小精灵，他带了一些精灵球和皮卡丘，精灵球可以捕捉小精灵，但每捕捉一个小精灵都会消耗精灵球和减少皮卡丘的体力。现在给定小智拥有的精灵球数量、皮卡丘的初始体力值以及每个小精灵需要的精灵球数量和对皮卡丘造成的伤害数目，问小智最多能捕捉多少个小精灵，并且在这种情况下，皮卡丘的剩余体力值最多是多少。\n实现思路：\n使用动态规划，定义状态 f[i][j] 表示使用 i 个精灵球时，对皮卡丘造成 j 伤害时能够捕捉到的小精灵数量。 遍历每个野生小精灵，更新状态数组 f。 最后输出 f[n][m-1] 表示捕捉到的小精灵数量，然后再计算皮卡丘的剩余体力值。 N = int(1e3+10) M = int(5e2+10) f=[[0]*M for _ in range(N)] n,m,kk = map(int, input().split()) for i in range(kk): v1,v2=map(int, input().split()) for j in range(n, v1-1, -1): for k in range(m-1,v2-1,-1): f[j][k]=max(f[j][k], f[j-v1][k-v2]+1) print(f[n][m-1], end=\u0026#34; \u0026#34;) t=m-1 while t\u0026gt;0 and f[n][m-1]==f[n][t-1]: t-=1 print(m-t) 潜水 最多\n恰好\n最少\n题目大意：潜水员需要使用特殊装备下潜，装备有两种气缸，一种氧气，一种氮气，每个气缸有一定的重量和气体容量。下潜的深度需要一定数量的氧气和氮气。现在给定潜水员需要的氧气和氮气的量，以及每个气缸的氧气、氮气容量和重量，求完成工作所需气缸的总重的最低值。\n实现思路：\n使用动态规划，定义状态 f[i][j] 表示满足氧气需求为 i，氮气需求为 j 时的最小气缸总重量。 遍历每个气缸，更新状态数组 f。 最后输出 f[m][n] 表示完成工作所需的气缸的总重的最低值。 N = int(1e2+10) INF = 0x3f3f3f3f f=[ [INF]*N for _ in range(N) ] f[0][0]=0 m,n=map(int, input().split()) k=int(input()) for i in range(k): a,b,c=map(int, input().split()) for j in range(m,-1,-1): for k in range(n,-1,-1): f[j][k]=min(f[j][k], f[max(j-a, 0)][max(k-b, 0)]+c) print(f[m][n]) 庆功会 题目大意：为了庆祝班级在学校运动会上取得第一名，班主任决定开一场庆功会，并拨款购买奖品犒劳运动员。需要选择购买的奖品，使得购买的奖品的总价值最大，且不超过拨款金额。\n实现思路：\n使用动态规划，定义状态 f[i] 表示拨款金额为 i 时可以购买的奖品的最大总价值。 遍历每个奖品，更新状态数组 f。 最后输出 f[m]，即拨款金额为 m 时可以购买的奖品的最大总价值。 N = int(6e3+10) f=[0 for _ in range(N)] n,m = map(int, input().split()) for i in range(n): v,w,s=map(int, input().split()) for j in range(1,s+1): for k in range(m, v-1, -1): f[k]=max(f[k], f[k-v]+w) print(f[m]) 分组背包 分组背包的顺序：\n物品组 体积 决策 N = int(1e2+10) f=[0 for _ in range(N)] v=[0 for _ in range(N)] w=[0 for _ in range(N)] N,V = map(int, input().split()) for i in range(N): # 物品组 s=int(input()) for j in range(s): v[j],w[j]=map(int, input().split()) for j in range(V,-1,-1): #体积 for k in range(s): #决策 if j\u0026gt;=v[k]: f[j]=max(f[j], f[j-v[k]]+w[k]) print(f[V]) 机器分配 多重背包变种\n题目大意：总公司有M台相同的高效设备，要分给N个分公司。每个分公司根据分配的设备数量能够为国家带来一定的盈利。问如何分配这M台设备才能使国家得到的盈利最大，输出最大盈利值和分配方案。\n实现思路：这是一个经典的背包问题，可以使用动态规划来解决。定义状态dp[i][j]表示前i个分公司中，分配j台设备所能获得的最大盈利。转移方程为dp[i][j] = max(dp[i-1][j-k] + w[i][k])，其中k表示第i个分公司分配的设备数量，0 \u0026lt;= k \u0026lt;= j。最后遍历求解得到最大盈利值，并记录分配方案。\nN = 100 f=[0 for _ in range(N)] w=[[0]*N for _ in range(N)] c=[[0]*N for _ in range(N)] n,m=map(int, input().split()) for i in range(n): w[i]=[0]+[int(x) for x in input().split()] for i in range(n): for j in range(m,-1,-1): for k in range(1,j+1): if f[j-k]+w[i][k] \u0026gt; f[j]: f[j]=f[j-k]+w[i][k] c[i][j]=k print(f[m]) t=m for i in range(n-1,-1,-1): print(i+1, c[i][t]) t-=c[i][t] 金明的预算方案 题目描述：金明想购买物品，其中有主件和附件。每个主件可以有0个、1个或2个附件，附件不能有从属于自己的附件。金明希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。物品的价格都是10元的整数倍。\n实现思路：这个问题可以使用动态规划来解决。首先，需要将主件和附件分开处理。对于每一个物品，分别考虑不同附件数量的情况，计算可能的价格与重要度乘积的总和，然后更新动态规划数组f。最终，返回f[n]即可得到结果。\nN = 80 M = 32010 f=[0 for _ in range(M)] mas=[[0,0] for _ in range(N)] ser=[[] for _ in range(N)] n,m=map(int,input().split()) for i in range(1,m+1): v,p,q=map(int, input().split()) if q==0: mas[i]=[v,v*p] else: ser[q].append((v, v*p)) for i in range(1,m+1): for j in range(n, -1, -1): for k in range( (1 \u0026lt;\u0026lt; len(ser[i]) )): v,p=mas[i] for l in range(len(ser[i])): if k\u0026gt;\u0026gt;l \u0026amp; 1: v+=ser[i][l][0] p+=ser[i][l][1] if j\u0026gt;=v: f[j]=max(f[j], f[j-v]+p) print(f[n]) 摘花生 N = 105 f=[ [0]*N for _ in range(N)] t=int(input()) for _ in range(t): r,c=map(int, input().split()) for i in range(1,r+1): f[i] = [0] + [int(x) for x in input().split()] for j in range(1,c+1): f[i][j]+=max(f[i-1][j], f[i][j-1]) print(f[r][c]) 最小通行费 N = int(1e3+10) INF = 0x3f3f3f3f f = [[INF]*N for _ in range(N)] f[1][0]=f[0][1]=0 n=int(input()) for i in range(1,n+1): f[i]=[INF]+[int(x) for x in input().split()] for i in range(1,n+1): for j in range(1,n+1): f[i][j]+=min(f[i-1][j],f[i][j-1]) print(f[n][n]) 方格 N = 15 g = [[0]*N for _ in range(N)] f = [[[[0]*N for _ in range(N)] for _ in range(N)] for _ in range(N)] n=int(input()) while True: r,c,x=map(int,input().split()) if r==0 and c==0 and x==0: break g[r][c]=x for i in range(1,n+1): for j in range(1,n+1): for k in range(1,n+1): for l in range(1,n+1): if i==k and j==l: f[i][j][k][l] = max(f[i-1][j][k-1][l], f[i-1][j][k][l-1], f[i][j-1][k-1][l], f[i][j-1][k][l-1]) + g[i][j] else: f[i][j][k][l] = max(f[i-1][j][k-1][l], f[i-1][j][k][l-1], f[i][j-1][k-1][l], f[i][j-1][k][l-1]) + g[i][j] + g[k][l] print(f[n][n][n][n]) N = 55 g=[[0]*N for _ in range(N)] f=[[[[0]*N for _ in range(N)] for _ in range(N)] for _ in range(N)] m,n=map(int, input().split()) for i in range(1,m+1): g[i]=[0]+[int(x) for x in input().split()] for i in range(1,m+1): for j in range(1,n+1): for k in range(1,m+1): for l in range(1,n+1): if i==k and j==l: f[i][j][k][l]=max(f[i-1][j][k-1][l], f[i-1][j][k][l-1], f[i][j-1][k-1][l], f[i][j-1][k][l-1])+g[i][j] else: f[i][j][k][l]=max(f[i-1][j][k-1][l], f[i-1][j][k][l-1], f[i][j-1][k-1][l], f[i][j-1][k][l-1])+g[i][j]+g[k][l] print(f[m][n][m][n]) LIS \u0026amp; LCS LIS N=int(1e3+10) f=[1 for _ in range(N)] a=[] n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): for j in range(1,i): if a[i]\u0026gt;a[j]: f[i]=max(f[i],f[j]+1) ans = 0 for i in range(1,n+1): ans = max(ans, f[i]) print(ans) LCS N = int(1e3+10) f=[[0]*N for _ in range(N)] a=\u0026#34;\u0026#34; b=\u0026#34;\u0026#34; n,m=map(int, input().split()) a=input() b=input() for i in range(n): for j in range(m): f[i][j]=max(f[i-1][j], f[i][j-1]) if a[i]==b[j]: f[i][j]=f[i-1][j-1]+1 print(f[n-1][m-1]) 最大上升子序列和 import copy a=[] f=[] ans=0 n=int(input()) a=[int(x) for x in input().split()] f=copy.deepcopy(a) for i in range(n): for j in range(i): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+a[i]) for i in range(n): ans = max(ans, f[i]) print(ans) N = int(1e3+10) f=[0 for _ in range(N)] ans = 0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): f[i]=a[i] for j in range(1,i): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+a[i]) ans = max(ans, f[i]) print(ans) 最大上升子序列II N = int(1e5+10) INF = 0x3f3f3f3f q=[INF for _ in range(N)] ans=0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): l,r=0,i while l\u0026lt;r: mid = (l+r+1)\u0026gt;\u0026gt;1 if q[mid]\u0026lt;a[i]: l=mid else: r=mid-1 ans = max(ans, l+1) q[l+1]=min(q[l+1], a[i]) print(ans) N = int(1e5+10) q=[0 for _ in range(N)] len = 0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1, n+1): l,r=0,len while l\u0026lt;r: mid = (l+r+1)\u0026gt;\u0026gt;1 if q[mid]\u0026lt;a[i]: l=mid else: r=mid-1 len=max(len, l+1) q[l+1]=a[i] print(len) N = int(1e5+10) q=[0 for _ in range(N)] len = 0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): l,r=0,len while l\u0026lt;r: mid = (l+r+1)\u0026gt;\u0026gt;1 if q[mid]\u0026gt;=a[i]: r=mid-1 else: l=mid len = max(len, l+1) q[l+1]=a[i] print(len) 二分原则：\n有单调性，并且二分之后能保持单调性\n怪盗基德的滑翔翼 **题意：**怪盗基德需要逃跑，城市中有N幢建筑排成一条线，每幢建筑的高度各不相同。他希望尽可能多地经过不同建筑的顶部，以减缓下降时的冲击力，减少受伤的可能性。他可以选择一个方向逃跑，但不能中途改变方向，且只能从较高的建筑滑翔到较低的建筑。怪盗基德最多可以经过多少幢不同建筑的顶部（包含初始时的建筑）。\n**实现思路：**可以使用动态规划来解决。首先，对于每一座建筑，分别计算以该建筑为终点的最长递增子序列长度，得到从左往右和从右往左的两个最长递增子序列数组。然后将这两个数组对应位置的最大值相加，再减去1（因为初始位置也算一座建筑），即为怪盗基德最多可以经过的不同建筑数量。\nN = int(1e3+10) f=[0 for _ in range(N)] t=int(input()) while t: t-=1 ans=0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): f[i]=1 for j in range(1,i): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+1) ans = max(ans, f[i]) for i in range(n,0,-1): f[i]=1 for j in range(n,i,-1): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+1) ans = max(ans, f[i]) print(ans) 登山 N = int(1e3+10) f=[1 for _ in range(N)] g=[1 for _ in range(N)] ans = 0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): for j in range(1,i): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+1) for i in range(n,0,-1): for j in range(n,i,-1): if a[i]\u0026gt;a[j]: g[i]=max(g[i], g[j]+1) for i in range(1,n+1): ans = max(ans, f[i]+g[i]-1) print(ans) 合唱队形 N = int(1e3+10) f=[1 for _ in range(N)] g=[1 for _ in range(N)] ans = 0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): for j in range(1,i): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+1) for i in range(n,0,-1): for j in range(n,i,-1): if a[i]\u0026gt;a[j]: g[i]=max(g[i], g[j]+1) for i in range(1,n+1): ans = max(ans, f[i]+g[i]-1) print(n-ans) 友好城市 N = int(5e3+10) a=[(-1,-1)] f=[1 for _ in range(N)] ans = 0 n=int(input()) for i in range(n): x,y=map(int, input().split()) a.append((x,y)) a.sort(key=lambda x:x[0]) for i in range(1,n+1): for j in range(1,i): if a[i][1]\u0026gt;a[j][1]: f[i]=max(f[i], f[j]+1) ans = max(f[i], ans) print(ans) 拦截导弹 贪心证明\n题意：某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统，但有缺陷：每一发炮弹都不能高于前一发的高度。给定导弹依次飞来的高度，计算这套系统最多能拦截多少导弹，并且如果要拦截所有导弹，最少需要配备多少套这种导弹拦截系统。\n实现思路：首先使用动态规划求解最多能拦截的导弹数，然后再利用贪心算法求解最少需要配备的系统数。具体实现时，先从左往右依次计算每个位置能拦截的最大导弹数，然后再从右往左依次计算每个位置能拦截的最大导弹数。接着，利用贪心算法，遍历导弹高度，如果当前高度大于已有系统的高度，则增加系统数；否则，更新已有系统的高度。最终得到最多能拦截的导弹数和最少需要配备的系统数。\nN = int(1e3+10) f=[1 for _ in range(N)] g=[0 for _ in range(N)] ans = 0 cnt = 0 a=[0]+[int(x) for x in input().split()] n=len(a) for i in range(n-1,0,-1): for j in range(n-1,i,-1): if a[i]\u0026gt;=a[j]: f[i]=max(f[i], f[j]+1) ans = max(ans, f[i]) print(ans) for i in range(1, n): k=0 while k\u0026lt;cnt and g[k]\u0026lt;a[i]: k+=1 if k\u0026gt;=cnt: cnt+=1 g[k]=a[i] print(cnt) 导弹防御系统 **题意：**R国更新了导弹防御系统，一套系统的导弹拦截高度要么一直严格单调上升，要么一直严格单调下降。给定即将袭来的一系列导弹的高度，请你求出至少需要多少套防御系统，才能将它们全部击落。\n**实现思路：**可以利用深度优先搜索（DFS）来解决。首先定义两个数组up和down，分别表示上升序列和下降序列。然后使用DFS进行状态搜索，每次尝试将当前导弹加入上升序列或下降序列，并更新当前的防御系统数量。最终得到至少需要的防御系统数量。代码中的dfs函数用于进行状态搜索，尝试将当前导弹加入上升序列或下降序列，并递归调用下一个导弹的处理。最终输出最少需要的防御系统数量。\nN = int(1e2+10) up=[0 for _ in range(N)] down=[0 for _ in range(N)] ans=0 def dfs(u, su, sd): global ans if su + sd\u0026gt;=ans: return if u==n: ans=su+sd return k=0 while k\u0026lt;su and up[k]\u0026gt;=a[u]: k+=1 t=up[k] up[k]=a[u] if k\u0026gt;=su: dfs(u+1, su+1, sd) else: dfs(u+1, su, sd) up[k]=t k=0 while k\u0026lt;sd and down[k]\u0026lt;=a[u]: k+=1 t=down[k] down[k]=a[u] if k\u0026gt;=sd: dfs(u+1, su, sd+1) else: dfs(u+1, su, sd) down[k]=t while True: n=int(input()) ans = n if n==0: break a=[int(x) for x in input().split()] dfs(0,0,0) print(ans) 最长公共上升子序列 题意：熊大妈的奶牛们在小沐沐的指导下研究了最长公共上升子序列，即两个数列中都包含一段位置不一定连续的严格递增的数段，要求找出最长的这样的子序列。现在你需要告诉奶牛们最长公共上升子序列的长度。\n实现思路：可以使用动态规划来解决。定义一个二维数组f，其中f[i][j]表示数列A的前i个元素和数列B的前j个元素中，以数列A的第i个元素和数列B的第j个元素结尾的最长公共上升子序列的长度。然后使用动态规划的方式填表，最终找出最长的公共上升子序列的长度。\n代码中的f[i][j]的状态转移方程如下：\n如果a[i]等于b[j]，则f[i][j]等于f[i-1][j-1]+1（表示在a[i]和b[j]相等的情况下可以构成更长的公共上升子序列）。\n如果a[i]大于b[j]，则f[i][j]等于f[i-1][j]（表示a[i]不在公共上升子序列中）。\n否则，f[i][j]等于f[i][j-1]（表示b[j]不在公共上升子序列中）。\nN = int(3e3+10) f=[[0]*N for _ in range(N)] ans=0 n=int(input()) a=[0]+[int(x) for x in input().split()] b=[0]+[int(x) for x in input().split()] for i in range(1,n+1): maxv=1 for j in range(1,n+1): f[i][j]=f[i-1][j] if a[i]==b[j]: f[i][j]=max(f[i][j], maxv) if a[i]\u0026gt;b[j]: maxv=max(maxv, f[i][j]+1) for i in range(1,n+1): ans = max(ans, f[n][i]) print(ans) 状态机模型 闫氏DP分析法——状态机分析法\n大盗阿福 N = int(1e5+10) t=int(input()) while t: t-=1 f=[[0]*2 for _ in range(N)] n=int(input()) a=[0]+[int(x) for x in input().split()] f[1][0]=0 f[1][1]=a[1] for i in range(2,n+1): f[i][0]=max(f[i-1][1],f[i-1][0]) f[i][1]=max(f[i-1][0], f[i-2][1])+a[i] print(max(f[n][0], f[n][1])) 买卖股票 IV 题目大意：给定一个长度为n的数组，表示一个给定股票在n天内的价格。设计一个算法，计算可以获取的最大利润，最多可以完成k笔交易。每次买入卖出合为一笔交易，且不能同时参与多笔交易。\n实现思路：\n使用动态规划解决该问题，定义一个三维数组f，其中f[i][j][0]表示第i天，已完成j笔交易，并且手上没有股票时的最大利润；f[i][j][1]表示第i天，已完成j笔交易，并且手上有股票时的最大利润。 初始化数组f，将所有位置的利润初始化为负无穷-INF，表示不可达。 遍历股票价格数组，使用动态规划递推出f[i][j][0]和f[i][j][1]，即在第i天已完成j笔交易时的最大利润。 最终，取f[n][k][0]中的最大值作为最终结果，表示第n天已完成k笔交易，并且手上没有股票时的最大利润。 代码实现已给出，其中使用了两重循环来填充动态规划数组f，时间复杂度为O(nk)，因为n的最大值为10^5，k的最大值为100，所以算法的时间复杂度为可接受的范围内。\n这个算法的核心思想是利用动态规划逐步计算出在每一天已完成一定数量交易时的最大利润，然后根据问题要求取得最优解。\nK = 110 INF = 0x3f3f3f3f f=[[[-INF]*2 for _ in range(K)] for _ in range(2)] n,k = map(int ,input().split()) w=[0]+[int(x) for x in input().split()] f[1][0][0]=0 t=0 for i in range(1,n+1): for j in range(k+1): f[t][j][0]=max(f[t^1][j][0], f[t^1][j][1]+w[i]) f[t][j][1]=max(f[t^1][j][1], f[t^1][j-1][0]-w[i]) t^=1 res =max(f[t^1][i][0] for i in range(k+1)) print(res) 股票交易V 题目大意：给定一个整数数组prices，其中第i天的股票价格为prices[i]。设计一个算法计算出在满足约束条件下可以获取的最大利润。约束条件为：卖出股票后，你无法在第二天买入股票（即冷冻期为1天），且不能同时参与多笔交易（必须在再次购买前出售掉之前的股票）。\n实现思路：\n使用动态规划解决该问题，定义一个二维数组f，其中f[i][j]表示第i天的交易状态为j时的最大利润，j有三种状态：0表示持有股票，1表示不持有股票且处于冷冻期，2表示不持有股票且不处于冷冻期。 初始化数组f，将所有位置的利润初始化为负无穷-INF，表示不可达。并且将f[0][2]初始化为0，表示第0天结束时，不持有股票且不处于冷冻期时的最大利润为0。 遍历股票价格数组，使用动态规划递推出f[i][j]，即在第i天的交易状态为j时的最大利润。 最终，取f[n][1]和f[n][2]中的最大值作为最终结果，表示最后一天结束时的最大利润。 代码实现已给出，其中使用了一重循环来填充动态规划数组f，时间复杂度为$O(n)$，因为n的最大值为5000，所以算法的时间复杂度为可接受的范围内。\n这个算法的核心思想是利用动态规划逐步计算出在每一天不同交易状态下的最大利润，然后根据问题要求取得最优解。\nN = int(1e5+10) INF = 0x3f3f3f3f f=[[-INF]*3 for _ in range(N)] n=int(input()) w=[0]+[int(x) for x in input().split()] f[0][2]=0 for i in range(1,n+1): f[i][0]=max(f[i-1][0], f[i-1][2]-w[i]) f[i][1]=f[i-1][0]+w[i] f[i][2]=max(f[i-1][1], f[i-1][2]) print(max(f[n][1], f[n][2])) P1220 关路灯 题意：这个问题是关于优化老张关灯顺序以最小化总功耗的。老张每次在天亮时首先关掉自己所处位置的路灯，然后可以向左或向右关灯。为了最小化总功耗，需要找到一个最优的关灯顺序。\n实现思路：\n首先，我们可以使用动态规划来解决这个问题。我们定义一个三维数组f，其中f[i][j][k]表示从第i盏灯到第j盏灯，老张最后一个关灯位置在第k盏灯时的最小功耗。 然后，我们初始化数组f，将所有位置的功耗都初始化为无穷大INF，表示不可达。 对于每一对路灯i和j，我们通过动态规划递推出f[i][j][0]和f[i][j][1]，分别表示老张从左边或右边走到位置i到j的最小功耗。 最后，我们只需比较f[1][n][0]和f[1][n][1]，取其中较小的值作为最终答案。 使用了三重循环来填充动态规划数组f，时间复杂度为$O(n^3)$，因为n的最大值为50，所以算法的时间复杂度为可接受的范围内。这个算法的核心思想是利用动态规划逐步计算出老张从左或右关灯到达每个位置的最小功耗，然后比较两种情况下的最小功耗，找到最优解。\nmaxn = int(8e2) + 100 INF = 0x3f3f3f3f f = [[[INF] * 2 for _ in range(maxn)] for _ in range(maxn)] a = [0] * (maxn + 1) w = [0] * (maxn + 1) sum = [0] * (maxn + 1) n, r = map(int, input().split()) for i in range(1, n + 1): a[i], w[i] = map(int, input().split()) sum[i] = sum[i - 1] + w[i] f[r][r][0] = f[r][r][1] = 0 for i in range(2, n + 1): for j in range(1, n - i + 2): l = j + i - 1 f[j][l][0] = min(f[j + 1][l][0] + (a[j + 1] - a[j]) * (sum[j] + sum[n] - sum[l]), f[j + 1][l][1] + (a[l] - a[j]) * (sum[j] + sum[n] - sum[l])) f[j][l][1] = min(f[j][l - 1][0] + (a[l] - a[j]) * (sum[j - 1] + sum[n] - sum[l - 1]), f[j][l - 1][1] + (a[l] - a[l - 1]) * (sum[j - 1] + sum[n] - sum[l - 1])) ans = min(f[1][n][0], f[1][n][1]) print(ans) 状态压缩DP 小国王 N = 13 M = 1\u0026lt;\u0026lt;N K = 110 state=[] h=[[] for _ in range(M)] cnt = [0]*M f=[[[0]*M for _ in range(K)] for _ in range(N)] def check(x): global n for i in range(n): if (x\u0026gt;\u0026gt;i)\u0026amp;1 and (x\u0026gt;\u0026gt;i+1)\u0026amp;1: return False return True def count(x): global n cnt=0 for i in range(n): if (x\u0026gt;\u0026gt;i)\u0026amp;1: cnt+=1 return cnt n,m = map(int, input().split()) for i in range(1\u0026lt;\u0026lt;n): if check(i): state.append(i) cnt[i]=count(i) for i in range(len(state)): for j in range(len(state)): a = state[i] b = state[j] if (a\u0026amp;b)==0 and check(a|b): h[i].append(j) f[0][0][0]=1 for i in range(1,n+2): for j in range(m+1): for k in range(len(state)): for t in h[k]: c = cnt[state[k]] if j\u0026gt;=c: f[i][j][state[k]]+=f[i-1][j-c][state[t]] print(f[n+1][m][0]) 愤怒的小鸟 eps = 1e-6 N = 18 M = 1\u0026lt;\u0026lt;18 INF = 0x3f3f3f3f def cmp(a,b): if abs(a-b)\u0026lt;eps: return 0 if a\u0026gt;b: return 1 return -1 t = int(input()) for _ in range(t): f = [INF]*M path = [[0]*N for _ in range(N)] q = [0]*N n,m = map(int, input().split()) for i in range(n): x,y = map(float, input().split()) q[i]=(x,y) for i in range(n): path[i][i]=1\u0026lt;\u0026lt;i #关键点：与其他点的抛物线可能都不合法，所以需要独立出一条抛物线 for j in range(n): x1,y1 = q[i] x2,y2 = q[j] if cmp(x1,x2)==0: continue a = (y1/x1-y2/x2)/(x1-x2) if cmp(a,0)\u0026gt;=0: continue b = y1/x1-a*x1 state=0 for k in range(n): x3,y3 = q[k] if cmp(a*x3*x3+b*x3, y3) == 0: state+=(1\u0026lt;\u0026lt;k) path[i][j]=state f[0]=0 for i in range(1\u0026lt;\u0026lt;n): for j in range(n): if not (i\u0026gt;\u0026gt;j)\u0026amp;1: x=j break for j in range(n): f[i | path[x][j]] = min(f[i | path[x][j]], f[i]+1) print(f[(1\u0026lt;\u0026lt;n)-1]) 集合类状态压缩DP 最短Hamilton距离 N = 22 M = 1\u0026lt;\u0026lt;20 INF = 0x3f3f3f3f f=[[INF]*N for _ in range(M)] w=[[]*N for _ in range(N)] n=int(input()) for i in range(n): w[i]=[int(_) for _ in input().split()] f[1][0]=0 for i in range(1\u0026lt;\u0026lt;n): for j in range(n): if i\u0026gt;\u0026gt;j\u0026amp;1: for k in range(n): if i\u0026gt;\u0026gt;k\u0026amp;1: f[i][j]=min(f[i][j], f[i-(1\u0026lt;\u0026lt;j)][k]+w[k][j]) print(f[(1\u0026lt;\u0026lt;n)-1][n-1]) 区间DP 石子合并 N = 1010 INF = 0x3f3f3f3f f=[[INF]*N for _ in range(N)] s=[0]*N n = int(input()) a=[0]+[int(_) for _ in input().split()] for i in range(1,n+1): f[i][i]=0 s[i]=s[i-1]+a[i] for l in range(2,n+1): for i in range(1,n-l+2): j=i+l-1 for k in range(i,j): f[i][j] = min(f[i][j], f[i][k] + f[k+1][j] + s[j]-s[i-1]) print(f[1][n]) 环形石子合并 N = 410 w=[0]*N s=[0]*N INF = 0x3f3f3f3f f=[[-INF]*N for _ in range(N)] g=[[INF]*N for _ in range(N)] n=int(input()) a= [0]+[int(_) for _ in input().split()] for i in range(1,n+1): w[i] = w[i+n] = a[i] for i in range(1,n*2+1): s[i]=s[i-1]+w[i] for l in range(1,n+1): for i in range(1,n*2-l+2): j=i+l-1 if l==1: f[i][j]=g[i][j]=0 for k in range(i,j): f[i][j] = max(f[i][j], f[i][k]+f[k+1][j]+s[j]-s[i-1]) g[i][j] = min(g[i][j], g[i][k]+g[k+1][j]+s[j]-s[i-1]) minv, maxv = INF, -INF for i in range(1,n+1): minv = min(minv, g[i][i+n-1]) maxv = max(maxv, f[i][i+n-1]) print(minv, maxv, sep=\u0026#39;\\n\u0026#39;) 能量项链 N = 210 w=[0]*N f=[[0]*N for _ in range(N)] n = int(input()) a=[0]+[int(_) for _ in input().split()] for i in range(1,n+1): w[i]=w[i+n]=a[i] for l in range(3,n+2): for i in range(1,n*2-l+2): j=i+l-1 for k in range(i+1,j): f[i][j] = max(f[i][j], f[i][k]+f[k][j]+w[i]*w[k]*w[j]) maxv = -1 for i in range(1,n+1): maxv = max(maxv, f[i][i+n]) print(maxv) 凸多边形的划分 N = 55 INF = 1e30 f=[[INF]*N for _ in range(N)] n = int(input()) w=[0]+[int(_) for _ in input().split()] for i in range(1,n+1): f[i][i+1]=0 for l in range(3,n+1): for i in range(1, n-l+2): j=i+l-1 for k in range(i+1,j): f[i][j] = min(f[i][j], f[i][k]+f[k][j]+w[i]*w[k]*w[j]) print(f[1][n]) 加分二叉树 N = 50 def dfs(l, r): if l\u0026gt;r: return k=root[l][r] print(k,end=\u0026#39; \u0026#39;) dfs(l,k-1) dfs(k+1,r) n = int(input()) w = [0]+[int(_) for _ in input().split()] f=[[0]*N for _ in range(N)] root=[[0]*N for _ in range(N)] for l in range(1,n+1): for i in range(1,n-l+2): j=i+l-1 for k in range(i,j+1): left = 1 if k==i else f[i][k-1] right = 1 if k==j else f[k+1][j] s = left*right+w[k] if i==j: s=w[k] if f[i][j]\u0026lt;s: f[i][j]=s root[i][j]=k print(f[1][n]) dfs(1,n) 树形DP 树的最长路径 注意注意再注意，while循环链不符合要求是需要 i=ne[i]\nimport sys sys.setrecursionlimit(int(1e5+10)) N = 10010*2 e = [0]*N ne = [0]*N w = [0]*N h = [-1]*N idx = 1 ans = -1 def add(a, b, c): global idx e[idx]=b w[idx]=c ne[idx]=h[a] h[a]=idx idx+=1 def dfs(root, father): global ans dis, d1, d2 = 0,0,0 i=h[root] while i!=-1: j = e[i] if j==father: i=ne[i] # 重点 continue d = dfs(j, root)+w[i] dis = max(dis, d) if d\u0026gt;d1: d2=d1 d1=d else: d2 = max(d2, d) i=ne[i] ans = max(ans, d1+d2) return dis n = int(input()) for i in range(n-1): a,b,c = map(int, input().split()) add(a,b,c) add(b,a,c) dfs(1,-1) print(ans) 树的中心 题目大意：给定一棵包含 n 个节点的树，每条边都有一个权值。要求在树中找到一个点，使得该点到树中其他节点的最远距离最近。\n实现思路：\n构建无向图的邻接表，其中每个节点对应一个链表，存储其相邻的节点以及对应的边权值。 使用 DFS 遍历树，分别计算每个节点到其他节点的最长距离 d1 和次长距离 d2，并记录其相邻节点 s1。 再次使用 DFS 遍历树，计算每个节点到其相邻节点的最长距离 up。 最后，遍历所有节点，求出所有节点中最大的 max(up[i], d1[i])，即为所求的最近距离。 N = 10010*2 e = [0]*N ne=[0]*N h=[-1]*N w=[0]*N d1=[0]*N d2=[0]*N s1=[0]*N up=[0]*N idx = 1 def add(a,b,c): global idx e[idx]=b w[idx]=c ne[idx]=h[a] h[a]=idx idx+=1 def dfs1(u, father): i=h[u] while i!=-1: j=e[i] if j==father: i=ne[i] continue dfs1(j,u) dis = d1[j]+w[i] if dis\u0026gt;d1[u]: d2[u]=d1[u] d1[u], s1[u]=dis, j elif dis\u0026gt;d2[u]: d2[u]=dis i=ne[i] def dfs2(u, father): i=h[u] while i!=-1: j=e[i] if j==father: i=ne[i] continue if s1[u]==j: up[j]=max(up[u], d2[u])+w[i] else: up[j]=max(up[u], d1[u])+w[i] i=ne[i] dfs2(j, u) n = int(input()) for i in range(n-1): a,b,c = map(int ,input().split()) add(a,b,c) add(b,a,c) dfs1(1,-1) dfs2(1,-1) ans = 1e10 for i in range(1,n+1): ans = min(ans, max(up[i], d1[i])) print(ans) 数字转换 题目大意：给定一个正整数 n，如果一个数 x 的约数之和 y（不包括 x 本身）比它本身小，那么 x 可以变为 y，y 也可以变为 x。限定所有数字变换在不超过 n 的正整数范围内进行，求不断进行数字变换且不出现重复数字的最多变换步数。\n实现思路：\n首先，对于每个数 i，计算其所有约数之和，并存储在数组 s 中。 然后，遍历所有的数 i，如果约数之和 s[i] 小于 i，则将其作为一个节点添加到有向图中，表示可以从 s[i] 变换到 i。 构建有向图后，使用深度优先搜索（DFS）算法遍历图中的每个节点，并求出每个节点的最长路径长度。 在DFS过程中，使用变量 ans 记录图中最长路径的长度，即最多变换步数。 最后，输出 ans 即可。 N = int(5e4+10) s=[0]*N st=[False]*N e=[0]*N ne=[0]*N h=[-1]*N idx=1 ans = -1 def add(a,b): global idx e[idx]=b ne[idx]=h[a] h[a]=idx idx+=1 def dfs(u): global ans d1,d2=0,0 i=h[u] while i!=-1: j=e[i] dis = dfs(j)+1 if dis\u0026gt;d1: d2,d1=d1,dis elif dis\u0026gt;d2: d2=dis i=ne[i] ans = max(ans, d1+d2) return d1 n = int(input()) for i in range(1,n+1): for j in range(2,n+1): if i\u0026gt;n//j: break s[i*j]+=i for i in range(2,n+1): if s[i]\u0026lt;i: add(s[i], i) st[i]=True # for i in range(1,n+1): # if not st[i]: # dfs(i) dfs(1) print(ans) 没有上司的舞会 题目大意：Ural大学有N名职员，编号为1∼N。他们的关系像一棵以校长为根的树，父节点就是子节点的直接上司。每个职员有一个快乐指数，用整数Hi表示。现在要召开一场周年庆宴会，但没有职员愿意和直接上司一起参会。在满足这个条件的前提下，主办方希望邀请一部分职员参会，使得所有参会职员的快乐指数总和最大，求这个最大值。\n实现思路：\n首先，建立一棵以校长为根的树，使用一个二维数组v来存储树的结构关系，其中v[i]表示第i个职员的直接下属。 使用一个二维数组f来记录每个职员参加和不参加宴会时的最大快乐指数，其中f[i][0]表示第i个职员不参加宴会时的最大快乐指数，f[i][1]表示第i个职员参加宴会时的最大快乐指数。 使用深度优先搜索（DFS）来遍历树的每个节点，计算每个节点不参加和参加宴会时的最大快乐指数。 在DFS过程中，对于每个节点i，首先更新该节点参加宴会时的最大快乐指数f[i][1]为当前节点的快乐指数h[i]，然后遍历当前节点的直接下属，更新当前节点参加和不参加宴会时的最大快乐指数。 最终，取根节点的参加和不参加宴会时的最大快乐指数的较大值作为最终结果。 代码实现已给出，其中使用了深度优先搜索来遍历树的每个节点，时间复杂度为O(N)，因为N的最大值为6000，所以算法的时间复杂度为可接受的范围内。\n这个算法的核心思想是利用深度优先搜索逐步计算出每个节点参加和不参加宴会时的最大快乐指数，然后根据问题要求找到最大的快乐指数。\nimport sys sys.setrecursionlimit(int(1e4)) N = int(7e3) v=[[] for _ in range(N)] f=[[0]*2 for _ in range(N)] st=[False]*N h=[0]*N root=0 def dfs(u): f[u][1]+=h[u] for i in v[u]: dfs(i) f[u][1]+=f[i][0] f[u][0]+=max(f[i][0], f[i][1]) n = int(input()) for i in range(1,n+1): h[i]=int(input()) for i in range(n-1): l,k = map(int, input().split()) v[k].append(l) st[l]=True for i in range(1,n+1): if not st[i]: root=i dfs(root) print(max(f[root][0], f[root][1])) 单调队列优化的DP 最大子序和 题目大意：给定一个长度为n的整数序列，从中找出一段长度不超过m的连续子序列，使得子序列中所有数的和最大。要求输出该序列的最大子序和。\n实现思路：\n首先，将输入的序列进行预处理，计算出前缀和数组s，其中s[i]表示序列的前i个数的和。 使用单调队列来解决该问题。单调队列维护的是前缀和数组s中的下标，队列中的元素按照前缀和的值单调递增。队列中的下标表示的是以该下标结尾的连续子序列的最大和。 遍历序列，对于每个位置i，更新单调队列中的元素，使得队列中的下标符合要求，即满足长度不超过m的连续子序列的条件。 在遍历的过程中，不断更新记录最大子序和的变量ans，最终得到的ans即为所求结果。 代码实现已给出，其中使用了单调队列来维护满足条件的下标，时间复杂度为O(n)，因为n的最大值为300000，所以算法的时间复杂度为可接受的范围内。\n这个算法的核心思想是利用单调队列维护以每个位置结尾的满足条件的子序列的最大和，然后根据问题要求找到最大子序和。\nN = 300010 q, s = [0]*N, [0]*N ans = -2**33 hh, tt = 0, 0 n,m = map(int, input().split()) s = [0]+list(map(int, input().split())) for i in range(1,n+1): s[i]+=s[i-1] for i in range(1,n+1): if q[hh]\u0026lt;i-m: hh+=1 ans = max(ans, s[i]-s[q[hh]]) while hh\u0026lt;=tt and s[q[tt]]\u0026gt;=s[i]: tt-=1 tt+=1 q[tt]=i print(ans) 数位DP 1081\nfrom typing import List N = 35 def init() -\u0026gt; List[List[int]]: f = [[0] * N for _ in range(N)] for i in range(N): for j in range(i + 1): if j == 0: f[i][j] = 1 else: f[i][j] = f[i - 1][j] + f[i - 1][j - 1] return f def dp(n: int, k: int, b: int, f: List[List[int]]) -\u0026gt; int: if n == 0: return 0 nums = [] while n: nums.append(n % b) n //= b res = 0 last = 0 for i in range(len(nums) - 1, -1, -1): x = nums[i] if x \u0026gt; 0: res += f[i][k - last] if x \u0026gt; 1: if k - last - 1 \u0026gt;= 0: res += f[i][k - last - 1] break else: last += 1 if last \u0026gt; k: break if i == 0 and last == k: res += 1 return res def solve(l: int, r: int, k: int, b: int) -\u0026gt; int: f = init() return dp(r, k, b, f) - dp(l - 1, k, b, f) if __name__ == \u0026#34;__main__\u0026#34;: l, r, k, b = map(int, input().split()) print(solve(l, r, k, b)) 记忆化 滑雪 题目大意：Michael喜欢滑雪，并希望知道在一个区域中最长的滑坡。给定一个二维数组表示区域，数组中的每个数字代表点的高度。一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度会减小。要求找到最长的滑坡，即从一个高点开始，一直滑到一个低点。\n实现思路：\n使用优先队列（堆）来实现广度优先搜索（BFS）。 首先，初始化一个二维数组f用于存储从每个点出发的最长滑坡距离，初始化优先队列pq用于存储待搜索的点。 将所有点按照高度从小到大加入优先队列pq。 对于优先队列中的每个点，依次向上下左右四个方向搜索，如果下一个点的高度小于当前点，则更新下一个点的最长滑坡距离为当前点的最长滑坡距离加1。 在搜索过程中，不断更新记录最长滑坡距离的变量ma，最终得到的ma即为最长滑坡的长度。 代码实现已给出，其中使用了优先队列pq来进行广度优先搜索，时间复杂度为O(nmlog(nm))，因为n和m的最大值为100，所以算法的时间复杂度为可接受的范围内。\n这个算法的核心思想是利用广度优先搜索逐步计算出从每个点出发的最长滑坡距离，然后根据问题要求找到最长的滑坡。\nfrom heapq import * n, m = map(int, input().split()) f = [[0] * (m + 5) for _ in range(n + 5)] # distance g = [[0] * (m + 5) for _ in range(n + 5)] # store heights pq = [] for i in range(1, n + 1): nums = [0] + list(map(int, input().split())) for j, num in enumerate(nums[1:]): f[i][j] = 1 g[i][j] = num heappush(pq, (num, i, j)) # Push (num, i, j) into the priority queue ma = -1 while pq: num, i, j = heappop(pq) if g[i - 1][j] \u0026lt; num: f[i][j] = max(f[i][j], f[i - 1][j] + 1) if g[i + 1][j] \u0026lt; num: f[i][j] = max(f[i][j], f[i + 1][j] + 1) if g[i][j - 1] \u0026lt; num: f[i][j] = max(f[i][j], f[i][j - 1] + 1) if g[i][j + 1] \u0026lt; num: f[i][j] = max(f[i][j], f[i][j + 1] + 1) ma = max(ma, f[i][j]) print(ma) ","permalink":"https://showguan.github.io/en/posts/tech/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%BA%94dppython%E5%AE%9E%E7%8E%B0/","summary":"算法笔记（五）——DP（Python实现） DP 数字三角形 f=[] n=int(input()) for _ in range(n): f.append([int(x) for x in input().split()]) for i in range(n-2,-1,-1): for j in range(i+1): f[i][j]=max(f[i+1][j], f[i+1][j+1])+f[i][j] print(f[0][0]) 背包 空间优化成1维之后，只有完全背包问题的","title":"算法笔记（五）——DP（Python实现）"},{"content":"算法笔记（四）——数学（Python实现） 数学 试除法判定质数 def check(x): # 判定 if x\u0026lt;2: return False for i in range(2, int(x**0.5)+1): if x%i==0: return False return True n = int(input()) for i in range(n): x = int(input()) if check(x): print(\u0026#34;Yes\u0026#34;) else: print(\u0026#34;No\u0026#34;) 试除法分解质因数 def get(x): #分解 for i in range(2, int(x**0.5)+1): if x%i==0: cnt=0 while x%i==0: x//=i cnt+=1 print(i, cnt, sep=\u0026#39; \u0026#39;) if x\u0026gt;1: print(x, 1, sep=\u0026#39; \u0026#39;) n = int(input()) for i in range(n): x = int(input()) get(x) print() 线性筛法求素数 N = int(1e6+10) primes = [] st = [False]*N def get(n): for i in range(2, n+1): if not st[i]: primes.append(i) for j in range(len(primes)): if i*primes[j]\u0026gt;n: break st[i*primes[j]]=True if i%primes[j]==0: break n = int(input()) get(n) print(len(primes)) 朴素筛法求素数 N = 1000005 # 根据需要修改 primes = [] # 存储所有素数 st = [False] * N # st[x]存储x是否被筛掉 # 筛素数函数 def get_primes(n): global primes global st for i in range(2, n + 1): if not st[i]: primes.append(i) for j in range(i, n + 1, i): st[j] = True # Example usage: # get_primes(100) # print(primes) 试除法求所有约数 def get(x): res = [1] for i in range(2, int(x**0.5)+1): if x%i==0: res.append(i) if i!=x//i: res.append(x//i) if x\u0026gt;1: res.append(x) return sorted(res) n = int(input()) for i in range(n): x = int(input()) res = get(x) print(*res) 约数个数和约数之和 如果 N = p1^c1 * p2^c2 * ... *pk^ck\r约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1)\r约数之和： (p1^0 + p1^1 + ... + p1^c1) * ... * (pk^0 + pk^1 + ... + pk^ck) gcd def gcd(a, b): return gcd(b, a % b) if b else a 求欧拉函数 def get(x): res = x for i in range(2, int(x**0.5)+1): if x%i==0: res = res//i*(i-1) while x%i==0: x//=i if x\u0026gt;1: res = res//x*(x-1) return res n = int(input()) for i in range(n): x = int(input()) print(get(x)) 筛法求欧拉函数 N = int(1e6+10) primes = [] euler = [0]*N st = [False]*N cnt = 0 def get(n): euler[1] = 1 for i in range(2, n+1): if not st[i]: primes.append(i) euler[i] = i-1 for j in range(len(primes)): t = primes[j]*i if t\u0026gt;n: break st[t] = True if i%primes[j]==0: euler[t] = euler[i]*primes[j] break euler[t] = euler[i]*(primes[j]-1) n = int(input()) get(n) for i in range(1,n+1): cnt+=euler[i] print(cnt) 快速幂 # 快速幂函数 def qmi(m, k, p): res, t = 1 % p, m while k: if k \u0026amp; 1: res = res * t % p t = t * t % p k \u0026gt;\u0026gt;= 1 return res # Example usage: # result = qmi(2, 10, 1000000007) # print(result) 拓展欧几里得 # 求 x, y，使得 ax + by = gcd(a, b) def exgcd(a, b, x, y): if b == 0: x[0], y[0] = 1, 0 return a d = exgcd(b, a % b, y, x) y[0] -= (a // b) * x[0] return d # Example usage: # x = [0] # y = [0] # gcd = exgcd(30, 20, x, y) # print(\u0026#34;x:\u0026#34;, x[0], \u0026#34;y:\u0026#34;, y[0], \u0026#34;gcd:\u0026#34;, gcd) P1082 [NOIP2012 提高组] 同余方程 题目描述：求解关于x的同余方程$ax ≡ 1 (mod b)$的最小正整数解。\n实现思路：这个问题可以转化为求解$ax + by = gcd(a, b)$的解，其中x就是我们需要的结果。可以利用扩展欧几里得算法来求解这个方程。具体地，通过递归的方式求解出最大公约数，并且求解出使得$ax + by = gcd(a, b)$成立的整数x和y。然后通过对x取模b的操作得到最小正整数解x。最后输出x即可。\n# 求 x, y，使得 ax + by = gcd(a, b) def exgcd(a, b, x, y): if b == 0: x[0], y[0] = 1, 0 return a d = exgcd(b, a % b, y, x) y[0] -= (a // b) * x[0] return d a, b = map(int, input().split()) x, y = [0], [0] exgcd(a, b, x, y) x = x[0] x = (x%b+b)%b print(x) 递归法求组合数 N = int(2e3)+10 mod = int(1e9)+7 c = [[0]*N for _ in range(N)] def get(n): for i in range(n+1): for j in range(i+1): if j==0: c[i][j] = 1 else: c[i][j] = (c[i-1][j]+c[i-1][j-1])%mod MN = int(2e3) get(MN) n = int(input()) for i in range(n): a, b = map(int, input().split()) print(c[a][b]) 通过预处理逆元的方式求组合数 mod = int(1e9)+7 N = int(2e5)+10 fact, infact = [0]*N, [0]*N def qpow(a, k, p): res = 1 while k: if k\u0026amp;1: res = (res*a)%p a = (a*a)%p k\u0026gt;\u0026gt;=1 return res def init(): fact[0] = infact[0] = 1 for i in range(1, N): fact[i] = (fact[i-1]*i)%mod infact[i] = (infact[i-1]*qpow(i, mod-2, mod))%mod def C(n, m): if n\u0026lt;m: return 0 return (fact[n]*infact[m]%mod*infact[n-m]%mod) init() n = int(input()) for i in range(n): a, b = map(int, input().split()) print(C(a, b)) Lucas定理 p = 1000000007 # 根据需要调整 # 快速幂模板 def qmi(a, k): res = 1 while k: if k \u0026amp; 1: res = (res * a) % p a = (a * a) % p k \u0026gt;\u0026gt;= 1 return res # 通过定理求组合数C(a, b) def C(a, b): res = 1 for i in range(1, b + 1): res = (res * (a - i + 1)) % p res = (res * qmi(i, p - 2)) % p return res # Lucas定理计算组合数 def lucas(a, b): if a \u0026lt; p and b \u0026lt; p: return C(a, b) return (C(a % p, b % p) * lucas(a // p, b // p)) % p # Example usage: # result = lucas(10, 5) # 计算组合数 C(10, 5) # print(result) 分解质因数法求组合数 # 获取素数列表 def get_primes(n): primes = [] st = [False] * (n + 1) for i in range(2, n + 1): if not st[i]: primes.append(i) for j in range(len(primes)): if primes[j] * i \u0026gt; n: break st[primes[j] * i] = True if i % primes[j] == 0: break return primes # 获取n!中p的次数 def get(n, p): res = 0 while n: res += n // p n //= p return res # 高精度乘法 def mul(a, b): res = [0] * (len(a) + len(b)) for i in range(len(a)): t = 0 for j in range(len(b)): t += res[i + j] + a[i] * b[j] res[i + j] = t % 10 t //= 10 res[i + len(b)] += t while len(res) \u0026gt; 1 and res[-1] == 0: res.pop() return res # 计算组合数 def calc_combination(a, b): primes = get_primes(a) sum = [0] * len(primes) for i in range(len(primes)): p = primes[i] sum[i] = get(a, p) - get(b, p) - get(a - b, p) res = [1] for i in range(len(primes)): for j in range(sum[i]): res = mul(res, [primes[i]]) return res # Example usage: # result = calc_combination(10, 5) # 计算组合数 C(10, 5) # print(\u0026#39;\u0026#39;.join(map(str, result[::-1]))) 高斯消元 eps = 1e-8 # 根据需要调整 # a 是增广矩阵，n 是矩阵维度 def gauss(a, n): c, r = 0, 0 for c in range(n): t = r for i in range(r, n): if abs(a[i][c]) \u0026gt; abs(a[t][c]): t = i if abs(a[t][c]) \u0026lt; eps: continue for i in range(c, n + 1): a[r][i], a[t][i] = a[t][i], a[r][i] for i in range(n, c - 1, -1): a[r][i] //= a[r][c] for i in range(r + 1, n): if abs(a[i][c]) \u0026gt; eps: for j in range(n, c - 1, -1): a[i][j] -= a[r][j] * a[i][c] r += 1 if r \u0026lt; n: for i in range(r, n): if abs(a[i][n]) \u0026gt; eps: return 2 # 无解 return 1 # 有无穷多组解 for i in range(n - 1, -1, -1): for j in range(i + 1, n): a[i][n] -= a[i][j] * a[j][n] return 0 # 有唯一解 # Example usage: # a = [[2, 1, -1, 8], [-3, -1, 2, -11], [-2, 1, 2, -3]] # n = 3 # result = gauss(a, n) # print(result) ","permalink":"https://showguan.github.io/en/posts/tech/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%9B%9B%E6%95%B0%E5%AD%A6python%E5%AE%9E%E7%8E%B0/","summary":"算法笔记（四）——数学（Python实现） 数学 试除法判定质数 def check(x): # 判定 if x\u0026lt;2: return False for i in range(2, int(x**0.5)+1): if x%i==0: return False return True n = int(input()) for i in range(n): x = int(input()) if check(x): print(\u0026#34;Yes\u0026#34;) else: print(\u0026#34;No\u0026#34;) 试除法分解","title":"算法笔记（四）——数学（Python实现）"},{"content":"JAVA 20天速成 有志者事竟成\nJAVA背景信息 JAVA是一门高级编程语言。\n属于ORACLE公司\nJAVA之父——詹姆斯·高斯林\nJAVA主要做互联网系统的开发\n主要技术平台：JAVASE， JAVEEE， JAVAME\nJDK的发展史 Java Development Kit 开发者工具包\n当前使用更多的是JDK-8，JDK-11\n教学只用JDK-17\n技术类网站 ： 安装路径下不要包含中文和空格\n所有的开发工具最好安装到统一目录\n电脑内JAVA安装路径：\nF:\\Java\\jdk17 C:\\Program Files\\Java\\jdk1.8.0_311\njavac.exe : 编译工具 java.exe : 执行工具\n常用命令\ncls： 清屏 退回到盘符根目录 ： cd\\ 先切换盘符在切换目录 Java 程序要经历的步骤：\n编写、编译（javac), 运行(java) Java代码编写有什么基本要求？\n文件名称和后缀必须是java结尾 文件名称必须与代码的类名称一致 必须使用英文模式下的符号 javac .\\HelloWorld.java\rjava HelloWorld public class Main{ public static void main(String[] args){ System.out.println(\u0026#34;Hello World!\u0026#34;); } } JDK11开始支持java直接运行源代码文件\nJDK 组成 JRE（Java Runtime Environment）：Java的运行环境\nJVM（Java Vitual Machine）：Java虚拟机， 真正运行java程序的地方。\n核心类库：Java自己写好的程序，给程序员调用的\n开发工具：java, javac\nJDK（Java Development Kit）：Java开发工具包（包括上面所有）。\nJava的跨平台、工作原理\n一次编译，处处可用 Path环境变量：用于记住程序路径，方便在命令行窗口的任意目录启动程序\nIDEA管理JAVA程序的结构\nproject（项目，工程） module（模块） package（包） class（类） IDEA快捷键\nmain/psvm sout\nctrl + D 复制当前行到下一行\nctrl + Y 删除所在行，建议用ctrl + x\nctrl + alt + L 格式化代码\nALT + SHIFT + ⬆ | ⬇ 上下移动当前代码\nctrl + /, ctrl + shift + / 对代码进行注释\nIDEA常用操作：\n删除类文件 修改类名称 修改模块 导入模块 方法1：\n方法2：\n复制代码到， 之后再导入\n删除模块 打开工程 关闭工程 JAVA基础语法 1、注释 // 单行注释 /* 多行注释 */ /** 文档注释 * 目标： */ 2、变量 变量就是内存中的一块区域。\n// 二进制表示，前缀 0b 表示二进制 int a1 = 0b01100001; System.out.println(a1); // 输出：97 // 十进制表示 int a2 = 97; System.out.println(a2); // 输出：97 // 八进制表示，前缀 0 表示八进制 int a3 = 0141; System.out.println(a3); // 输出：97 // 十六进制表示，前缀 0x 表示十六进制 int a4 = 0xFA; System.out.println(a4); // 输出：250 // 声明并初始化不同类型的变量 byte a = 10; // byte类型，表示范围为 -128 到 127 short b = 8888; // short类型，表示范围为 -32768 到 32767 int c = 130; // int类型，表示范围为 -2147483648 到 2147483647 long d = 9393939393993L; // long类型，需要在结尾加上L或l，表示范围为 -9223372036854775808 到 9223372036854775807 // 输出不同类型的整数变量 System.out.println(a); // 输出：10 System.out.println(b); // 输出：130 System.out.println(c); // 输出：9393939393993 System.out.println(d); // 输出：8888 // 浮点数类型 float e = 2.17F; // float类型，需要在结尾加上F或f double f = 3.141592657; // double类型，默认为double，可以不加任何标识 // 输出浮点数变量 System.out.println(e); // 输出：2.17 System.out.println(f); // 输出：3.141592657 // 字符类型 char ch = \u0026#39;c\u0026#39;; // char类型，表示单个字符 System.out.println(ch); // 输出：c // 布尔类型 boolean flag = false; // boolean类型，表示true或false System.out.println(flag); // 输出：false // 字符串类型 String st = \u0026#34;string\u0026#34;; // String类型，表示字符串 System.out.println(st); // 输出：string 类型转换 byte a = 10; // 声明并初始化byte类型变量a int b = a; // 将byte类型的变量a赋值给int类型的变量b，发生拓宽转换 System.out.println(b); // 输出：10 int c = 100; // 声明并初始化int类型变量c double d = c; // 将int类型的变量c赋值给double类型的变量d，发生拓宽转换 System.out.println(d); // 输出：100.0 char e = \u0026#39;b\u0026#39;; // 声明并初始化char类型变量e int f = e; // 将char类型的变量e赋值给int类型的变量f，发生拓宽转换 System.out.println(f); // 输出：98（字符\u0026#39;b\u0026#39;对应的ASCII码值） byte a = 10; // 声明并初始化byte类型变量a short b = 20; // 声明并初始化short类型变量b int c = 30; // 声明并初始化int类型变量c long d = 40; // 声明并初始化long类型变量d // 对a、b、c、d进行加法运算，结果存储在long类型变量res1中 long res1 = a + b + c + d; System.out.println(res1); // 输出：100 // 对a、b进行加法运算，并将1.0（double类型）相加，结果存储在double类型变量res2中 double res2 = a + b + 1.0; System.out.println(res2); // 输出：31.0 // 对a、b进行加法运算，结果存储在int类型变量res3中 int res3 = a + b; System.out.println(res3); // 输出：30 byte a1 = 10; // 声明并初始化byte类型变量a1 byte a2 = 20; // 声明并初始化byte类型变量a2 // 对a1、a2进行加法运算，由于byte类型相加可能溢出，因此结果存储在int类型变量res4中 int res4 = a1 + a2; // 进行运算时a1和a2自动转换成int类型，然后相加 System.out.println(res4); // 输出：30 强制类型转换 int a = 1111111; char b = (char) a; // 快捷键， ALT+ENTER System.out.println(b); double c = 99.8; int d = (int) c; // 丢掉小数部分 System.out.println(d); 3、运算符 使用+符号做连接符的情况 int a = 10; // 声明并初始化整数变量a // 使用字符串连接符将字符串 \u0026#34;abc\u0026#34; 和整数变量a 连接起来并打印 System.out.println(\u0026#34;abc\u0026#34; + a); // 输出：\u0026#34;abc10\u0026#34; // 打印整数变量a 加 5 的结果 System.out.println(a + 5); // 输出：15 // 将字符串 \u0026#34;abc\u0026#34;、整数变量a 和字符 \u0026#39;a\u0026#39; 连接起来并打印 // 注：\u0026#39;a\u0026#39; 的ASCII码值为97，与整数变量a相加后再转换为字符 System.out.println(\u0026#34;abc\u0026#34; + a + \u0026#39;a\u0026#39;); // 输出：\u0026#34;abc10a\u0026#34; // 将字符 \u0026#39;a\u0026#39; 的ASCII码值（97）和整数变量a 相加，再将结果与字符串 \u0026#34;abc\u0026#34; 连接起来并打印 // 注：字符 \u0026#39;a\u0026#39; 的ASCII码值被当作整数参与运算，然后再将结果转换为字符 System.out.println(\u0026#39;a\u0026#39; + a + \u0026#34;abc\u0026#34;); // 输出：\u0026#34;107abc\u0026#34; // 初始化变量n和m分别为3和5 int n = 3, m = 5; // 计算res的值 // ++m: 先自增m，m变成6，然后返回6 // --m: 先自减m，m变成5，然后返回5 // m--: 先返回m的值5，然后再自减m，m变成4 // ++n: 先自增n，n变成4，然后返回4 // n--: 先返回n的值4，然后再自减n，n变成3 // 计算：6 - 5 + 5 - 4 + 4 + 3 = 9 int res = ++m - --m + m-- - ++n + n-- + 3; System.out.println(res); // 输出res的值 System.out.println(n); // 输出n的值，此时n为3 System.out.println(m); // 输出m的值，此时m为4 // 初始化变量c和d分别为10和5 int c = 10, d = 5; // 计算res2的值 // c++: 先返回c的值10，然后再自增c，c变成11 // ++c: 先自增c，c变成12，然后返回12 // --d: 先自减d，d变成4，然后返回4 // ++d: 先自增d，d变成5，然后返回5 // 计算：10 + 12 - 4 - 5 + 1 + c--，其中c此时为12，然后再自减c，c变成11 // 计算：10 + 12 - 4 - 5 + 1 + 12 = 26 int res2 = c++ + ++c - --d - ++d + 1 + c--; System.out.println(res2); // 输出res2的值 System.out.println(c); // 输出c的值，此时c为11 System.out.println(d); // 输出d的值，此时d为5 逻辑运算 // 定义变量 double size = 9.8; // size的值为9.8 double storage = 16; // storage的值为16 // 第一组条件判断 System.out.println(\u0026#34;original \u0026#34; + storage); // 使用按位与运算符\u0026#34;\u0026amp;\u0026#34;，即使第一个条件不满足，storage也会自增 boolean res11 = size \u0026lt; 8 \u0026amp; storage++ \u0026gt;= 16; // false System.out.println(res11); // 输出false System.out.println(storage); // 输出17.0，因为storage在条件判断之后自增了 // 使用逻辑与运算符\u0026#34;\u0026amp;\u0026amp;\u0026#34;，若第一个条件不满足，则不会执行第二个条件，storage不会自增 boolean res12 = size \u0026lt; 8 \u0026amp;\u0026amp; storage++ \u0026gt;= 16; // false System.out.println(res12); // 输出false System.out.println(storage); // 输出17.0，因为storage没有自增 // 第二组条件判断 System.out.println(\u0026#34;-------------------\u0026#34;); System.out.println(\u0026#34;original \u0026#34; + storage); // 使用按位或运算符\u0026#34;|\u0026#34;，即使第一个条件满足，storage也会自增 boolean res21 = size \u0026gt;= 8 | storage++ \u0026gt;= 8; // true System.out.println(res21); // 输出true System.out.println(storage); // 输出18.0，因为storage在条件判断之后自增了 // 使用逻辑或运算符\u0026#34;||\u0026#34;，若第一个条件满足，则不会执行第二个条件，storage不会自增 boolean res22 = size \u0026gt;= 8 || storage++ \u0026gt;= 16; // true System.out.println(res22); // 输出true System.out.println(storage); // 输出18.0，因为storage没有自增 System.out.println(\u0026#34;-------------------\u0026#34;); // 其他操作 // 使用逻辑非运算符\u0026#34;!\u0026#34;，对true取反，结果为false System.out.println((!true)); // 输出false // 使用按位异或运算符\u0026#34;^\u0026#34;，对两个数的二进制进行异或操作，结果为0 System.out.println((1^1)); // 输出0 int grade = 10; // 定义成绩变量为10 // 使用三元运算符判断成绩是否合格 String res = grade \u0026gt;= 60 ? \u0026#34;成绩合格\u0026#34; : \u0026#34;成绩不合格\u0026#34;; System.out.println(res); // 输出 \u0026#34;成绩不合格\u0026#34;，因为grade的值为10，小于60 // 第一条逻辑表达式 System.out.println(10 \u0026gt; 3 || 10 \u0026gt; 3 \u0026amp;\u0026amp; 10 \u0026lt; 3); // 输出true // 逻辑运算符\u0026#34;\u0026amp;\u0026amp;\u0026#34;的优先级高于\u0026#34;||\u0026#34;，所以先执行10 \u0026gt; 3 \u0026amp;\u0026amp; 10 \u0026lt; 3，结果为false，然后执行10 \u0026gt; 3 || false，结果为true。 // 第二条逻辑表达式 System.out.println((10 \u0026gt; 3 || 10 \u0026gt; 3) \u0026amp;\u0026amp; 10 \u0026lt; 3); // 输出false // 加了括号后，先执行括号内的10 \u0026gt; 3 || 10 \u0026gt; 3，结果为true，然后与10 \u0026lt; 3进行逻辑与运算，结果为false。 输入 // 1. 创建Scanner对象sc，用于从System.in（即标准输入流，通常为控制台）读取用户输入 Scanner sc = new Scanner(System.in); // 2. 输出提示信息，要求用户输入年龄 System.out.println(\u0026#34;Please input your age:\u0026#34;); // 3. 使用Scanner对象sc读取用户输入的整数型年龄，并将其存储在变量age中 int age = sc.nextInt(); // 4. 根据用户输入的年龄计算其出生年份（假设当前为2024年），然后输出结果 System.out.println(\u0026#34;Your birth year is :\u0026#34; + (2024 - age)); // 5. 输出提示信息，要求用户输入姓名 System.out.println(\u0026#34;Please input your name:\u0026#34;); // 6. 使用Scanner对象sc读取用户输入的字符串型姓名，并将其存储在变量name中 String name = sc.next(); // 7. 重复输出用户出生年份（与步骤4相同，此处可能是代码冗余或笔误） System.out.println(\u0026#34;Your birth year is :\u0026#34; + (2024 - age)); // 8. 输出欢迎信息，包含用户输入的姓名 System.out.println(\u0026#34;Welcome: \u0026#34; + name); switch注意事项：\n表达式类型只能是byte， short, int, char, JDK5开始支持枚举， JDK7开始支持String，不支持double，float, long。 case给出的值不允许重复，且只能是字面量，不能是变量 正常使用时需要写break， 否则会出现穿透现象 switch 技巧：运用穿透性合并同样结果的分支。\n// 创建一个Random对象用于生成随机数 Random random = new Random(); // 生成1到100之间的随机数作为幸运数字 int luckNumber = random.nextInt(100) + 1; // 创建一个Scanner对象用于接收用户的输入 Scanner sc = new Scanner(System.in); // 提示用户输入猜测的数字 System.out.println(\u0026#34;请输入你猜的数字\u0026#34;); // 循环，直到用户猜中为止 while (true) { // 获取用户输入的猜测数字 int guessNumber = sc.nextInt(); // 判断用户输入的数字与幸运数字的关系，并给出相应提示 if (guessNumber == luckNumber) { // 如果猜中了，输出恭喜信息，并结束循环 System.out.println(\u0026#34;恭喜你，你中了100元大奖\u0026#34;); break; } else if (guessNumber \u0026gt; luckNumber) { // 如果猜的数字太大，提示用户数字太大 System.out.println(\u0026#34;你猜的数字太大了\u0026#34;); } else { // 如果猜的数字太小，提示用户数字太小 System.out.println(\u0026#34;你猜的数字太小了\u0026#34;); } } 数组 //1.标准写法 // 初始化整型数组ages，包含5个元素，分别为10, 20, 30, 40, 50 int[] ages = new int[]{ 10, 20, 30, 40, 50 }; // 初始化双精度浮点型数组scores，包含5个元素，分别为99.9, 88.8, 77.7, 66.6, 55.5 double[] scores = new double[]{ 99.9, 88.8, 77.7, 66.6, 55.5 }; // 输出整型数组ages的引用地址 System.out.println(ages); // 输出双精度浮点型数组scores的引用地址 //2.简化写法 // 使用简化语法初始化整型数组ages2，包含5个元素，分别为10, 20, 30, 40, 50 int[] ages2 = { 10, 20, 30, 40, 50 }; // 使用简化语法初始化双精度浮点型数组scores2，包含5个元素，分别为99.9, 88.8, 77.7, 66.6, 55.5 //3.写法三 // 使用写法三初始化整型数组age3，包含5个元素，分别为10, 20, 30, 40, 50 int age3[] = new int[10]; // 使用写法三初始化双精度浮点型数组score3，包含5个元素，分别为99.9, 88.8, 77.7, 66.6, 55.5 Java 内存分配 方法区\n栈\n堆\n本地方法栈\n程序计数器\nint a = 20; int[] arr = new int[3]; 以上两行代码的执行原理：\na是变量，直接放在栈中，a变量中存储的数据就是20这个值 new int[3]是创建一个数组对象，会在堆内存中开辟区存储3个整数 arr是变量，在栈中，arr中存储的是数组对象在堆内存中地址值 Java小案例——双色球 package com.show.test; import java.util.Random; import java.util.Scanner; public class Test4 { public static void main(String[] args) { System.out.println(1); int[] userNumber = userChooseNumber(); // 用户选择号码 int[] luckNumer = createLuckNumber(); // 创建幸运号码 check(userNumber, luckNumer); // 检查用户选择的号码与幸运号码的匹配情况 } // 用户选择号码的方法 public static int[] userChooseNumber() { System.out.println(\u0026#34;Welcome to this select ball system!\u0026#34;); // 欢迎语 int[] numbers = new int[6]; // 存储用户选择的号码数组 Scanner sc = new Scanner(System.in); for (int i = 0; i \u0026lt; 5; i++) { System.out.println(\u0026#34;Please input your No.\u0026#34; + (i + 1) + \u0026#34; ball\u0026#34;); // 提示用户输入号码 while (true) { int n = sc.nextInt(); // 接收用户输入的号码 if (n \u0026lt; 1 || n \u0026gt; 33) { // 判断号码是否在有效范围内 System.out.println(\u0026#34;Your number not in the available zone: [1,33], Please input again\u0026#34;); } else { if (exist(numbers, n)) { // 判断号码是否已经被选择 System.out.println(\u0026#34;Current number has been chosen, Please input again\u0026#34;); } else { numbers[i] = n; // 将号码存入数组 break; } } } System.out.println(\u0026#34;Your input number is :\u0026#34; + numbers[i]); // 输出用户输入的号码 } System.out.println(\u0026#34;Input your last number\u0026#34;); while (true) { int n = sc.nextInt(); if (n \u0026lt; 1 || n \u0026gt; 16) { System.out.println(\u0026#34;Your number is not available, Please input the number between 1 and 16\u0026#34;); } else { numbers[5] = n; // 存储最后一个号码 break; } } System.out.println(\u0026#34;Blow is your input numbers\u0026#34;); printArray(numbers); // 打印用户选择的号码 return numbers; } // 判断数字是否已存在于数组中的方法 public static boolean exist(int[] arr, int x) { for (int i = 0; i \u0026lt; arr.length; i++) { if (arr[i] == x) { return true; } } return false; } // 打印数组的方法 public static void printArray(int[] arr) { for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } System.out.println(); } // 创建幸运号码的方法 public static int[] createLuckNumber() { int[] numbers = new int[6]; // 存储幸运号码数组 Random r = new Random(); for (int i = 0; i \u0026lt; 5; i++) { while (true) { int n = r.nextInt(33) + 1; // 生成随机号码 if (exist(numbers, n)) { continue; } else { numbers[i] = n; // 将号码存入数组 break; } } } int n = r.nextInt(16) + 1; numbers[5] = n; // 存储最后一个号码（蓝球） System.out.println(\u0026#34;Blow is the LuckNumber!\u0026#34;); // 输出幸运号码 printArray(numbers); // 打印幸运号码 return numbers; } // 检查用户选择的号码与幸运号码的匹配情况 public static void check(int[] arr1, int[] arr2) { int redCount = 0, blueCount = 0; // 红球匹配数、蓝球匹配数初始化为0 for (int i = 0; i \u0026lt; arr1.length - 1; i++) { if (arr1[i] == arr2[i]) { // 判断红球是否匹配 redCount += 1; } } if (arr1[5] == arr2[5]) { // 判断蓝球是否匹配 blueCount += 1; } // 输出命中的红球数量和蓝球数量 System.out.println(\u0026#34;您命中的红球数量是：\u0026#34; + redCount); System.out.println(\u0026#34;您命中的蓝球数量是：\u0026#34; + blueCount); // 根据命中情况输出不同的中奖信息 if (redCount == 6 \u0026amp;\u0026amp; blueCount == 1) { System.out.println(\u0026#34;恭喜您，中奖1000万，可以开始享受人生了~~~\u0026#34;); } else if (redCount == 6 \u0026amp;\u0026amp; blueCount == 0) { System.out.println(\u0026#34;恭喜您，中奖500万，可以稍微开始享受人生了~~~\u0026#34;); } else if (redCount == 5 \u0026amp;\u0026amp; blueCount == 1) { System.out.println(\u0026#34;恭喜您，中奖3000元，可以出去吃顿小龙虾了~\u0026#34;); } else if (redCount == 5 \u0026amp;\u0026amp; blueCount == 0 || redCount == 4 \u0026amp;\u0026amp; blueCount == 1) { System.out.println(\u0026#34;恭喜您，中了小奖：200元~\u0026#34;); } else if (redCount == 4 \u0026amp;\u0026amp; blueCount == 0 || redCount == 3 \u0026amp;\u0026amp; blueCount == 1) { System.out.println(\u0026#34;中了10元~\u0026#34;); } else if (redCount \u0026lt; 3 \u0026amp;\u0026amp; blueCount == 1) { System.out.println(\u0026#34;中了5元~\u0026#34;); } else { System.out.println(\u0026#34;感谢您对福利事业做出的巨大贡献~~~\u0026#34;); } } } 面向对象 对象就是一张表。\nthis的执行原理 this：就是一个变量，可以用在方法中，来拿到当前对象。\nthis主要用来\npublic class PrintThis { public void printThis(){ System.out.println(this); } } public class Test1 { public static void main(String[] args) { PrintThis t = new PrintThis(); //com.show.thisDemo.PrintThis@3b07d329 t.printThis(); System.out.println(t); //com.show.thisDemo.PrintThis@3b07d329 } } public class Student1 { int score; public void check(int score){ if(this.score\u0026gt;score){ System.out.println(\u0026#34;Congratulations!\u0026#34;); }else{ System.out.println(\u0026#34;What\u0026#39;s the pity!\u0026#34;); } } } public static void main(String[] args) { Student1 s1 = new Student1(); s1.score = 10; s1.check(100); } 构造器需要注意的问题 不写无参数构造器时，编译器会自动生成一个无参数构造器 而写了有参数构造器之后，就不会自动生成无参数构造器了， 需要手动写上。 封装 就是用类设计对象处理某一个事物的数据时，应该把要处理的数据，以及处理这些数据的方法，设计到一个对象中去 合理隐藏，合理暴露（get, set方法）\n实例JavaBean 实体类：一种特殊的类\nMovie package com.show.ObjectDemo; public class Movie { // 私有属性 private int id; // 电影ID private String name; // 电影名称 private double price; // 电影票价 private double score; // 电影评分 private String director; // 导演 private String actor; // 主演 private String info; // 电影信息 // 无参构造方法 public Movie() { } // 带参构造方法 public Movie(int id, String name, double price, double score, String director, String actor, String info) { this.id = id; this.name = name; this.price = price; this.score = score; this.director = director; this.actor = actor; this.info = info; } // Getter和Setter方法 public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } public double getScore() { return score; } public void setScore(double score) { this.score = score; } public String getDirector() { return director; } public void setDirector(String director) { this.director = director; } public String getActor() { return actor; } public void setActor(String actor) { this.actor = actor; } public String getInfo() { return info; } public void setInfo(String info) { this.info = info; } } MovieOperator package com.show.ObjectDemo; public class MovieOperator { // 电影数组 private Movie[] movies; // 构造方法 public MovieOperator(Movie[] movies) { this.movies = movies; } // 打印所有电影信息 public void printAllMovies() { System.out.println(\u0026#34;系统全部电影信息如下————————————————————————————\u0026#34;); for (int i = 0; i \u0026lt; movies.length; i++) { Movie m = movies[i]; System.out.println(\u0026#34;编号：—————————————\u0026#34; + m.getId()); System.out.println(\u0026#34;电影名：—————————————\u0026#34; + m.getName()); System.out.println(\u0026#34;价格：—————————————\u0026#34; + m.getPrice()); System.out.println(\u0026#34;-----------------------\u0026#34;); } } // 根据ID查询电影信息 public void searchMovieById(int id) { for (int i = 0; i \u0026lt; movies.length; i++) { Movie m = movies[i]; if (id == m.getId()) { System.out.println(\u0026#34;存在该电影！\u0026#34;); System.out.println(\u0026#34;编号：—————————————\u0026#34; + m.getId()); System.out.println(\u0026#34;电影名：—————————————\u0026#34; + m.getName()); System.out.println(\u0026#34;价格：—————————————\u0026#34; + m.getPrice()); System.out.println(\u0026#34;导演：—————————————\u0026#34; + m.getDirector()); System.out.println(\u0026#34;演员：—————————————\u0026#34; + m.getActor()); System.out.println(\u0026#34;评分：—————————————\u0026#34; + m.getScore()); System.out.println(\u0026#34;其他信息：—————————————\u0026#34; + m.getInfo()); return; } } System.out.println(\u0026#34;不存在该电影\u0026#34;); } } Test package com.show.ObjectDemo; import java.util.Scanner; public class Test { public static void main(String[] args) { // 创建Movie对象数组，存储电影信息 Movie[] movies = new Movie[4]; movies[0] = new Movie(1, \u0026#34;水门桥\u0026#34;, 38.9, 9.8, \u0026#34;徐克\u0026#34;, \u0026#34;吴京\u0026#34;, \u0026#34;12万人想看\u0026#34;); movies[1] = new Movie(2, \u0026#34;出拳吧\u0026#34;, 39, 7.8, \u0026#34;唐晓白\u0026#34;, \u0026#34;田雨\u0026#34;, \u0026#34;3.5万人想看\u0026#34;); movies[2] = new Movie(3, \u0026#34;月球陨落\u0026#34;, 42, 7.9, \u0026#34;罗兰\u0026#34;, \u0026#34;贝瑞\u0026#34;, \u0026#34;17.9万人想看\u0026#34;); movies[3] = new Movie(4, \u0026#34;一点就到家\u0026#34;, 35, 8.7, \u0026#34;许宏宇\u0026#34;, \u0026#34;刘昊然\u0026#34;, \u0026#34;10.8万人想看\u0026#34;); // 创建MovieOperator对象，用于操作Movie数组 MovieOperator movieOperator = new MovieOperator(movies); System.out.println(\u0026#34;在这里，你可以查询关于最新的电影信息！\u0026#34;); Scanner sc = new Scanner(System.in); while (true) { System.out.println(\u0026#34;输入1查看所有电影信息\u0026#34;); System.out.println(\u0026#34;输入2可以查询某个特定电影的详细信息\u0026#34;); int cmd = sc.nextInt(); switch (cmd) { case 1: movieOperator.printAllMovies(); // 打印所有电影信息 break; case 2: System.out.println(\u0026#34;请输入你需要查询的电影ID\u0026#34;); int id = sc.nextInt(); movieOperator.searchMovieById(id); // 根据ID查询电影信息 break; default: System.out.println(\u0026#34;非法命令，请重新输入\u0026#34;); } } } } 成员变量和局部变量 成员变量：类中， 方法外， 有默认值， 存于堆内存中， 属于整个对象， 于对象同生共死\n局部变量：常见于方法中，无默认值，需要初始化， 存于栈内存中， 属于所属大括号中， 方法调用而生，结束而亡\nAPI 注意事项 同一个包下的程序，可以直接访问 访问其他包下的程序，必须导包才可以访问 自己的程序中调用Java提供的程序，也需要先导包才可以使用 注意Java.lang包下的程序是不需要导包， 可以直接使用 访问多个其他包下的程序，在这些程序名一样的情况下，默认只能只能导入一个程序，另外一个程序必须带包名和类名来访问。 Demo d = new Demo(); d.print(); Demo1 d1 = new Demo1(); d1.print(); com.show.pkgDemo3.Demo1 d2 = new com.show.pkgDemo3.Demo1(); d2.print(); String String name = \u0026#34;Java\u0026#34;; System.out.println(name); String rs1 = new String(); System.out.println(rs1); String rs2 = new String(\u0026#34;NewStringJava\u0026#34;); System.out.println(rs2); String 是不可变的 只要是“\u0026hellip;”的方式写出的字符串对象，会存储到字符串常量池中，且相同内容的字符只会存储一份 而new String创建字符串对象时，每次都会new出来一个新对象，放在堆内存中。 String s1 = \u0026#34;abc\u0026#34;; String s2 = \u0026#34;abc\u0026#34;; System.out.println(s1==s2); //true char[] ch = {\u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;}; String s3 = new String(ch); String s4 = new String(ch); System.out.println(s3==s4); //false String s5 = new String(\u0026#34;abc\u0026#34;); // 实际创建了两个对象，一个在字符串常量池当中 // 另一个在堆内存中 String s6 = \u0026#34;abc\u0026#34;; // 实际创建了0个对象，因为\u0026#34;abc\u0026#34;已经在常量池当中了 System.out.println(s5==s6); //false String s7 = \u0026#34;abc\u0026#34;; String s8 = \u0026#34;a\u0026#34;+\u0026#39;b\u0026#39;+\u0026#34;c\u0026#34;; //编译器会自动处理 System.out.println(s7==s8); //true String s9 = \u0026#34;abc\u0026#34;; String s10 = \u0026#34;ab\u0026#34;; String s11 = s10 + \u0026#34;c\u0026#34;; //而对于变量则不会自动处理 System.out.println(s9==s11); //false ArrayList ArrayList\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(\u0026#34;heima\u0026#34;); list.add(\u0026#34;Java\u0026#34;); list.add(\u0026#34;爪洼\u0026#34;); System.out.println(list);//[heima, Java, 爪洼] list.add(1, \u0026#34;JAVAJAVA\u0026#34;); System.out.println(list); //[heima, JAVAJAVA, Java, 爪洼] System.out.println(list.get(1));//JAVAJAVA System.out.println(list.size());//4 System.out.println(list.remove(1));//JAVAJAVA System.out.println(list.remove(\u0026#34;Java\u0026#34;)); //true 默认删除第一个出现的元素 System.out.println(list);//[heima, 爪洼] System.out.println(list.set(1, \u0026#34;ZhuaWa\u0026#34;));//爪洼 System.out.println(list);//[heima, ZhuaWa] 综合实践项目——ATM 进阶课程 OOP static 静态， 可以修饰成员变量，成员方法 成员变量按照有无static修饰，分为两种 类变量 ： 有static修饰，属于类，在计算机里只有一份，会被类的全部对象共享 实例变量（对象的变量）：无static修饰，属于每个对象 // 推荐赋值方式 Student.name = \u0026#34;Java\u0026#34;; // 不推荐赋值方式 Student s1 = new Student(); s1.name = \u0026#34;True Java\u0026#34;; Student s2 = new Student(); s2.name = \u0026#34;False Java\u0026#34;; System.out.println(s2.name); //False Java System.out.println(Student.name); //False Java s1.age = 25; s2.age = 15; System.out.println(s1.age); //25 System.out.println(s2.age); //15 //User类 public static int number; public User(){ number+=1; //类中访问自己的变量可以不写 User(). } //Test类 public static void main(String[] args) { User u1 = new User(); User u2 = new User(); User u3 = new User(); System.out.println(User.number); //3 } 类方法：有static修饰的成员方法，属于类。 实例方法：无static修饰的成员方法，属于对象 //Student double score; public static void printHelloWorld(){ System.out.println(\u0026#34;Hello World\u0026#34;); System.out.println(\u0026#34;Hello World\u0026#34;); } public void printPass(){ System.out.println(\u0026#34;成绩：\u0026#34; + (score \u0026gt;= 60 ? \u0026#34;及格\u0026#34; : \u0026#34;不及格\u0026#34;)); } //Test Student.printHelloWorld();//Hello World Hello World Student s = new Student(); s.score = 100; s.printPass(); //成绩：及格 类方法的常见应用案例 类方法最常见的应用场景是做工具类 工具类：工具类中的方法都是一些类方法，每个方法都是用来完成一个功能的，工具类是给开发人员共同使用的\n可以提高代码复用：调用方便，提高了开发效率\n使用类方法、实例方法时的几点注意事项\n类方法中可以直接访问类的成员，不可以直接访问实例成员 实例方法中既可以直接访问类成员，也可以直接访问实例成员 实例方法中可以出现this关键字，类方法中不可以出现this关键字 代码块 静态代码块 格式 ： stat{ } 特点：类加载时自动执行，由于类只会加载一次，所以静态代码块只会执行一次 作用：完成类的初始化，例如：对类变量的初始化赋值 实例代码块： 格式：{ } 特点：每次创建对象时，执行实例代码块，并在构造器前执行 作用：和构造器一样，都是用来完成对象的初始化的，例如：对实例变量进行初始化赋值 单例设计模式 **设计模式（Design pattern）**就是解决问题的最优解。\n单例设计模式：确保一个类只有一个对象\n饿汉式单例类\n把类的构造器私有 定义一个类变量记住类的一个对象 定义一个类方法，返回对象 public class A { private static A a = new A(); private A(){ } public static A getObject(){ return a; } } 继承 继承的好处：减少重复代码的编写\npublic class people { private String name; public String getName(){ return this.name; } public void setName(String name){ this.name = name; } } public class teacher extends people{ private String skill; public String getSkill() { return skill; } public void setSkill(String skill) { this.skill = skill; } public void printInfo(){ System.out.println(getName() + \u0026#34;具备的技能 ： \u0026#34; + skill); } } public class Test { public static void main(String[] args) { teacher t1 = new teacher(); t1.setName(\u0026#34;Kennem\u0026#34;); t1.setSkill(\u0026#34;Java\u0026#34;); System.out.println(t1.getName()); //Kennem System.out.println(t1.getSkill()); //Java t1.printInfo(); //Kennem具备的技能 ： Java } } 继承的注意事项：\n权限修饰符 单继承，Object类 方法重写 子类中访问其他成员的特点 子类构造器的特点 注意事项的小结 修饰符 本类中 同一个包下的其他类继承 任意包下的子类继承 任意包下的任何类继承 private ✓ 缺省 ✓ ✓ protected ✓ ✓ ✓ public ✓ ✓ ✓ ✓ 注意：用protected修饰，只能在子类中访问，而不是子类的对象访问\n单继承 java不支持多继承，支持多层继承\nObject类 Object类是任何类的父亲。\n方法重写 重写注意事项\n使用Override注解\n@Override public void print(){ System.out.println(\u0026#34;88888888\u0026#34;); } @Override public void print2(){ System.out.println(\u0026#34;8\u0026#34;); } 子类复写父类方法时，访问权限必须大于或者等于父类该方法的权限（publc -\u0026gt; protected -\u0026gt; 缺省）\n重写的方法返回值类型，必须与被重写方法的返回值类型一致，或者范围更小\n私有方法、静态方法不能被重写\n声明不变，重新实现\ntoString()方法重写\n@Override public String toString() { return \u0026#34;Student{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#39;}\u0026#39;; } 子列构造器的特点：\n子类的全部构造器，都会先调用父类的构造器，再执行自己的构造器。 子类构造器是符合实现调用父类构造器的： 默认情况下，子类全部构造器的第一行都是super()（默认都有），它会调用父类的无参数构造器。 如果父类没有无参数构造器，则我们必须再子类构造器的第一行手写super(...)， 指定去调用父类的有参数构造器。 class Student extends People{ private String skill; public Student(String name, int age, String skill){ super(name, age); //调用父类的有参构造器 父类中name和age构造器 this.skill = skill; } public String getSkill() { return skill; } public void setSkill(String skill) { this.skill = skill; } } 补充知识：this(...)调用兄弟构造器\n任意类的构造器中，是可以通过this(...)去调用该类的其他构造器的。 this(...) 和 super(...) 使用时的注意事项 this(...)、super(...)都只能放在构造器的第一行，因此，有了this(...)就不能写super(...)了，反之亦然 public Boy(String name, int age) { this(name, age, \u0026#34;黑马程序员\u0026#34;); } public Boy(String name, int age, String schoolName) { this.name = name; this.age = age; this.schoolName = schoolName; } 多态 多态是在继承/实现情况下的一种现象，表现为：对象多态，行为多态。\n在多台形式下，右边对象是解耦合的，更偏于扩展和维护。 public class People { public String name = \u0026#34;我是人\u0026#34;; public void run(){ System.out.println(\u0026#34;人可以跑\u0026#34;); } } public class Student extends People{ public String name = \u0026#34;我是学生\u0026#34;; @Override public void run() { System.out.println(\u0026#34;学生跑得很快！\u0026#34;); } public void test(){ System.out.println(\u0026#34;学生要考试...\u0026#34;); } } public class Teacher extends People{ public String name = \u0026#34;我是老师\u0026#34;; @Override public void run() { System.out.println(\u0026#34;老师跑的气喘吁吁！\u0026#34;); } } public class Test { public static void main(String[] args) { People p = new People(); System.out.println(p.name); People p1 = new Student(); System.out.println(p1.name); p1.run(); //编译看父类， 运行看子类 People p2 = new Teacher(); System.out.println(p2.name); p2.run(); } } if(p instanceof Student){ Student s = (Student) p; s.test(); }else if(p instanceof Teacher){ Teacher t = (Teacher) p; t.work(); } public class People { public String name = \u0026#34;我是人\u0026#34;; public void run(){ System.out.println(\u0026#34;人可以跑\u0026#34;); } } public class Student extends People { public String name = \u0026#34;我是学生\u0026#34;; @Override public void run() { System.out.println(\u0026#34;学生跑得很快！\u0026#34;); } public void test(){ System.out.println(\u0026#34;学生要考试\u0026#34;); } } public class Teacher extends People { public String name = \u0026#34;我是老师\u0026#34;; @Override public void run() { System.out.println(\u0026#34;老师跑的气喘吁吁！\u0026#34;); } public void work(){ System.out.println(\u0026#34;老师要上班\u0026#34;); } } final final关键字是最终的意思，可以修饰（类， 方法， 变量） 修饰类：该类被成为最终类，特点是不能被继承了 修饰方法：该方法被称为最终方法，特点是不能被重写了 修饰变量：该变量只能被赋值一次 public class Test { // 3.常量，建议名称全部大写，多个单词下划线连接 public static final String CURRENT_NAME = \u0026#34;Kennem\u0026#34;; public static void main(String[] args) { // final double pi = 3.14; //pi = 3.1; 报错，final修饰的变量不能修改 final int[] arr = {11, 22, 33}; arr[1] = 13; // 4.final修饰的地址不能变，但地址内的内容可以变 } } final class A{ // 1.final 修饰类，类不能被继承了 } // 2.final 修饰方法，方法不能被重写了 class C{ public final void test(){ } } class D extends C{ } 常量 使用了static final修饰的成员变量被称为常量\n作用：通常用于记录系统的配置信息\n使用常量记录系统配置信息的优势，执行原理\n代码可读性更好，可维护性也更好 程序编译后，常量会被\u0026quot;宏替换\u0026quot;；出现常量的地方全部会被替换成其记住的字面量，这样可以保证使用常量和直接用字面量的性能是一样的。 抽象类 public abstract class A { private String name; public static String schoolName; public abstract void run(); } public class B extends A{ @Override public void run() { System.out.println(\u0026#34;run\u0026#34;); } } 抽象类的好处：\n父类知道每个子类都要做某个行为，但每个子类要做的情况不一样，父类就定义成抽象方法，交给子类去重写实现，我们设计这样的抽象类，就是为了更好的支持多态。 抽象类可以制作模板类\n模板类 public abstract class People { public abstract String write(); public final void WriteOn(){ System.out.println(\u0026#34;\\t\\t今天是2023/04/14\u0026#34;); System.out.println(\u0026#34;\\t身份:\u0026#34;); System.out.println(write()); System.out.println(\u0026#34;以上就是我发表的内容\u0026#34;); System.out.println(\u0026#34;\\t\\t感谢大家！\u0026#34;); } } public class Teacher extends People { @Override public String write() { return \u0026#34;我是老师，这里是老师类\u0026#34;; } } public class Student extends People { @Override public String write() { return \u0026#34;我是学生，这里是学生类\u0026#34;; } } public class Test { public static void main(String[] args) { Teacher t = new Teacher(); t.WriteOn(); Student s = new Student(); s.WriteOn(); } } 建议使用final关键字修饰模板类\n模板方法是给对象直接使用的不能被修改 一旦子类重写了模板方法，模板方法就失效了 接口 Java提供了一个关键字interface public class Test { public static void main(String[] args) { Driver d = new A(); d.drive(); } } class A extends Student implements Driver, Singer{ @Override public void drive() { } @Override public void sing() { } } class Student{ } interface Driver{ void drive(); } interface Singer{ void sing(); } 接口的好处：\n可以解决类单继承的问题，通过接口， 可以让一个类有一个继承父类的同时，还可以去找多个接口去拓展自己的功能 因为通过接口可以显性的知道你是谁 一个类可以实现多个接口，同样，一个接口也可以被多个类实现，这样的好处是我们的程序可以面向接口编程了，这样程序员就可以很方便的灵活切换各种业务实现了。 接口的综合案例\n","permalink":"https://showguan.github.io/en/posts/tech/java-20%E5%A4%A9%E9%80%9F%E6%88%90/","summary":"JAVA 20天速成 有志者事竟成 JAVA背景信息 JAVA是一门高级编程语言。 属于ORACLE公司 JAVA之父——詹姆斯·高斯林 JAVA主要做互联网系","title":"Java 20天速成笔记"},{"content":"hugo new content posts/my-first-post.md\n","permalink":"https://showguan.github.io/en/posts/life/my-first-post/","summary":"hugo new content posts/my-first-post.md","title":"My First Post"},{"content":"VP 周赛 第 389 场周赛 第三题3085. 成为 K 特殊字符串需要删除的最少字符数 双指针优化$O(n)$\n第三题做出来了但做法不优并且错的次数太多了。\n题目大意：给定一个字符串word和一个整数k，定义特殊字符串为满足|freq(word[i]) - freq(word[j])| \u0026lt;= k对于字符串中所有下标i和j都成立的字符串。其中，freq(x)表示字符x在word中的出现频率，|y|表示y的绝对值。要求计算使word成为k特殊字符串所需删除的字符的最小数量。\n实现思路：首先统计word中每个字符的出现频率，然后对频率进行排序。接着遍历频率列表，从最大的频率开始，逐步减少频率，直到满足特殊字符串的条件。在减少频率的过程中，利用一个指针指向频率列表中的当前位置，不断向前移动，更新需要删除的字符数量。最终得到使word成为k特殊字符串所需删除的最小字符数量。\nclass Solution: def minimumDeletions(self, word: str, k: int) -\u0026gt; int: ans = 2e9 cnt = sorted(Counter(word).values()) numFre = len(cnt)-1 delCnt = len(word) right = numFre for cur in range(numFre, -1, -1): delCnt-=cnt[cur] maxFre = cnt[cur]+k while right\u0026gt;cur and cnt[right]\u0026gt;maxFre: delCnt+=cnt[right] right-=1 ans = min(ans, delCnt-(numFre-right)*maxFre) return ans 第四题3086. 拾起 K 个 1 需要的最少行动次数 题目大意：给定一个二进制数组nums，长度为n，以及一个正整数k和非负整数maxChanges。Alice在一个游戏中需要从nums中拾起k个1，游戏开始时，Alice可以选择任意位置站立。Alice可以执行两种行动：一是将一个0改为1，次数不超过maxChanges；二是交换相邻位置的1和0。返回Alice拾取k个1所需的最少行动次数。\n实现思路：首先，统计nums中1的位置，同时记录每个1的前缀和。然后确定最多可以拾取的1的个数，即为maxChanges和当前1的个数的最小值。如果最大变化次数maxChanges足够多，那么不需要交换1的位置，直接计算需要变化的次数即可；否则，利用二分搜索确定需要交换的1的位置，计算交换和变化的次数。最终返回行动次数。\nclass Solution: def minimumMoves(self, nums: List[int], k: int, maxChanges: int) -\u0026gt; int: pos = [] n=len(nums) c=0 for i, v in enumerate(nums): if not v: continue pos.append(i) if c==3: continue c=max(c, 1) if i\u0026gt;0 and nums[i]==nums[i-1]: c = max(2, c) if i\u0026gt;1 and nums[i]==nums[i-1] and nums[i]==nums[i-2]: c = max(3, c) c = min(c, k) if maxChanges\u0026gt;=k-c: return max(0, (k-c)*2)+max(0, c-1) n = len(pos) preSum = list(accumulate(pos, initial = 0)) ret = inf rest = k-maxChanges for right in range(rest, n+1): left = right-rest i=left+right\u0026gt;\u0026gt;1 s1 = pos[i]*(i-left) - (preSum[i]-preSum[left]) s2 = preSum[right]-preSum[i]-pos[i]*(right-i) ret = min(ret, s1+s2) return ret+maxChanges*2 ","permalink":"https://showguan.github.io/en/posts/tech/vp-%E5%91%A8%E8%B5%9B389/","summary":"VP 周赛 第 389 场周赛 第三题3085. 成为 K 特殊字符串需要删除的最少字符数 双指针优化$O(n)$ 第三题做出来了但做法不优并且错的次数太多了。 题目大","title":"LeetCode周赛VP389"},{"content":"周赛240331 第四题 100240 最小化曼哈顿距离\n题目大意：给定一个二维平面上的点集，求移除其中一个点后，剩余点集中任意两点之间的最大曼哈顿距离的最小值。\n实现思路：首先，对于曼哈顿距离而言，它的定义是两点在各个坐标轴上的差的绝对值之和。所以移除一个点后，影响到最大曼哈顿距离的主要是距离移除点最近的点。我们可以将点的坐标进行转换，将其转换为(x+y)和(x-y)的形式，这样在平面上的曼哈顿距离就可以等效为在转换后的坐标系下的欧几里得距离。然后我们用两个有序集合分别维护x+y和x-y的坐标轴上的值，分别为xset和yset。然后遍历每个点，从点集中移除一个点，更新最大距离，找到最小值。\nfrom sortedcontainers import SortedList class Solution: def minimumDistance(self, points: List[List[int]]) -\u0026gt; int: xset, yset = SortedList(), SortedList() for x, y in points: xset.add(x+y) yset.add(x-y) ans = inf for x, y in points: xx = x+y yy = x-y xset.remove(xx) yset.remove(yy) ans = min( ans, max(xset[-1]-xset[0], yset[-1]-yset[0]) ) xset.add(xx) yset.add(yy) return ans ","permalink":"https://showguan.github.io/en/posts/tech/%E5%91%A8%E8%B5%9B240331/","summary":"周赛240331 第四题 100240 最小化曼哈顿距离 题目大意：给定一个二维平面上的点集，求移除其中一个点后，剩余点集中任意两点之间的最大曼哈顿距离的最小","title":"LeetCode周赛240331"},{"content":"周赛 24/3/24 第三题 100258 3092. 最高频率的 ID 题目大意：给定两个长度为n的整数数组nums和freq，nums中的每个元素表示一个ID，对应的freq中的元素表示这个ID在集合中此次操作后需要增加或者减少的数目。现要求在每一步操作后，返回出现频率最高的ID数目，若集合为空则为0。 SortedList实现\nfrom sortedcontainers import SortedList class Solution: def mostFrequentIDs(self, nums: List[int], freq: List[int]) -\u0026gt; List[int]: sl = SortedList(key = lambda x : -x) d = defaultdict(int) ret = [] for x,y in zip(nums, freq): if d[x]!=0: sl.remove(d[x]) d[x]+=y sl.add(d[x]) else: d[x]=y sl.add(d[x]) if sl: ret.append(sl[0]) else: ret.append(0) return ret heap 实现\n实现思路： 使用一个字典d来动态记录ID的出现频率，初始化一个空堆heap和结果列表ret。\n遍历nums和freq数组，对于每对nums[i]和freq[i]，更新字典d中对应ID的频率。\n将(-d[x], x)元组加入堆heap，其中-d[x]表示ID x的出现频率的相反数，x表示ID本身。堆按照频率从高到低排序。\n进入循环，检查堆顶元素是否满足当前频率，若不满足则弹出直至满足。\n将当前堆顶元素的频率加入结果列表ret。\n返回结果列表ret。\nclass Solution: def mostFrequentIDs(self, nums: List[int], freq: List[int]) -\u0026gt; List[int]: d = defaultdict(int) heap = [] ret = [] for x,y in zip(nums, freq): d[x]+=y heapq.heappush(heap, (-d[x], x)) while True: tx, ty = heap[0] if -tx != d[ty]: heapq.heappop(heap) continue ret.append(-tx) break return ret 第四题 1002683093. 最长公共后缀查询 Trie树\n题目大意： 给定两个字符串数组wordsContainer和wordsQuery，对于每个wordsQuery[i]，需要从wordsContainer中找到一个与wordsQuery[i]有最长公共后缀的字符串。若有多个满足条件的字符串，选择长度最短的一个，若长度相同则选择在wordsContainer中出现较早的一个。返回一个整数数组ans，其中ans[i]表示wordsContainer中与wordsQuery[i]有最长公共后缀的字符串的下标。\n实现思路：\n初始化一个变量mi记录wordsContainer中最短字符串的长度，并记录其下标为idx。 构建字典trie，用于存储wordsContainer中每个字符串的逆序形式，并记录最短字符串的下标和长度。 遍历wordsQuery，对于每个查询字符串，将其逆序，然后在trie中搜索与之匹配的最长公共后缀，并返回其对应的下标。 将所有查询结果存入结果列表ret，并返回。 class Solution: def stringIndices(self, c: List[str], q: List[str]) -\u0026gt; List[int]: mi = inf idx = -1 ret = [] for i, w in enumerate(c): if len(w)\u0026lt;mi: mi = len(w) idx = i trie = {} #dict for i, w in enumerate(c): w=w[::-1] cur=trie for wi in w: if wi not in cur: cur[wi] = {} cur = cur[wi] if \u0026#39;#\u0026#39; not in cur: cur[\u0026#39;#\u0026#39;] = (i, len(w)) elif len(w)\u0026lt;cur[\u0026#39;#\u0026#39;][1]: cur[\u0026#39;#\u0026#39;] = (i,len(w)) for i, w in enumerate(q): w=w[::-1] cur = trie ans = idx for wi in w: if wi not in cur: break else: cur = cur[wi] ans = cur[\u0026#39;#\u0026#39;][0] ret.append(ans) return ret ","permalink":"https://showguan.github.io/en/posts/tech/%E5%91%A8%E8%B5%9B240324/","summary":"周赛 24/3/24 第三题 100258 3092. 最高频率的 ID 题目大意：给定两个长度为n的整数数组nums和freq，nums中的每个元素表示一个ID，对应的freq中的元素","title":"LeetCode周赛240324"},{"content":" 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 ","permalink":"https://showguan.github.io/en/links/","summary":"名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客","title":"🤝友链"},{"content":" 英文名: Kennem 职业: Still a Stuent 运动: Gaming ","permalink":"https://showguan.github.io/en/about/","summary":"英文名: Kennem 职业: Still a Stuent 运动: Gaming","title":"🙋🏻‍♂️关于"},{"content":"机器学习简介 Different types of Functions\nRegression : The function outputs a scalar(标量）.\npredict the PM2.5 Classification ： Given options (classes), the function outputs the correct one.\nSpam filtering Structured Learning ： create something with structure(image, document)\nExample : YouTube Channel\n1.Function with Unknown Parameters. $$ y=b+wx_1 $$\n2.Define Loss from Training Data Loss is a function of parameters $$ L(b,w) $$\nLoss : how good a set of values is. L is mean absolute error (MAE) $$ e=\\left | y-\\hat{y} \\right | $$\nL is mean square error (MSE) $$ e=(y-\\hat{y})^2 $$\n$$ L=\\frac{1}{N} \\sum_{n}^{}e_n $$\n3.Optimization $$ w^,b^=arg,\\min_{w,b} ,L $$\nGradient Descent\n(Randomly) Pick an initial value ： $$ w^0 $$\nCompute : $$ \\frac {\\partial L} {\\partial w} |_{w=w_0} $$\nNegative : Increase w\nPositive : Decrease w $$ \\eta\\frac {\\partial L} {\\partial w} |_{w=w_0} $$ η：learning rate (hyperparameters)\nUpdate w iteratively Local minima global minima 类似一个参数，推广到多个参数。\nLinear Models Linear models have severe limitation. Model Bias.\nWe need a more flexible model!\ncurve = constant + sum of a set of Hard Sigmoid Function $$ y=c\\frac {1} {1+exp(-(b+wx_1))} \\ =csigmoid(b+wx_1) $$\n$$ y=b+\\sum_{i}sigmoid(b_i+w_ix_i) $$\n$$ y=b+\\sum_{i}sigmoid(b_i+\\sum_{j}w_{ij}x_j) $$\n线性代数角度： $$ r=b+Wx $$\n$$ a=\\sigma(r) $$\n$$ y=b+c^Ta $$\nLoss\nLoss is a function of parameters L(θ) Loss means how good a set of values is. Optimization of New Model $$ \\theta= \\begin{bmatrix}\n\\theta_1 \\ \\theta_2 \\ \\theta_3 \\ \\dots \\end{bmatrix} $$\n$$ \\theta=arg \\min_\\theta L $$\n(Randomly) Pick initial values θ^0 1 epoch = see all the batched once\nupdate : update θ for each batch\nSigmoid -\u0026gt; ReLU (Rectified Linear Unit) 统称为 Activation function\nNeural Network\n","permalink":"https://showguan.github.io/en/posts/tech/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E4%BB%8B/","summary":"机器学习简介 Different types of Functions Regression : The function outputs a scalar(标量）. predict the PM2.5 Classification ： Given options (classes), the function outputs the correct one. Spam filtering Structured Learning ： create something with structure(image, document) Example : YouTube Channel 1.Function with Unknown Parameters. $$ y=b+wx_1 $$ 2.Define Loss from Training Data Loss is a","title":""},{"content":"PyTorch PyTorch Tutorial\nPython3中机器学习框架\ndataset = MyDataset(file) dataloader = DataLoader(dataset, batch_size = size , shuffle = True) Training : True Testing : False from torch.utils.data import Dataset, DateLoader class MyDataset(Dataset): def __init__(self, file): # read data \u0026amp; preprocess self.data = ... def __getitem__(self,index): #return one sample at a time return self.data[index] def __len__(self): #return the size of the dataset return len(self.data) dataset = MyDataset(file) dataloader = Dataloader(dataset, batch_size, shuffle = True) shuffle : Training -\u0026gt; true Testing -\u0026gt; false Tersors High-dimensional matrices(arrays)\n.shape() # show the dimension #Directly from data (list or numpy.ndarray) x = torch.tensor([1, -1], [-1, 1]) x = torch.from_numpy(np.array([[1, -1], [-1, 1]])) #Tensor of constant zeros \u0026amp; ones x = torch.zeros([2, 2]) x = torch.ones([1, 2, 5]) x+y x-y y=x.pow(2) y=x.sum() y=x.mean() #Transpose : transpose two specified dimensions x = x.transpose(dim0,dim1) # change the dimension dim0 and dim1 #Squeeze : remove the specified dimension with length 1 x = x.squeeze(1) #unsqueeze expand a new dimension x = x.unsqueeze(1) dim in PyTorch == axis in NumPy\ndimensional\nCheck with.shape()\tCreating Tensors Directly from data (list or numpy.ndarray)\nx = torch.tensor([1, -1], [-1, 1]) x = torch.from_numpy(np.array([[1, -1], [-1, 1]])) Tensor of constant zeros \u0026amp; ones\nx = torch.zeros([2,2]) x = torch.ones([1, 2, 5]) Common Operations addition subtraction power summation mean\ntranspose x.shape x.transpose(0,1) Unsqueeze : expand a new dimension\nx = x.unsqueeze(1) **Cat **: conncatenate multiple tensors 合并多个矩阵\ntorch.cat([x, y, z], dim = 1) Data Type: Using different data types for model and data will case errors.\n32-bit -torch.float\n64-bit -torch.long\nDevice\nTensors \u0026amp; modules will be computed with CPU by default Use .to() to move tensors to appropriate devices CPU x = x.to('cpu')\t- ```py x = x.to('cuda') GPU check if your computer has NVIDIA GPU torch.cuda.is_available() - Multiple GPUs : specify- ``` 'cuda:0', 'cuda:1', 'cuda:2',... Cradient Calculation import torch # 定义一个需要求导的张量 x，并将 requires_grad 参数设置为 True x = torch.tensor([[1., 0.], [-1., 1.]], requires_grad=True) # 计算 x 的平方并对其进行求和，得到张量 z z = x.pow(2).sum() # 对张量 z 进行反向传播，自动计算出 x 的梯度 z.backward() # 输出 x 的梯度 print(x.grad) torch.nn Network Layers Linear Layer (Fully-connected Layer) nn.linear(in_features, out_features) #### Non-linear Activation Functions```pynn.Sigmoid()nn.ReLU() Build your own neural network import torch.nn as nn class MyModel(nn.Module): #initialize your model \u0026amp; define layers def __init__(self): super(MyModel, self).__init__() self.net = nn.Sequential( nn.Linear(10, 32), nn.Sigmoid(), nn.Linear(32,1) ) #compute output of your nn def forward(self, x): return self.next() Loss Functions Mean squared Error (for regression tasks) criterion = nn.MSELoss() Cross Entropy (for classification tasks) 交叉熵 criterion = nn.CrossEntropyLoss() loss = criterion(model_output, expected_value) ### torch.optim- Stochastic Gradient Descent (SGD) - ```py torch.optim.SGD(model.parameters(), lr, momentum = 0) For every batch of data Call optimizer.zero_grad() to reset gradients of model parameters. Call loss.backward() to backpropagate gradients of prediction loss Call optimizer.step() to adjust model parameters Neural Network Training Setup dataset = MyDataSet(file) tr_set = DataLoader(dataset, 16, shuffle = True) model = MyModel().to(device) criterion = nn.MSELoss() optimizer = torch.optim.SGD(model.parameters(), 0.1) Training Loop for epoch in range(n_epochs): # Iterate over n_epochs model.train() # Set the model to training mode for x, y in tr_set: # Iterate over the training set optimizer.zero_grad() # Clear the gradients x, y = x.to(device), y.to(device) # Move data to the device (e.g., GPU) pred = model(x) # Forward pass, compute predictions loss = criterion(pred, y) # Compute the loss loss.backward() # Backward pass, compute gradients optimizer.step() # Update the model\u0026#39;s parameters using the gradients Validation Loop model.eval() # Set the model to evaluation mode total_loss = 0 for x, y in dv_set: # Iterate over the validation set x, y = x.to(device), y.to(device) # Move data to the device with torch.no_grad(): # Disable gradient computation pred = model(x) # Forward pass, compute predictions loss = criterion(pred, y) # Compute the loss total_loss += loss.cpu().item() * len(x) # Accumulate the loss avg_loss = total_loss / len(dv_set) # Calculate the average loss per sample Testing Loop model.eval() # Set the model to evaluation mode preds = [] for x in tt_set: # Iterate over the test set x = x.to(device) # Move data to the device with torch.no_grad(): # Disable gradient computation pred = model(x) # Forward pass, compute predictions preds.append(pred.cpu()) # Append the predictions to the list Data, demo1 Load data : use pandas to load a csv file\ntrain_data = pd.read_cav(\u0026#39;./name.csv\u0026#39;).drop(columns=[\u0026#39;date\u0026#39;]).values x_train, y_train = train_data[:,:-1], train_data[:,:-1] Dataset init : Read data and preproces\ngetitem : Return one sample at a time, In this case, one sample includes a 117 dimensional feature and a label\nlen : Return the size of the dataset. In this case, it is 2699\nclass COVID19Dataset(Dataset): \u0026#39;\u0026#39;\u0026#39; x: np.ndarray 特征矩阵. y: np.ndarray 目标标签, 如果为None,则是预测的数据集 \u0026#39;\u0026#39;\u0026#39; def __init__(self, x, y=None): if y is None: self.y = y else: self.y = torch.FloatTensor(y) self.x = torch.FloatTensor(x) def __getitem__(self, idx): if self.y is None: return self.x[idx] return self.x[idx], self.y[idx] def __len__(self): return len(self.x) Dataloader train_loader = DataLoader(train_dataset, batch_size = 32, shuffle = True, pin_memory = True) Model class My_Model(nn.Module): def __init__(self, input_dim): super(My_Model, self).__init__() # TODO: 修改模型结构, 注意矩阵的维度（dimensions） self.layers = nn.Sequential( nn.Linear(input_dim, 16), nn.ReLU(), nn.Linear(16, 8), nn.ReLU(), nn.Linear(8, 1) ) def forward(self, x): x = self.layers(x) x = x.squeeze(1) # (B, 1) -\u0026gt; (B) return x Criterion criterion = torch.nn.MSELoss(reduction = \u0026#39;mean\u0026#39;) Optimizer optimizer = torch.optim.SGD(model.parameters(), lr = 1e-5, momentum = 0.9) Training Loop Documentation and Common Errors read pytorch tutorial\nColab（highly recommended） ","permalink":"https://showguan.github.io/en/posts/tech/2.pytorch/","summary":"PyTorch PyTorch Tutorial Python3中机器学习框架 dataset = MyDataset(file) dataloader = DataLoader(dataset, batch_size = size , shuffle = True) Training : True Testing : False from torch.utils.data import Dataset, DateLoader class MyDataset(Dataset): def __init__(self, file): # read data \u0026amp; preprocess self.data = ... def __getitem__(self,index): #return one sample at a time return self.data[index] def __len__(self): #return the size of","title":""},{"content":"Officially begin Deep = Many hidden layers\nNeurall Network Find a function in function set.\nGoodness of function Pick the best function\nBackpropagation - Backward Pass(反向传播) 反向的neural network\nRegression Stock Market Forecast Self-driving Car Recommendation Step 1 : Model A set of function\nStep 2 : Goodness of Function $$ \\hat{y}^1代表x^1对应的确切值 $$\nLoss function L： $$ L(f)=L(w,b) ~ Estimated ~ y ~ basedoninputfunction $$\n$$ L(w,b)=\\sum_{n=1}^{10}(\\hat{y}^n-(b+w\\cdot x_{cp}^n))^2 $$\nStep 3 ：Best Function In linear regression, the loss function L is convex.\nOverfitting\nRegularization $$ L(w,b)=\\sum_{n=1}^{10}(\\hat{y}^n-(b+w\\cdot x_{cp}^n))^2+\\lambda\\cdot \\sum(w_i)^2 $$\n不需要考虑bias，调整平滑程度，smooth\nGradient descent Overfitting and Regularization Classification independently and identically distributed(i.i.d) $$ L(h^{train},D_{all})-L(h^{all}, d_{all}) \\leq \\delta\\ we\\ need \\ \\forall h \\in \\H, |L(h,D_{train}) -L(h,D_{all}) | \\leq \\delta/2\\ L(h^{train},D_{all})\\leq L(h^{train},D_{all}) + \\delta/2 $$ 重温数码宝贝：\n模型出现bad的概率： $$ P(D_{train}\\ is\\ bad)\\leq |H| \\cdot 2exp(-2N\\epsilon^2 ) \\ N \\ge \\frac{log(2|H|/\\delta)}{2\\epsilon^2} $$ Tradeoff of Model Complexity\nTraining data for Classification pair\nIdeal Alternatives Function(Model): $$ f(x)\\ x -\u0026gt; g(x)\u0026gt;0~Output=class1\\ else\\ Output=class2 $$\nlossfunction: The number of times of get incotrrect results on training data. $$ L(f) = \\sum_{n}\\delta(f(x^n)\\neq\\hat{y}^n) $$\nFind the best function; Example : Perceptron, SVM Prior $$ P(C_1|x)=\\frac{P(x|C_1)P(C_1)}{P(x|C_1)P(C_1)+P(x|C_2)P(C_2)} $$\nGaussian Maximum Likelihood\n2D array or 3D array mean the array with 2 or 3 axes respectively, but the n-dimensional vector mean the vector of length n.\nLearn something that can really differ you from others.\nLogistics Regression Function Set $$ f_{w,b}=\\sigma(\\sum_{i}w_ix_i)+b $$\nOutput : Between 0 and 1 $$ f_{w,b}(x)=P_{w,b}(C_1|x) $$\n$$ w^,b^=arg\\ \\underset{w,b}{max}L(w,b)\\ 等同于 w^,b^ = arg\\ \\underset{w,b}{min}-lnL(w,b) $$\nCross Entropy: $$ Distribution \\ p: p(x=1)=\\hat{y}^n\\ p(x=0)=1-\\hat{y}^n\\ Distribution \\ q: q(x=1)=f(x^n)\\ q(x=0)=1-f(x^n)\\ H(p,q)=-\\sum_xp(x)ln(q(x)) $$\nLoss Function $$ L(f)=\\sum_nC(f(x^n),\\hat{y}^n)\\ C(f(x^n),\\hat{y}^n)=-[\\hat{y}^nlnf(x^n)+(1-\\hat{y}^n)ln(1-f(x^n))] $$\nUpdate logistic regression 和 linear regression 形式完全相同 $$ w_i\\gets w_i-\\eta \\sum_{n}-(\\hat{y}^n-f_{w,b}(x^n))x_i^n $$\nDiscriminative (logistic) \u0026amp; Generative (Gaussian描述) Generative做了某些假设。\nBenefit of generative model With the assumption of probability distribution, less training data is needed With the assumption of probability distribution, more robust to the noise Priors and class-dependent probabilities can be estimated from different sources. Multi-class Classification SoftMax $$ Softmax(z_i)=\\frac{e^{z_i}}{\\sum_{c=1}^{C} e^{z_c}}\\ 1 \u0026gt; y_i\u0026rsquo; \u0026gt; 0\\ \\sum_iy_i\u0026rsquo;=1 $$\nLimitation of Logistic Regression 只能画一条直线\nFeature Transformation Cascading logistic regression models Optimization Issue 层数较多表现的反而没有层数较少的好\nOver fitting 增加训练资料\nData augmentation\nconstrained model\nLess parameters, sharing parameters Less features Early stopping CNN-\u0026gt;比较没有弹性的model\n分Training Set\nN-fold Cross Validation Optimization Fail H : Hessian\nTayler Series Approximation $$ L(\\theta) \\approx L(\\theta^\\prime)+\\frac{1}{2}(\\theta-\\theta^\\prime)^TH(\\theta-\\theta^\\prime) $$\nH is positive definte = All eigen values are positive -\u0026gt; local minima H is negative definte = All eigen values are negative -\u0026gt; **local ** Some eigen values are positive , and some are negative -\u0026gt; Saddle point 在高维下local minima可能会变成saddle poing\nTips for training : Batch and Momentum Batch 1 epoch = see all the batches once -\u0026gt; shuffle after each epoch\nMomentum Movement not just based on gradient, but previous movement.\nDifferent parameters needs different learning rate $$ \\theta_i^{t+1} \\gets \\theta_i^t-\\frac{\\eta}{\\sigma_i^t}g_i^t\\ \\sigma_i^t=\\sqrt{\\frac{1}{t+1}\\sum_{i=0}^t(g_i^t)^2} $$\nAdagred\nRMSProp $$ \\theta_i^{t+1} \\gets \\theta_i^t-\\frac{\\eta}{\\sigma_i^t}g_i^t\\ \\sigma_i^t = \\sqrt{\\alpha(\\sigma_i^{t-1})^2+(1-\\alpha)(g_i^t)^2} $$\nAdam : RMSProp + Momentum\nLearning Rate Sceduling $$ \\theta_i^{t+1} \\gets \\theta_i^t-\\frac{\\eta^t}{\\sigma_i^t}g_i^t\\ $$\nWarm Up New Optimization ","permalink":"https://showguan.github.io/en/posts/tech/3.regression-and-classification/","summary":"Officially begin Deep = Many hidden layers Neurall Network Find a function in function set. Goodness of function Pick the best function Backpropagation - Backward Pass(反向传播) 反向的neural network Regression Stock Market Forecast Self-driving Car Recommendation Step 1 : Model A set of function Step 2 : Goodness of Function $$ \\ha","title":""},{"content":"Convolutional network (CNN) Network的架构调整\n1、All the images to be classified have the same size.\nReceptive filed\nSimplification 1 - Typical Setting all channels : 会看所有的channels\nkernel size : 长和宽 （e.g., 3*3)\nStride : 移动的步长,希望有高度的重叠\npadding : 补值，补充超出范围的值\nEach receptive field has a set of neurons.\nEach receptive field has the neurons with the same set of parameters, which called filter.\nPooling Flatten ","permalink":"https://showguan.github.io/en/posts/tech/4.cnn/","summary":"Convolutional network (CNN) Network的架构调整 1、All the images to be classified have the same size. Receptive filed Simplification 1 - Typical Setting all channels : 会看所有的channels kernel size : 长和宽 （e.g., 3*3) Stride : 移动的","title":""},{"content":"Spatial Transformer（STN） 处理旋转和放大图形的CNN分类\ninterpolation 插值法 Self-attention Sequence Labeling consider the context -\u0026gt; 参数很大并且容易Over fitting\nSelf-attention会持有整个sequence的信息\ninput : vector\noutput : vector $$ q_i=W^qa^i\\ k_i=W^ka^i\\ v^i=W^va^i $$ Multi-head Self-attention 其中 $$ q_i, k_i, v_i均可以有多个 $$\nSelf-attention for Speech Truncated(截短的) Self-attention\nSelf-attention is the complex version of CNN\nCNN is simplified self-attention\nRecurrent Neural Network(RNN) RNN所做的事情都可以用Self-attention来替代\nSelf-attention更有效率\nRNN\nTransformer Sequence to sequence (Seq2seq) Encoder -\u0026gt; Decoder\nEncoder input some vectors and output some vectors\nDecoder Autoregressive Non-autoregressive Decoder 同时输出BEGIN并且同时输出结果和END\nAdvantage ： parallel, controllable output length\nNAT is usually worse than AT\nEncoder-Decoder Cross Attention\nTeacher Forcing : using the ground truth as input\nCopy Mechanism\nPointer Network Copying Mechanism Guided Attention Beam Search Scheduled Sampling\n","permalink":"https://showguan.github.io/en/posts/tech/5.transformer/","summary":"Spatial Transformer（STN） 处理旋转和放大图形的CNN分类 interpolation 插值法 Self-attention Sequence Labeling consider the context -\u0026gt; 参数很大并且容易Over fitting Self-attention","title":""},{"content":"acwing算法学习 [TOC]\n第一章 课上：学思想\n课下：背代码\n题目，一道题写好几遍\n理解没有任何意义，体力活+脑力活\n记忆力 毅力/自制力\n沉下心背东西\n快速排序算法模板 —— 模板题 AcWing 785. 快速排序 分治\n1、确定分界点，l、r、（l+r)/2 随机\n2、调整区间，分为两边，左边小于等于x,右边大于等于x\n3、递归处理左右两段\nvoid quick_sort(int q[], int l, int r) { if (l \u0026gt;= r) return; int i = l - 1, j = r + 1, x = q[l + r \u0026gt;\u0026gt; 1]; while (i \u0026lt; j) { do i ++ ; while (q[i] \u0026lt; x); do j -- ; while (q[j] \u0026gt; x); if (i \u0026lt; j) swap(q[i], q[j]); } quick_sort(q, l, j), quick_sort(q, j + 1, r); } -std=c++11 归并排序算法模板 —— 模板题 AcWing 787. 归并排序 排序稳定：序列中相同的值排序后的相对位置是否发生改变\n时间复杂度有 （nlogn)\n1）确定分界点mid\n2）递归排序两边\n2）归并，合并为一个有序数组\nvoid merge_sort(int q[], int l, int r) { if (l \u0026gt;= r) return; int mid = l + r \u0026gt;\u0026gt; 1; merge_sort(q, l, mid); merge_sort(q, mid + 1, r); int k = 0, i = l, j = mid + 1; while (i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= r) if (q[i] \u0026lt; q[j]) tmp[k ++ ] = q[i ++ ]; else tmp[k ++ ] = q[j ++ ]; while (i \u0026lt;= mid) tmp[k ++ ] = q[i ++ ]; while (j \u0026lt;= r) tmp[k ++ ] = q[j ++ ]; for (i = l, j = 0; i \u0026lt;= r; i ++, j ++ ) q[i] = tmp[j]; } 整数二分算法模板 —— 模板题 AcWing 789. 数的范围 边界问题\n本质：区间内一半满足一半不满足\nl=mid时加一\nbool check(int x) {/* ... */} // 检查x是否满足某种性质 // 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用： int bsearch_1(int l, int r) { while (l \u0026lt; r) { int mid = l + r \u0026gt;\u0026gt; 1; if (check(mid)) r = mid; // check()判断mid是否满足性质 else l = mid + 1; } return l; } // 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用： int bsearch_2(int l, int r) { while (l \u0026lt; r) { int mid = l + r + 1 \u0026gt;\u0026gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 浮点数二分算法模板 —— 模板题 AcWing 790. 数的三次方根 浮点数二分，比较对应整数二分\nbool check(double x) {/* ... */} // 检查x是否满足某种性质 double bsearch_3(double l, double r) { const double eps = 1e-6; // eps 表示精度，取决于题目对精度的要求 while (r - l \u0026gt; eps) { double mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid; } return l; } 高精度加法 —— 模板题 AcWing 791. 高精度加法 // C = A + B, A \u0026gt;= 0, B \u0026gt;= 0 vector\u0026lt;int\u0026gt; add(vector\u0026lt;int\u0026gt; \u0026amp;A, vector\u0026lt;int\u0026gt; \u0026amp;B) { if (A.size() \u0026lt; B.size()) return add(B, A); vector\u0026lt;int\u0026gt; C; int t = 0; for (int i = 0; i \u0026lt; A.size(); i ++ ) { t += A[i]; if (i \u0026lt; B.size()) t += B[i]; C.push_back(t % 10); t /= 10; } if (t) C.push_back(t); return C; } 高精度减法 —— 模板题 AcWing 792. 高精度减法 // C = A - B, 满足A \u0026gt;= B, A \u0026gt;= 0, B \u0026gt;= 0 vector\u0026lt;int\u0026gt; sub(vector\u0026lt;int\u0026gt; \u0026amp;A, vector\u0026lt;int\u0026gt; \u0026amp;B) { vector\u0026lt;int\u0026gt; C; for (int i = 0, t = 0; i \u0026lt; A.size(); i ++ ) { t = A[i] - t; if (i \u0026lt; B.size()) t -= B[i]; C.push_back((t + 10) % 10); if (t \u0026lt; 0) t = 1; else t = 0; } while (C.size() \u0026gt; 1 \u0026amp;\u0026amp; C.back() == 0) C.pop_back(); return C; } 高精度乘低精度 —— 模板题 AcWing 793. 高精度乘法 // C = A * b, A \u0026gt;= 0, b \u0026gt; 0 vector\u0026lt;int\u0026gt; mul(vector\u0026lt;int\u0026gt; \u0026amp;A, int b) { vector\u0026lt;int\u0026gt; C; int t = 0; for (int i = 0; i \u0026lt; A.size() || t; i ++ ) { if (i \u0026lt; A.size()) t += A[i] * b; C.push_back(t % 10); t /= 10; } return C; } 高精度除以低精度 —— 模板题 AcWing 794. 高精度除法 // A / b = C ... r, A \u0026gt;= 0, b \u0026gt; 0 vector\u0026lt;int\u0026gt; div(vector\u0026lt;int\u0026gt; \u0026amp;A, int b, int \u0026amp;r) { vector\u0026lt;int\u0026gt; C; r = 0; for (int i = A.size() - 1; i \u0026gt;= 0; i -- ) { r = r * 10 + A[i]; C.push_back(r / b); r %= b; } reverse(C.begin(), C.end()); while (C.size() \u0026gt; 1 \u0026amp;\u0026amp; C.back() == 0) C.pop_back(); return C; } 一维前缀和 —— 模板题 AcWing 795. 前缀和 快速求区间和\nS[i] = a[1] + a[2] + ... a[i] a[l] + ... + a[r] = S[r] - S[l - 1] 从1开始，便于处理边界 二维前缀和 —— 模板题 AcWing 796. 子矩阵的和 S[i, j] = 第i行j列格子左上部分所有元素的和 以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为： S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1] 一维差分 —— 模板题 AcWing 797. 差分 给区间[l, r]中的每个数加上c： B[l] += c, B[r + 1] -= c 二维差分 —— 模板题 AcWing 798. 差分矩阵/二维差分 给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c： S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c 双指针算法 —— 模板题 AcWIng 799. 最长连续不重复子序列, AcWing 800. 数组元素的目标和 __滑动窗口？ 核心：把O(n^2)算法优化为O(n)\nfor (int i = 0, j = 0; i \u0026lt; n; i ++ ) { while (j \u0026lt; i \u0026amp;\u0026amp; check(j, i)) j ++ ; // 具体问题的逻辑 } 常见问题分类： (1) 对于一个序列，用两个指针维护一段区间 (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作 位运算 —— 模板题 AcWing 801. 二进制中1的个数 原码，反码，补码 求n二进制表示中第k位数字: n \u0026gt;\u0026gt; k \u0026amp; 1 返回n的最后一位1：lowbit(n) = n \u0026amp; -n 树状数组基本操作 整数离散化 —— 模板题 AcWing 802. 区间和 vector\u0026lt;int\u0026gt; alls; // 存储所有待离散化的值 sort(alls.begin(), alls.end()); // 将所有值排序 alls.erase(unique(alls.begin(), alls.end())返回去重后数组末尾端点, alls.end()); // 去掉重复元素 // 二分求出x对应的离散化的值 int find(int x) // 找到第一个大于等于x的位置 { int l = 0, r = alls.size() - 1; while (l \u0026lt; r) { int mid = l + r \u0026gt;\u0026gt; 1; if (alls[mid] \u0026gt;= x) r = mid; else l = mid + 1; } return r + 1; // 映射到1, 2, ...n } 区间合并 —— 模板题 AcWing 803. 区间合并 // 将所有存在交集的区间合并 贪心 void merge(vector\u0026lt;PII\u0026gt; \u0026amp;segs) { vector\u0026lt;PII\u0026gt; res; sort(segs.begin(), segs.end()); //区间左端点排序 int st = -2e9, ed = -2e9; for (auto seg : segs) if (ed \u0026lt; seg.first) { if (st != -2e9) res.push_back({st, ed}); st = seg.first, ed = seg.second; } else ed = max(ed, seg.second); if (st != -2e9) res.push_back({st, ed}); segs = res; } 作者：yxc 链接：https://www.acwing.com/blog/content/277/ 来源：AcWing 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n第二章 数据结构，以数组模拟的形式\n指针+结构体 ： 面试题\n单链表 —— 模板题 AcWing 826. 单链表 邻接表-存储树和图 静态链表\n下标从0开始\n// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点 int head, e[N], ne[N], idx; // 初始化 void init() { head = -1; idx = 0; } // 在链表头插入一个数a void insert(int a) { e[idx] = a, ne[idx] = head, head = idx ++ ; } // 插入下标k后面 void add(int k,int x) { e[idx]= x, ne[idx] = ne[k], ne[k] = idx++ ; } // 将头结点删除，需要保证头结点存在 void remove() { head = ne[head]; } // 将k后面的点删掉 void remove(int k) { ne[k] = ne[ne[k]]; } 双链表 —— 模板题 AcWing 827. 双链表 优化某些问题\n// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点 int e[N], l[N], r[N], idx; // 初始化 void init() { //0是左端点，1是右端点 r[0] = 1, l[1] = 0; idx = 2; } // 在节点a的右边插入一个数x void insert(int a, int x) { e[idx] = x; l[idx] = a, r[idx] = r[a]; l[r[a]] = idx, r[a] = idx ++ ; } // 删除节点a void remove(int a) { l[r[a]] = l[a]; r[l[a]] = r[a]; } 栈 —— 模板题 AcWing 828. 模拟栈 // tt表示栈顶 int stk[N], tt = 0; // 向栈顶插入一个数 stk[ ++ tt] = x; // 从栈顶弹出一个数 tt -- ; // 栈顶的值 stk[tt]; // 判断栈是否为空 if (tt \u0026gt; 0) { } 队列 —— 模板题 AcWing 829. 模拟队列 普通队列\n// hh 表示队头，tt表示队尾 int q[N], hh = 0, tt = -1; // 向队尾插入一个数 q[ ++ tt] = x; // 从队头弹出一个数 hh ++ ; // 队头的值 q[hh]; // 判断队列是否为空 if (hh \u0026lt;= tt) { //不空 } 循环队列\n// hh 表示队头，tt表示队尾的后一个位置 int q[N], hh = 0, tt = 0; // 向队尾插入一个数 q[tt ++ ] = x; if (tt == N) tt = 0; // 从队头弹出一个数 hh ++ ; if (hh == N) hh = 0; // 队头的值 q[hh]; // 判断队列是否为空 if (hh != tt) { } 单调栈 —— 模板题 AcWing 830. 单调栈 常见模型：找出每个数左边离它最近的比它大/小的数 int tt = 0; for (int i = 1; i \u0026lt;= n; i ++ ) { while (tt \u0026amp;\u0026amp; check(stk[tt], i)) tt -- ; stk[ ++ tt] = i; } 单调队列 —— 模板题 AcWing 154. 滑动窗口 常见模型：找出滑动窗口中的最大值/最小值 int hh = 0, tt = -1; for (int i = 0; i \u0026lt; n; i ++ ) { while (hh \u0026lt;= tt \u0026amp;\u0026amp; check_out(q[hh])) hh ++ ; // 判断队头是否滑出窗口 while (hh \u0026lt;= tt \u0026amp;\u0026amp; check(q[tt], i)) tt -- ; q[ ++ tt] = i; } KMP —— 模板题 AcWing 831. KMP字符串 用模板串来匹配模式串，找到模式串\ns的真前缀以及真后缀是指不等于s的前缀以及后缀，即至少是s[1~n-2]或s[0~n-1]\nne[i] : 以i结尾的串中 最长真前缀与真后缀相等的串 的长度，如果没有则为0。\n//前缀h vector\u0026lt;int\u0026gt; prefix_function(string s) { int n = (int)s.length(); vector\u0026lt;int\u0026gt; pi(n); for (int i = 1; i \u0026lt; n; i++) { int j = pi[i - 1]; while (j \u0026gt; 0 \u0026amp;\u0026amp; s[i] != s[j]) j = pi[j - 1]; if (s[i] == s[j]) j++; pi[i] = j; } return pi; } 实际使用范例（下面这个例子字符串从1开始）\n// 求Next数组： // ne[i] 存储真前缀和真后缀相等的长度，所以至少从2开始： //abcab,从b开始才有真前缀 // s[]是模式串，p[]是模板串, n是s的长度，m是p的长度 for (int i = 2, j = 0; i \u0026lt;= m; i ++ ) { while (j \u0026amp;\u0026amp; p[i] != p[j + 1]) j = ne[j]; if (p[i] == p[j + 1]) j ++ ; ne[i] = j; } // 匹配 for (int i = 1, j = 0; i \u0026lt;= n; i ++ ) { while (j \u0026amp;\u0026amp; s[i] != p[j + 1]) j = ne[j]; if (s[i] == p[j + 1]) j ++ ; if (j == m) { j = ne[j]; // 匹配成功后的逻辑 } } Trie树 —— 模板题 AcWing 835. Trie字符串统计 int son[N][26], cnt[N], idx; // 0号点既是根节点，又是空节点 // son[][]存储树中每个节点的子节点 // cnt[]存储以每个节点结尾的单词数量 // 插入一个字符串 void insert(char *str) { int p = 0; for (int i = 0; str[i]; i ++ ) { int u = str[i] - \u0026#39;a\u0026#39;; if (!son[p][u]) son[p][u] = ++ idx; p = son[p][u]; } cnt[p] ++ ; } // 查询字符串出现的次数 int query(char *str) { int p = 0; for (int i = 0; str[i]; i ++ ) { int u = str[i] - \u0026#39;a\u0026#39;; if (!son[p][u]) return 0; p = son[p][u]; } return cnt[p]; } 并查集 —— 模板题 AcWing 836. 合并集合, AcWing 837. 连通块中点的数量 按秩合并\n字符按字符串读入\n(1)朴素并查集：\nint p[N]; //存储每个点的祖宗节点 // 返回x的祖宗节点 int find(int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } // 初始化，假定节点编号是1~n for (int i = 1; i \u0026lt;= n; i ++ ) p[i] = i; // 合并a和b所在的两个集合： p[find(a)] = find(b); (2)维护size的并查集：\nint p[N], size[N]; //p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量 // 返回x的祖宗节点 int find(int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } // 初始化，假定节点编号是1~n for (int i = 1; i \u0026lt;= n; i ++ ) { p[i] = i; size[i] = 1; } // 合并a和b所在的两个集合： p[find(a)] = find(b); size[b] += size[a]; (3)维护到祖宗节点距离的并查集：\nint p[N], d[N]; //p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离 // 返回x的祖宗节点 int find(int x) { if (p[x] != x) { int u = find(p[x]); d[x] += d[p[x]]; p[x] = u; } return p[x]; } // 初始化，假定节点编号是1~n for (int i = 1; i \u0026lt;= n; i ++ ) { p[i] = i; d[i] = 0; } // 合并a和b所在的两个集合： p[find(a)] = find(b); d[find(a)] = distance; // 根据具体问题，初始化find(a)的偏移量 堆 —— 模板题 AcWing 838. 堆排序, AcWing 839. 模拟堆 维护集合的数据结构 （大根堆，父节点值不小于子节点值）\n// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1 // pos[k]存储第k个插入的点在堆中的位置 // ord[k]存储堆中下标是k的点是第几个插入的 int h[N], ph[N], hp[N], size; // 交换两个点，及其映射关系 void heap_swap(int a, int b) { //swap(ph[hp[a]],ph[hp[b]]); 根据题意 //swap(hp[a], hp[b]); swap(h[a], h[b]); } void down(int u) { int t = u; if (u * 2 \u0026lt;= size \u0026amp;\u0026amp; h[u * 2] \u0026lt; h[t]) t = u * 2; if (u * 2 + 1 \u0026lt;= size \u0026amp;\u0026amp; h[u * 2 + 1] \u0026lt; h[t]) t = u * 2 + 1; if (u != t) { heap_swap(u, t); down(t); } } void up(int u) { while (u / 2 \u0026amp;\u0026amp; h[u] \u0026lt; h[u / 2]) { heap_swap(u, u / 2); u \u0026gt;\u0026gt;= 1; } } // O(n)建堆 for (int i = n / 2; i; i -- ) down(i); heap[++size] = x; up(size); //添加元素 heap[1]; //堆顶元素 heap[1]=heap[size]; size--; down(1);//删除第size个结点 heap[k]=heap[size]; size---; down(k);up(k);//删除第k个结点 heap[k]=x; down(k); up(k); //将第k个元素赋值为x 一般哈希 —— 模板题 AcWing 840. 模拟散列表 (1) 拉链法 int h[N], e[N], ne[N], idx; // 向哈希表中插入一个数 void insert(int x) { int k = (x % N + N) % N; e[idx] = x; ne[idx] = h[k]; h[k] = idx ++ ; } // 在哈希表中查询某个数是否存在 bool find(int x) { int k = (x % N + N) % N; for (int i = h[k]; i != -1; i = ne[i]) if (e[i] == x) return true; return false; } (2) 开放寻址法 int h[N]; // 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置 int find(int x) { int t = (x % N + N) % N; while (h[t] != null \u0026amp;\u0026amp; h[t] != x) { t ++ ; if (t == N) t = 0; } return t; } 字符串哈希 —— 模板题 AcWing 841. 字符串哈希 核心思想：将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低 小技巧：取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果。\ntypedef unsigned long long ULL; const int P = 131 or 13331 ; ULL h[N], p[N]; // h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64 // 初始化 p[0] = 1; for (int i = 1; i \u0026lt;= n; i ++ ) { h[i] = h[i - 1] * P + str[i]; p[i] = p[i - 1] * P; } // 计算子串 str[l ~ r] 的哈希值 ULL get(int l, int r) { return h[r] - h[l - 1] * p[r - l + 1]; } C++ STL简介 所有容器都有size() empty() vector, 变长数组，倍增的思想 size() 返回元素个数 empty() 返回是否为空 clear() 清空 front()/back() push_back()/pop_back() begin()/end() [] 支持比较运算，按字典序 vector\u0026lt;int\u0026gt; a(10,2); a.empty(); pair\u0026lt;int, int\u0026gt; first, 第一个元素 second, 第二个元素 支持比较运算，以first为第一关键字，以second为第二关键字（字典序） pair\u0026lt;int,int\u0026gt; p; p=make_pair(1,1); p={1,1}; string，字符串 size()/length() 返回字符串长度 empty() clear() substr(起始下标，(子串长度)) 返回子串 c_str() 返回字符串所在字符数组的起始地址 strcpy(c,s.c_str());//c_str()的使用方法 queue, 队列 没有clear函数 清空用新建queue size() empty() push() 向队尾插入一个元素 front() 返回队头元素 back() 返回队尾元素 pop() 弹出队头元素 priority_queue, 优先队列，默认是大根堆 push() 插入一个元素 top() 返回堆顶元素 pop() 弹出堆顶元素 定义成小根堆的方式：priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, greater\u0026lt;int\u0026gt;\u0026gt; q; stack, 栈 size() empty() push() 向栈顶插入一个元素 top() 返回栈顶元素 pop() 弹出栈顶元素 deque, 双端队列 size() empty() clear() front()/back() push_back()/pop_back() push_front()/pop_front() begin()/end() [] set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列 size() empty() clear() begin()/end() ++, -- 返回前驱和后继，时间复杂度 O(logn) set/multiset insert() 插入一个数 find() 查找一个数 count() 返回某一个数的个数 erase() (1) 输入是一个数x，删除所有x O(k + logn) (2) 输入一个迭代器，删除这个迭代器 lower_bound()/upper_bound() lower_bound(x) 返回大于等于x的最小的数的迭代器 upper_bound(x) 返回大于x的最小的数的迭代器 map/multimap insert() 插入的数是一个pair erase() 输入的参数是pair或者迭代器 find() [] 注意multimap不支持此操作。 时间复杂度是 O(logn) lower_bound()/upper_bound() unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表 和上面类似，增删改查的时间复杂度是 O(1) 不支持 lower_bound()/upper_bound()， 迭代器的++，-- bitset, 圧位 bitset\u0026lt;10000\u0026gt; s; ~, \u0026amp;, |, ^ \u0026gt;\u0026gt;, \u0026lt;\u0026lt; ==, != [] count() 返回有多少个1 none() 判断是否全为0 any() 判断是否至少有一个1 set() 把所有位置成1 set(k, v) 将第k位变成v reset() 把所有位变成0 flip() 等价于~ flip(k) 把第k位取反 作者：yxc 链接：https://www.acwing.com/blog/content/404/ 来源：AcWing 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n第三章 树与图的存储 树是一种特殊的图: 无环连通图，与图的存储方式相同。 对于无向图中的边ab，存储两条有向边a-\u0026gt;b, b-\u0026gt;a。 因此我们可以只考虑有向图的存储。\n(1) 邻接矩阵：g[a][b] 存储边a-\u0026gt;b (2) 邻接表： // 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点 int h[N], e[N], ne[N], idx; // 添加一条边a-\u0026gt;b void add(int a, int b) { e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ; } // 初始化 idx = 0; memset(h, -1, sizeof h); 树与图的遍历 时间复杂度 O(n+m)O(n+m), nn 表示点数，mm 表示边数\n(1) 深度优先遍历 —— 模板题 AcWing 846. 树的重心 int dfs(int u) { st[u] = true; // st[u] 表示点u已经被遍历过 for (int i = h[u]; i != -1; i = ne[i]) { int j = e[i]; if (!st[j]) dfs(j); } } (2) 宽度优先遍历 —— 模板题 AcWing 847. 图中点的层次 queue\u0026lt;int\u0026gt; q; st[1] = true; // 表示1号点已经被遍历过 q.push(1); while (q.size()) { int t = q.front(); q.pop(); for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (!st[j]) { st[j] = true; // 表示点j已经被遍历过 q.push(j); } } } 拓扑排序 —— 模板题 AcWing 848. 有向图的拓扑序列 时间复杂度 O(n+m)O(n+m), nn 表示点数，mm 表示边数\nbool topsort() { int hh = 0, tt = -1; // d[i] 存储点i的入度 for (int i = 1; i \u0026lt;= n; i ++ ) if (!d[i]) q[ ++ tt] = i; while (hh \u0026lt;= tt) { int t = q[hh ++ ]; for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (-- d[j] == 0) q[ ++ tt] = j; } } // 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。 return tt == n - 1; } 最短路 单源最短路\n所有边权均为正：朴素Dijkstra O(n^2)；堆优化版的Dijkstra(mlogn)\n存在负权变：Bellman-Ford O(nm) ； SPFA（队列优化Bellman-Ford) 一般：O(m) 最坏 O(nm)\n多元汇最短路：Floyed算法 O(n^3)\n朴素dijkstra算法 —— 模板题 AcWing 849. Dijkstra求最短路 I 基于贪心 时间复杂是 O(n^2+m), n 表示点数，m 表示边数\nint g[N][N]; // 存储每条边， int dist[N]; // 存储1号点到每个点的最短距离 bool st[N]; // 存储每个点的最短路是否已经确定 // 求1号点到n号点的最短路，如果不存在则返回-1 int dijkstra() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; for (int i = 0; i \u0026lt; n - 1; i ++ ) { int t = -1; // 在还未确定最短路的点中，寻找距离最小的点 for (int j = 1; j \u0026lt;= n; j ++ ) if (!st[j] \u0026amp;\u0026amp; (t == -1 || dist[t] \u0026gt; dist[j])) t = j; // 用t更新其他点的距离 for (int j = 1; j \u0026lt;= n; j ++ ) dist[j] = min(dist[j], dist[t] + g[t][j]); st[t] = true; } if (dist[n] == 0x3f3f3f3f) return -1; return dist[n]; } 堆优化版dijkstra —— 模板题 AcWing 850. Dijkstra求最短路 II 时间复杂度 O(mlogn), n 表示点数，m 表示边数\ntypedef pair\u0026lt;int, int\u0026gt; PII; int n; // 点的数量 int h[N], w[N], e[N], ne[N], idx; // 邻接表存储所有边 int dist[N]; // 存储所有点到1号点的距离 bool st[N]; // 存储每个点的最短距离是否已确定 // 求1号点到n号点的最短距离，如果不存在，则返回-1 int dijkstra() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; priority_queue\u0026lt;PII, vector\u0026lt;PII\u0026gt;, greater\u0026lt;PII\u0026gt;\u0026gt; heap; heap.push({0, 1}); // first存储距离，second存储节点编号 while (heap.size()) { auto t = heap.top(); heap.pop(); int ver = t.second, distance = t.first; if (st[ver]) continue; st[ver] = true; for (int i = h[ver]; i != -1; i = ne[i]) { int j = e[i]; if (dist[j] \u0026gt; distance + w[i]) { dist[j] = distance + w[i]; heap.push({dist[j], j}); } } } if (dist[n] == 0x3f3f3f3f) return -1; return dist[n]; } Bellman-Ford算法 —— 模板题 AcWing 853. 有边数限制的最短路 时间复杂度 O(nm), n 表示点数，m表示边数 注意在模板题中需要对下面的模板稍作修改，加上备份数组，详情见模板题。\nint n, m; // n表示点数，m表示边数 int dist[N]; // dist[x]存储1到x的最短路距离 struct Edge // 边，a表示出点，b表示入点，w表示边的权重 { int a, b, w; }edges[M]; // 求1到n的最短路距离，如果无法从1走到n，则返回-1。 int bellman_ford() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; // 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。 for (int i = 0; i \u0026lt; n; i ++ ) { for (int j = 0; j \u0026lt; m; j ++ ) { int a = edges[j].a, b = edges[j].b, w = edges[j].w; if (dist[b] \u0026gt; dist[a] + w) dist[b] = dist[a] + w; } } if (dist[n] \u0026gt; 0x3f3f3f3f / 2) return -1; return dist[n]; } spfa 算法（队列优化的Bellman-Ford算法） —— 模板题 AcWing 851. spfa求最短路 时间复杂度 平均情况下 O(m)，最坏情况下 O(nm), n 表示点数，m 表示边数\nint n; // 总点数 int h[N], w[N], e[N], ne[N], idx; // 邻接表存储所有边 int dist[N]; // 存储每个点到1号点的最短距离 bool st[N]; // 存储每个点是否在队列中 // 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1 int spfa() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; queue\u0026lt;int\u0026gt; q; q.push(1); st[1] = true; while (q.size()) { auto t = q.front(); q.pop(); st[t] = false; for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (dist[j] \u0026gt; dist[t] + w[i]) { dist[j] = dist[t] + w[i]; if (!st[j]) // 如果队列中已存在j，则不需要将j重复插入 { q.push(j); st[j] = true; } } } } if (dist[n] == 0x3f3f3f3f) return -1; return dist[n]; } spfa判断图中是否存在负环 —— 模板题 AcWing 852. spfa判断负环 时间复杂度是 O(nm), n 表示点数，m 表示边数\nint n; // 总点数 int h[N], w[N], e[N], ne[N], idx; // 邻接表存储所有边 int dist[N], cnt[N]; // dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数 bool st[N]; // 存储每个点是否在队列中 // 如果存在负环，则返回true，否则返回false。 bool spfa() { // 不需要初始化dist数组 // 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。 queue\u0026lt;int\u0026gt; q; for (int i = 1; i \u0026lt;= n; i ++ ) { q.push(i); st[i] = true; } while (q.size()) { auto t = q.front(); q.pop(); st[t] = false; for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (dist[j] \u0026gt; dist[t] + w[i]) { dist[j] = dist[t] + w[i]; cnt[j] = cnt[t] + 1; if (cnt[j] \u0026gt;= n) return true; // 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环 if (!st[j]) { q.push(j); st[j] = true; } } } } return false; } floyd算法 —— 模板题 AcWing 854. Floyd求最短路 时间复杂度是 O(n3)O(n3), nn 表示点数 初始化： for (int i = 1; i \u0026lt;= n; i ++ ) for (int j = 1; j \u0026lt;= n; j ++ ) if (i == j) d[i][j] = 0; else d[i][j] = INF; // 算法结束后，d[a][b]表示a到b的最短距离 void floyd() { for (int k = 1; k \u0026lt;= n; k ++ ) for (int i = 1; i \u0026lt;= n; i ++ ) for (int j = 1; j \u0026lt;= n; j ++ ) d[i][j] = min(d[i][j], d[i][k] + d[k][j]); } 最小生成树（无向图） Prim : 朴素版Prim O(n^2)(稠密图) ; 堆优化版Prim O(mlogn)(一般不会用)\nKruskal : O(mlogm)(稀疏图)\n朴素版prim算法 —— 模板题 AcWing 858. Prim算法求最小生成树 时间复杂度是 O(n^2+m), n 表示点数，m 表示边数\n初始化距离为正无穷，迭代所有点，找到集合中最近的点，更新它到集合的距离，把t加到集合中。\nint n; // n表示点数 int g[N][N]; // 邻接矩阵，存储所有边 int dist[N]; // 存储其他点到当前最小生成树的距离 bool st[N]; // 存储每个点是否已经在生成树中 // 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和 int prim() { memset(dist, 0x3f, sizeof dist); int res = 0; for (int i = 0; i \u0026lt; n; i ++ ) { int t = -1; for (int j = 1; j \u0026lt;= n; j ++ ) if (!st[j] \u0026amp;\u0026amp; (t == -1 || dist[t] \u0026gt; dist[j])) t = j; if (i \u0026amp;\u0026amp; dist[t] == INF) return INF; if (i) res += dist[t]; st[t] = true; for (int j = 1; j \u0026lt;= n; j ++ ) dist[j] = min(dist[j], g[t][j]); } return res; } Kruskal算法 —— 模板题 AcWing 859. Kruskal算法求最小生成树 时间复杂度是 O(mlogm), n 表示点数，m 表示边数\nint n, m; // n是点数，m是边数 int p[N]; // 并查集的父节点数组 struct Edge // 存储边 { int a, b, w; // 重载小于号运算符 // 用于比较两个Edge对象的大小关系 bool operator \u0026lt; (const Edge \u0026amp;W) const { return w \u0026lt; W.w; // 如果当前对象的边权小于W对象的边权，返回true，否则返回false } }edges[M]; int find(int x) // 并查集核心操作 { if (p[x] != x) p[x] = find(p[x]); return p[x]; } int kruskal() { sort(edges, edges + m); for (int i = 1; i \u0026lt;= n; i ++ ) p[i] = i; // 初始化并查集 int res = 0, cnt = 0; for (int i = 0; i \u0026lt; m; i ++ ) { int a = edges[i].a, b = edges[i].b, w = edges[i].w; a = find(a), b = find(b); if (a != b) // 如果两个连通块不连通，则将这两个连通块合并 { p[a] = b; res += w; cnt ++ ; } } if (cnt \u0026lt; n - 1) return INF; return res; } 染色法（本质dfs)判别二分图 —— 模板题 AcWing 860. 染色法判定二分图 给定一个 n 个点m条边的无向图，图中可能存在重边和自环。请你判断这个图是否是二分图。\n时间复杂度是 O(n+m), n 表示点数，m 表示边数\nint n; // n表示点数 int h[N], e[M], ne[M], idx; // 邻接表存储图 int color[N]; // 表示每个点的颜色，-1表示为染色，0表示白色，1表示黑色 // 参数：u表示当前节点，c表示当前点的颜色 bool dfs(int u, int c) { color[u] = c; for (int i = h[u]; i != -1; i = ne[i]) { int j = e[i]; if (color[j] == -1) { if (!dfs(j, !c)) return false; } else if (color[j] == c) return false; } return true; } bool check() { memset(color, -1, sizeof color); bool flag = true; for (int i = 1; i \u0026lt;= n; i ++ ) if (color[i] == -1) if (!dfs(i, 0)) { flag = false; break; } return flag; } 匈牙利算法 —— 模板题 AcWing 861. 二分图的最大匹配 时间复杂度最坏是 O(nm)，实际运行时间一般远小于O(nm)， n 表示点数，m 表示边数\n做错一件事，错过一件事\nint n1, n2; // n1表示第一个集合中的点数，n2表示第二个集合中的点数 int h[N], e[M], ne[M], idx; // 邻接表存储所有边，匈牙利算法中只会用到从第二个集合指向第一个集合的边，所以这里只用存一个方向的边 int match[N]; // 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个 bool st[N]; // 表示第二个集合中的每个点是否已经被遍历过 bool find(int x) { for (int i = h[x]; i != -1; i = ne[i]) { int j = e[i]; if (!st[j]) { st[j] = true; if (match[j] == 0 || find(match[j])) { match[j] = x; return true; } } } return false; } // 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点 int res = 0; for (int i = 1; i \u0026lt;= n1; i ++ ) { memset(st, false, sizeof st); if (find(i)) res ++ ; } 作者：yxc 链接：https://www.acwing.com/blog/content/405/ 来源：AcWing 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n第四章 试除法判定质数 —— 模板题 AcWing 866. 试除法判定质数 质数：大于1的整数中，如果只包含1和本身两个约束，称为质数（素数）\n（1）判定，试除法\n（2）分解质因数\nbool is_prime(int x) { if (x \u0026lt; 2) return false; for (int i = 2; i \u0026lt;= x / i; i ++ ) if (x % i == 0) return false; return true; } 试除法分解质因数 —— 模板题 AcWing 867. 分解质因数 void divide(int x) { for (int i = 2; i \u0026lt;= x / i; i ++ ) if (x % i == 0) { int s = 0; while (x % i == 0) x /= i, s ++ ; cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#39; \u0026#39; \u0026lt;\u0026lt; s \u0026lt;\u0026lt; endl; } if (x \u0026gt; 1) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#39; \u0026#39; \u0026lt;\u0026lt; 1 \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; endl; } 朴素筛法求素数 —— 模板题 AcWing 868. 筛质数 int primes[N], cnt; // primes[]存储所有素数 bool st[N]; // st[x]存储x是否被筛掉 void get_primes(int n) { for (int i = 2; i \u0026lt;= n; i ++ ) { if (st[i]) continue; primes[cnt ++ ] = i; for (int j = i; j \u0026lt;= n; j += i) st[j] = true; } } 线性筛法求素数 —— 模板题 AcWing 868. 筛质数 被最小质因子筛掉\nint primes[N], cnt; // primes[]存储所有素数 bool st[N]; // st[x]存储x是否被筛掉 void get_primes(int n) { for (int i = 2; i \u0026lt;= n; i ++ ) { if (!st[i]) primes[cnt ++ ] = i; for (int j = 0; primes[j] \u0026lt;= n / i; j ++ ) { st[primes[j] * i] = true; if (i % primes[j] == 0) break; } } } 试除法求所有约数 —— 模板题 AcWing 869. 试除法求约数 int范围内约数个数最多为1500个左右\nvector\u0026lt;int\u0026gt; get_divisors(int x) { vector\u0026lt;int\u0026gt; res; for (int i = 1; i \u0026lt;= x / i; i ++ ) if (x % i == 0) { res.push_back(i); if (i != x / i) res.push_back(x / i); } sort(res.begin(), res.end()); return res; } 约数个数和约数之和 —— 模板题 AcWing 870. 约数个数, AcWing 871. 约数之和 如果 N = p1^c1 * p2^c2 * ... *pk^ck 约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1) 约数之和： (p1^0 + p1^1 + ... + p1^c1) * ... * (pk^0 + pk^1 + ... + pk^ck) 欧几里得算法 —— 模板题 AcWing 872. 最大公约数 int gcd(int a, int b) { return b ? gcd(b, a % b) : a; } 求欧拉函数 —— 模板题 AcWing 873. 欧拉函数 欧拉函数公式（容斥原理) : n*(1-p1)*(1-p2)\u0026hellip;(1-pk)\nint phi(int x) { int res = x; for (int i = 2; i \u0026lt;= x / i; i ++ ) if (x % i == 0) { res = res / i * (i - 1); while (x % i == 0) x /= i; } if (x \u0026gt; 1) res = res / x * (x - 1); return res; } 筛法求欧拉函数 —— 模板题 AcWing 874. 筛法求欧拉函数 O(n) 线性求所有数的欧拉函数\n应用：欧拉定理：a与n互质 a^φ(n)=1(mod n)\nint primes[N], cnt; // primes[]存储所有素数 int euler[N]; // 存储每个数的欧拉函数 bool st[N]; // st[x]存储x是否被筛掉 void get_eulers(int n) { euler[1] = 1; for (int i = 2; i \u0026lt;= n; i ++ ) { if (!st[i]) { primes[cnt ++ ] = i; euler[i] = i - 1; } for (int j = 0; primes[j] \u0026lt;= n / i; j ++ ) { int t = primes[j] * i; st[t] = true; if (i % primes[j] == 0) { euler[t] = euler[i] * primes[j]; break; } euler[t] = euler[i] * (primes[j] - 1); } } } 快速幂 —— 模板题 AcWing 875. 快速幂 求 m^k mod p，时间复杂度 O(logk)。\nint qmi(int m, int k, int p) { int res = 1 % p, t = m; while (k) { if (k\u0026amp;1) res = res * t % p; t = t * t % p; k \u0026gt;\u0026gt;= 1; } return res; } 扩展欧几里得算法 —— 模板题 AcWing 877. 扩展欧几里得算法 // 求x, y，使得ax + by = gcd(a, b) int exgcd(int a, int b, int \u0026amp;x, int \u0026amp;y) { if (!b) { x = 1; y = 0; return a; } int d = exgcd(b, a % b, y, x); y -= (a/b) * x; return d; } 高斯消元 —— 模板题 AcWing 883. 高斯消元解线性方程组 O(n^3)时间内解n个方程n个未知数的解。\n解：无解 ； 无穷多组解 ； 唯一解 ；\n完美阶梯型：唯一解 *0=*非零 ： *无解 0=0 ： 无穷多组解 高斯消元：\n枚举每一列c：\n找到绝对值最大的一行 将该行换到最上面 将该行第一个数变成1 将下面所有行的第c列消成0 // a[N][N]是增广矩阵 int gauss() { int c, r; for (c = 0, r = 0; c \u0026lt; n; c ++ ) { int t = r; for (int i = r; i \u0026lt; n; i ++ ) // 找到绝对值最大的行 if (fabs(a[i][c]) \u0026gt; fabs(a[t][c])) t = i; if (fabs(a[t][c]) \u0026lt; eps) continue; for (int i = c; i \u0026lt;= n; i ++ ) swap(a[t][i], a[r][i]); // 将绝对值最大的行换到最顶端 for (int i = n; i \u0026gt;= c; i -- ) a[r][i] /= a[r][c]; // 将当前上的首位变成1 for (int i = r + 1; i \u0026lt; n; i ++ ) // 用当前行将下面所有的列消成0 if (fabs(a[i][c]) \u0026gt; eps) for (int j = n; j \u0026gt;= c; j -- ) a[i][j] -= a[r][j] * a[i][c]; r ++ ; } if (r \u0026lt; n) { for (int i = r; i \u0026lt; n; i ++ ) if (fabs(a[i][n]) \u0026gt; eps) return 2; // 无解 return 1; // 有无穷多组解 } for (int i = n - 1; i \u0026gt;= 0; i -- ) for (int j = i + 1; j \u0026lt; n; j ++ ) a[i][n] -= a[i][j] * a[j][n]; return 0; // 有唯一解 } 递归法求组合数 —— 模板题 AcWing 885. 求组合数 I 十万 1\u0026lt;b\u0026lt;a\u0026lt;2000 O(n^2)\n// c[a][b] 表示从a个苹果中选b个的方案数 for (int i = 0; i \u0026lt; N; i ++ ) for (int j = 0; j \u0026lt;= i; j ++ ) if (!j) c[i][j] = 1; else c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod; 通过预处理逆元的方式求组合数 —— 模板题 AcWing 886. 求组合数 II 一万 1\u0026lt;b\u0026lt;a\u0026lt;10^5 O(logn)\n首先预处理出所有阶乘取模的余数fact[N]，以及所有阶乘取模的逆元infact[N] 如果取模的数是质数，可以用费马小定理求逆元 int qmi(int a, int k, int p) // 快速幂模板 { int res = 1; while (k) { if (k \u0026amp; 1) res = (LL)res * a % p; a = (LL)a * a % p; k \u0026gt;\u0026gt;= 1; } return res; } // 预处理阶乘的余数和阶乘逆元的余数 fact[0] = infact[0] = 1; for (int i = 1; i \u0026lt; N; i ++ ) { fact[i] = (LL)fact[i - 1] * i % mod; infact[i] = (LL)infact[i - 1] * qmi(i, mod - 2, mod) % mod; } ll C(ll n,ll m){ if(m\u0026gt;n) return 0ll; return fact[n]*infact[m]%mod*infact[n-m]%mod; } Lucas定理 —— 模板题 AcWing 887. 求组合数 III 组合数，1\u0026lt;b\u0026lt;a\n若p是质数，则对于任意整数 1 \u0026lt;= m \u0026lt;= n，有： C(n, m) = C(n % p, m % p) * C(n / p, m / p) (mod p) int qmi(int a, int k) // 快速幂模板 { int res = 1; while (k) { if (k \u0026amp; 1) res = (LL)res * a % p; a = (LL)a * a % p; k \u0026gt;\u0026gt;= 1; } return res; } int C(int a, int b) // 通过定理求组合数C(a, b) { int res = 1; for (int i = 1, j = a; i \u0026lt;= b; i ++, j -- ) { res = (LL)res * j % p; res = (LL)res * qmi(i, p - 2) % p; } return res; } int lucas(LL a, LL b) { if (a \u0026lt; p \u0026amp;\u0026amp; b \u0026lt; p) return C(a, b); return (LL)C(a % p, b % p) * lucas(a / p, b / p) % p; } 分解质因数法求组合数 —— 模板题 AcWing 888. 求组合数 IV 当我们需要求出组合数的真实值，而非对某个数的余数时，分解质因数的方式比较好用：\n1. 筛法求出范围内的所有质数 2. 通过 C(a, b) = a! / b! / (a - b)! 这个公式求出每个质因子的次数。 n! 中p的次数是 n / p + n / p^2 + n / p^3 + ... 3. 用高精度乘法将所有质因子相乘 int primes[N], cnt; // 存储所有质数 int sum[N]; // 存储每个质数的次数 bool st[N]; // 存储每个数是否已被筛掉 void get_primes(int n) // 线性筛法求素数 { for (int i = 2; i \u0026lt;= n; i ++ ) { if (!st[i]) primes[cnt ++ ] = i; for (int j = 0; primes[j] \u0026lt;= n / i; j ++ ) { st[primes[j] * i] = true; if (i % primes[j] == 0) break; } } } int get(int n, int p) // 求n！中的次数 { int res = 0; while (n) { res += n / p; n /= p; } return res; } vector\u0026lt;int\u0026gt; mul(vector\u0026lt;int\u0026gt; a, int b) // 高精度乘低精度模板 { vector\u0026lt;int\u0026gt; c; int t = 0; for (int i = 0; i \u0026lt; a.size(); i ++ ) { t += a[i] * b; c.push_back(t % 10); t /= 10; } while (t) { c.push_back(t % 10); t /= 10; } return c; } get_primes(a); // 预处理范围内的所有质数 for (int i = 0; i \u0026lt; cnt; i ++ ) // 求每个质因数的次数 { int p = primes[i]; sum[i] = get(a, p) - get(b, p) - get(a - b, p); } vector\u0026lt;int\u0026gt; res; res.push_back(1); for (int i = 0; i \u0026lt; cnt; i ++ ) // 用高精度乘法将所有质因子相乘 for (int j = 0; j \u0026lt; sum[i]; j ++ ) res = mul(res, primes[i]); 卡特兰数 —— 模板题 AcWing 889. 满足条件的01序列 给定n个0和n个1，它们按照某种顺序排成长度为2n的序列，满足任意前缀中0的个数都不少于1的个数的序列的数量为： $$ Cat(n) = C(2n, n) / (n + 1) $$\n容斥原理 找1~n中能至少被素数p1,p2,\u0026hellip;,pn一个整除的整数有多少个。\n位运算对应容斥原理集合，1~n中能被x整除的个数为n/x，奇数加上，偶数减去\nNIM(尼姆)游戏 —— 模板题 AcWing 891. Nim游戏 给定N堆物品，第i堆物品有Ai个。两名玩家轮流行动，每次可以任选一堆，取走任意多个物品，可把一堆取光，但不能不取。取走最后一件物品者获胜。两人都采取最优策略，问先手是否必胜。\n我们把这种游戏称为NIM博弈。把游戏过程中面临的状态称为局面。整局游戏第一个行动的称为先手，第二个行动的称为后手。若在某一局面下无论采取何种行动，都会输掉游戏，则称该局面必败。 所谓采取最优策略是指，若在某一局面下存在某种行动，使得行动后对面面临必败局面，则优先采取该行动。同时，这样的局面被称为必胜。我们讨论的博弈问题一般都只考虑理想情况，即两人均无失误，都采取最优策略行动时游戏的结果。 NIM博弈不存在平局，只有先手必胜和先手必败两种情况。\n定理： NIM博弈先手必胜，当且仅当 A1 ^ A2 ^ … ^ An != 0\n公平组合游戏ICG 若一个游戏满足：\n由两名玩家交替行动； 在游戏进程的任意时刻，可以执行的合法行动与轮到哪名玩家无关； 不能行动的玩家判负； 则称该游戏为一个公平组合游戏。 NIM博弈属于公平组合游戏，但城建的棋类游戏，比如围棋，就不是公平组合游戏。因为围棋交战双方分别只能落黑子和白子，胜负判定也比较复杂，不满足条件2和条件3。\n有向图游戏 给定一个有向无环图，图中有一个唯一的起点，在起点上放有一枚棋子。两名玩家交替地把这枚棋子沿有向边进行移动，每次可以移动一步，无法移动者判负。该游戏被称为有向图游戏。 任何一个公平组合游戏都可以转化为有向图游戏。具体方法是，把每个局面看成图中的一个节点，并且从每个局面向沿着合法行动能够到达的下一个局面连有向边。\nMex运算 设S表示一个非负整数集合。定义mex(S)为求出不属于集合S的最小非负整数的运算，即： mex(S) = min{x}, x属于自然数，且x不属于S\nSG函数 在有向图游戏中，对于每个节点x，设从x出发共有k条有向边，分别到达节点y1, y2, …, yk，定义SG(x)为x的后继节点y1, y2, …, yk 的SG函数值构成的集合再执行**mex(S)**运算的结果，即： SG(x) = mex({SG(y1), SG(y2), …, SG(yk)}) 特别地，整个有向图游戏G的SG函数值被定义为有向图游戏起点s的SG函数值，即SG(G) = SG(s)。\nint sg(int x){ if (f[x] != -1) return f[x]; unordered_set\u0026lt;int\u0026gt; S; for(int i = 0; i \u0026lt; m; i++ ) { int sum = s[i]; if (x \u0026gt;= sum) S.insert(sg(x - sum)); } for (int i=0; ; i++ ) if (!S.count(i)) return f[x] = i; } 有向图游戏的和 —— 模板题 AcWing 893. 集合-Nim游戏 设G1, G2, …, Gm 是m个有向图游戏。定义有向图游戏G，它的行动规则是任选某个有向图游戏Gi，并在Gi上行动一步。G被称为有向图游戏G1, G2, …, Gm的和。 有向图游戏的和的SG函数值等于它包含的各个子游戏SG函数值的异或和，即： SG(G) = SG(G1) ^ SG(G2) ^ … ^ SG(Gm)\n定理 有向图游戏的某个局面必胜，当且仅当该局面对应节点的SG函数值大于0。 有向图游戏的某个局面必败，当且仅当该局面对应节点的SG函数值等于0。\n作者：yxc 链接：https://www.acwing.com/blog/content/406/ 来源：AcWing 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n时空复杂度分析 当处理ACM或笔试题时，通常时间限制为1秒或2秒。在这种情况下，C++代码中的操作次数应控制在10^7 到 10^8之间，这是最佳范围。\n以下是在不同数据规模下，代码的时间复杂度和算法选择的指导：\nn ≤ 30：指数级别，使用DFS+剪枝，状态压缩DP。 n ≤ 100：O(n^3)，适用于Floyd、DP、高斯消元。 n ≤ 1000：O(n^2)或O(n^2*logn)，适用于DP、分治、高斯消元、朴素版Dijkstra、朴素版Prim、Bellman-Ford。 n ≤ 10000：O(n * √n)，适用于块状链表、分块、莫队。 n ≤ 100000：O(nlogn)，适用于各种排序、线段树、树状数组、集合/映射、堆、拓扑排序、Dijkstra+堆、Prim、Kruskal、SPFA、求凸包、求半平面交、二分、CDQ分治、整体二分、后缀数组、树链剖分、动态树。 n \u0026lt; 1000000：O(n)或常数较小的O(nlogn)，适用于单调队列、哈希映射、双指针扫描、BFS、并查集、KMP、AC自动机、常数较小的O(nlogn)的做法（如排序、树状数组、堆、Dijkstra、SPFA）。 n \u0026lt; 10000000：O(n)，适用于双指针扫描、KMP、AC自动机、线性筛素数。 n ≤ 10^9：O(n√n)，适用于判断质数。 n ≤ 10^18：O(logn)，适用于最大公约数、快速幂、数位DP。 n ≤ 10^1000：O((logn)^2)，适用于高精度加减乘除。 n ≤ 10^100000：O(logk × loglogk)，其中k表示位数，适用于高精度加减、FFT/NTT。 动态规划计算量 ： 状态数 * 状态转移数量\n1 Byte = 8 bit\n1KB = 1024 Byte\n1MB = 102410241024 Byte\n1GB = 1024 * 1024 * 1024 Byte\nint 4 Byte\nchar 1 Byte\ndouble, long long 8 Byte\n动态规划 常见模型\n背包 九讲 01背包 每件物品最多可以用一次\n体积从大到小的原因 ： 如果从小到大，则f[j-w[i]]+v[i]实际是f[i-1][j-w[i]]+v[i]，需要的是上一维度f[i-1]维度，所以从大到小可以使用上一维度的，因为这一维度的还没有被计算到。\nfor(int i=1;i\u0026lt;=N;i++){ for(int j=V;j\u0026gt;=w[i];j--){ f[j]=max(f[j],f[j-w[i]]+v[i]); } } 完全背包 每件物品可以用无限次\nfor(int i=1;i\u0026lt;=N;i++){ for(int j=w[i];j\u0026lt;=V;j++){ f[j]=max(f[j],f[j-w[i]]+v[i]); } } 多重背包 每件物品特定数量\n二进制优化 for(int i=1;i\u0026lt;=N;i++){ cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b\u0026gt;\u0026gt;c; //权重a,价值b，数量c int k=1; while(k\u0026lt;=c){ cnt++; c-=k; w[cnt]=k*a; v[cnt]=k*b; k*=2; } if(c){ cnt++; w[cnt]=c*a; v[cnt]=c*b; } } //之后用01背包 单调队列优化 for(int i=1;i\u0026lt;=N;i++){ // 遍历每件物品 memcpy(g, f, sizeof g); // 将上一轮的最优解拷贝给g数组 for(int r=0;r\u0026lt;v[i];r++){ // 遍历余数r（用于优化循环） int h=0,t=-1; // 滑动窗口的起始索引和结束索引 for(int l=r;l\u0026lt;=V;l+=v[i]){ // 遍历背包容量，间隔为当前物品体积 while(h\u0026lt;=t \u0026amp;\u0026amp; l-q[h]\u0026gt;s[i]*v[i]) h++; // 如果窗口左边界超出限制，则左边界右移 while(h\u0026lt;=t \u0026amp;\u0026amp; g[q[t]] + (l-q[t])/v[i]*w[i]\u0026lt;=g[l]) t--; // 保持窗口单调性，将窗口内不符合条件的解移除 q[++t] = l; // 将当前状态的背包容量加入窗口 f[l] = g[q[h]] + (l-q[h])/v[i]*w[i]; // 更新当前状态的最优解 } } } 分组背包 若干组，一组只能选一个\nfor(int i=1;i\u0026lt;=N;i++){ for(int j=V;j\u0026gt;=0;j--){ for(int k=1;k\u0026lt;=s[i];k++){ if(w[i][k]\u0026lt;=j){ f[j]=max(f[j],f[j- w[i][k] ]+v[i][k]); } } } } 混合背包 转换成01背包问题\nfor(int i=1;i\u0026lt;=N;i++){ cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b\u0026gt;\u0026gt;s; if(s==-1) s=1; else if(s==0) s=V/a; k=1; while(k\u0026lt;=s){ s-=k; cnt++; v[cnt] = k*a; w[cnt] = k*b; k*=2; } if(s){ cnt++; v[cnt] = s*a; w[cnt] = s*b; } } for(int i=1;i\u0026lt;=cnt;i++){ for(int j=V;j\u0026gt;=v[i];j--){ f[j] = max(f[j], f[j-v[i]]+w[i]); } } 二维费用的背包问题 采用两层循环\ncin\u0026gt;\u0026gt;N\u0026gt;\u0026gt;V\u0026gt;\u0026gt;W; for(int i=1;i\u0026lt;=N;i++){ cin\u0026gt;\u0026gt;v\u0026gt;\u0026gt;m\u0026gt;\u0026gt;w; for(int j=V;j\u0026gt;=v;j--){ for(int k=W;k\u0026gt;=m;k--){ f[j][k] = max(f[j][k], f[j-v][k-m] + w); } } } cout\u0026lt;\u0026lt;f[V][W]\u0026lt;\u0026lt;endl; 线性dp 数字三角形 for(int i=1;i\u0026lt;=n;i++){ for(int j=1;j\u0026lt;=i;j++){ a[i][j]+=max(a[i-1][j],a[i-1][j-1]); } } LIS for(int i=1;i\u0026lt;=n;i++){ for(int j=1;j\u0026lt;i;j++){ if(a[j]\u0026lt;a[i]) f[i]=max(f[j]+1,f[i]); } } for(int i=1;i\u0026lt;=n;i++){ ma=max(f[i],ma); } LCS for(int i=1;i\u0026lt;=n;i++){ for(int j=1;j\u0026lt;=m;j++){ f[i][j]=max(f[i-1][j],f[i][j-1]); if(a[i]==b[j]) f[i][j]=f[i-1][j-1]+1; } } 区间dp 石子合并 memset(f, 0x3f, sizeof f); for(int len=2;len\u0026lt;=n;len++){ for(int i=1;i+len-1\u0026lt;=n;i++){ int j=i+len-1; if (len == 1) { f[i][j] = 0; // 边界初始化 continue; } for(int k=i;k\u0026lt;j;k++){ f[l][r]=min(f[l][r],f[l][k]+f[k+1][r]+s[r]-s[l-1]); } } } cout\u0026lt;\u0026lt;f[1][n]; 数位统计dp 状态表示\n分情况讨论\n状态压缩 dp 蒙德里安的梦想\n最短Hamilton距离\n树形dp 没有上司的舞会\n记忆化 滑雪\n#include\u0026lt;bits/stdc++.h\u0026gt; using namespace std; #define ll long long const int maxn=1e4; ll f[maxn][maxn],g[maxn][maxn]; //distance struct node{ ll i,j,num; }a[maxn]; struct cmp { bool operator () (node x,node y){ return x.num\u0026gt;y.num; } }; int main() { ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); ll n,m,ma=-1; cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; priority_queue\u0026lt;node, vector\u0026lt;node\u0026gt;,cmp\u0026gt;pq; for(ll i=1;i\u0026lt;=n;i++){ for(ll j=1;j\u0026lt;=m;j++){ f[i][j]=1; node a; a.i=i; a.j=j; cin\u0026gt;\u0026gt;a.num; g[i][j]=a.num; pq.push(a); } } while(!pq.empty()){ node t=pq.top(); pq.pop(); ll i=t.i; ll j=t.j; ll nu=t.num; if(g[i-1][j]\u0026lt;nu) f[i][j]=max(f[i][j],f[i-1][j]+1); if(g[i+1][j]\u0026lt;nu) f[i][j]=max(f[i][j],f[i+1][j]+1); if(g[i][j-1]\u0026lt;nu) f[i][j]=max(f[i][j],f[i][j-1]+1); if(g[i][j+1]\u0026lt;nu) f[i][j]=max(f[i][j],f[i][j+1]+1); ma=max(ma,f[i][j]); } cout\u0026lt;\u0026lt;ma\u0026lt;\u0026lt;endl; return 0; } 习题课 ","permalink":"https://showguan.github.io/en/posts/tech/acwing/","summary":"acwing算法学习 [TOC] 第一章 课上：学思想 课下：背代码 题目，一道题写好几遍 理解没有任何意义，体力活+脑力活 记忆力 毅力/自制力 沉下心背东西 快速排","title":""},{"content":"$x^2$\n","permalink":"https://showguan.github.io/en/posts/tech/math/","summary":"$x^2$","title":""},{"content":"title = \u0026lsquo;后端八股学习笔记\u0026rsquo; date = 2024-04-06T17:47:22+08:00 draft = false\n+++\n后端八股学习笔记 想要生活能进步，就不能走退步路。\n计算机网络 网络是把主机连接起来，而互联网(Internet)是把多种不同的网络连接起来，因此互联网是网络的网络，而互联网(Internet)是全球范围的互联网。 ISP 互联网服务提供商ISP可以从互联网管理机构获得许多IP地址，同时拥有通信线路以及路由器等联网设备，个人或机构向ISP缴纳一定的费用就可以接入互联网。\n目前的互联网是一种多层次ISP结构，ISP根据覆盖面积的大小分为第一层ISP，区域ISP和接入ISP。**互联网交换点IXP（Internet Exchange Point)**允许两个ISP直接相连而不用经过第三个ISP。\n主机之间的通信方式 客户-服务器（C/S）：客户是服务的请求方，服务器 是服务的提供方。\n对等（P2P）：不区分客户和服务器\n电路交换与分组交换 1.电路交换 电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终占用该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到10%。\n2.分组交换 每个分组都有首部和尾部，包含了源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互相不影响，因此在同一条传输线路上允许同时传输多个分组，也就是说分组交换不需要占用传输线路。\n在同一个邮局通信系统中，邮局收到一份邮件之后，先存储下来，然后把相同目的地的邮件一起转发到下一个目的地，这个过程就是存储转发的过程，分组交换也使用了存储转发过程。\n时延 总时延 = 排队时延 + 处理时延 + 传输时延 + 传播时延\n1.排队时延 分组在路由器的输入队列和输出队列中排队等待的时间，取决于网络当前的通信量。\n2.处理时延 主机或路由器收到分组时进行处理所需要的时间，例如分析首部、从分组中提取数据、进行差错检验或查找适当的路由等。\n3.传输时延 主机或路由器传输数据帧所需要的时间。 $$ delay = \\frac{l(bit)}{v(bit/s)} $$ $l$:数据帧的长度, $v$:传输速率\n4.传播时延 电磁波在信道中传播所需要花费的时间，电磁波传播的速度接近光速。 $$ delay = \\frac{l(m)}{v(m/s)} $$ $l$:表示信道长度， $v$:表示电磁波在信道上的传播速度\n计算机网络体系结构 1.五层协议 应用层：为特定应用程序提供数据传输服务，例如HTTP，DNS等协议。数据单位为报文。\n传输层：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议UDP，提供无连接的、尽最大努力的数据传输服务，数据单位为用户数据报。TCP主要提供完整性服务，UDP主要提供及时性服务。\n网络层：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。\n数据链路层：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。\n物理层：考虑的是怎样在传输媒体上传输比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。\n2.OSI (Open Systems Interconnection，开放式系统互联)\n其中表示层和会话层用途如下：\n表示层：数据压缩、加密以及数据描述，这使得应用程序不必关心在各台主机中数据内部格式不同的问题。 会话层：建立及管理会话。 五层协议没有表示层和会话层，而是将这些功能留给应用程序开发者处理。\n3.TCP/IP 只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。\nTCP/IP体系结构不严格遵循OSI分层概念，应用层可能会直接使用IP层或者网络接口层。\n4.数据在各层之间的传递过程 在向下的过程中，需要添加下层协议所需要的首部和尾部，而在向上的过程中不断拆开首部和尾部。\n路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要传输层和应用层。\n物理层 通信方式 根据信息在传输线上的传送方向，分为一下三种通信方式：\n单工通信：单向传输 半双工通信：双向交替传输 全双工通信：双向同时传输 带通调制 模拟信号是连续的信号，数字信号是离散的信号。带通调制把数字信号转换为模拟信号。\n链路层 基本问题 1.封装成帧 把网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。\n2.透明传输 透明表示一个实际存在的事物看起来好像不存在一样。\n帧使用首部和尾部进行定界，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。\n3.差错检测 目前数据链路层广泛使用了**循环冗余检验（CRC，Cyclic Redundancy Check）**来检查比特差错。\n信道分类 1.广播信号 一对多通信，一个节点发送的数据能够被广播信道上所有的节点接受到。\n所有的节点都在同一个广播信道上发送数据，因此需要有专门的控制方法进行协调，避免发生冲突（冲突也叫碰撞）。\n主要有两种控制方法进行协调，一个是使用信道复用技术；另一个是使用CSMA/CD协议。\n2.点对点信道 一对一通信。\n因为不会发生碰撞，因此也比较简单，使用PPP（Point-to-Point Protocol）协议进行控制。\n信道复用技术 1.频分复用 频分复用的所有主机在相同的时间占用不同的频率带宽资源。\n2.时分复用 时分复用的所有主机在不同的事件占用相同的频率带宽资源。\n使用频分复用和时分复用进行通信，在通信的过程中主机会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其他用户使用，因此这两种方式对信道的利用率都不高。\n3.统计时分复用 是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。\n4.波分复用 光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。\n5.码分复用 为每个用户分配$m\\ bit$ 的码片，并且所有的码片正交，对于任意两个码片$\\vec{S}$和$\\vec{T}$有 $$ \\frac{1}{m}\\vec{S}\\ \\cdot \\vec{T} = 0 $$ 为了讨论方便，取$m=8$, 设码片$\\vec{S}$为$00011011$。在拥有该码片额用户发送比特1时就发送该码片，发送比特0时就发送该码片的反码$11100100$\n在计算时将$00011011$记作（$-1-1-1+1+1-1+1+1$）,可以得到： $$ \\frac{1}{m}\\vec{S} \\cdot \\vec{S}=1 $$\n$$ \\frac{1}{m}\\vec{S} \\cdot \\vec{S}\u0026rsquo;=-1 $$\n其中$\\vec{S}\u0026rsquo;$是$\\vec{S}$的反码\n利用上面的式子可知，当接收端使用码片$\\vec{S}\u0026rsquo;$对接受到的数据进行内积运算时， 结果为0的是其它用户发送的数据，结果为1的是用户发送的比特1,结果为-1的是用户发送的比特0。\n码分复用需要发送的数据量为原先的m倍。\nCSMA/CD协议 CSMA/CD表示载波监听多点接入/碰撞检测。\n多点接入：说明这是总线型网络，许多主机以多点的方式连接到总线上 载波监听：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。 碰撞检测：在发送中，如果监听到信道已有其他主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。 记端到端的传播时延为$\\tau$, 最先发送的站点最多经过$2\\tau$就可以知道是否发生了碰撞，称$2\\tau$为争用期。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。\n当发生碰撞时， 站点要停止发送，等待一段时间再发送。这个时间采用截断二进制指数退避算法来确定。从离散的整数集合${0, 1, \u0026hellip;, (2^k-1)}$中随机取出一个数，记作$r$， 然后取$r$倍的争用期作为重传等待时间。\nPPP协议 互联网用户通常需要连接到某个ISP之后才能接入互联网，PPP协议时用户计算机和ISP进行通信时所使用的数据链路层协议。\nPPP的帧格式：\nF字段为帧的定界符 A和C字段暂时没有意义 FCS字段是使用CRC的检验序列 信息部分的长度不超过1500 MAC地址 MAC地址是链路层地址，长度为6字节（48位）， 用于唯一表示网络适配器（网卡）。\n一台主机拥有多少个网络适配器就有多少个MAC地址。例如笔记本电脑普遍存在无限网络适配器和有线网络适配器，因此就有两个MAC地址。\n局域网 局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有， 且地理范围和站点数目均有限。\n主要有以太网、令牌环网络、FDDI和ATM等局域网技术，目前以太网占领着有线局域网市场。\n可以按照网络拓扑结构对局域网进行分类。\n以太网 以太网是一种星型拓扑结构局域网。\n早起使用集线器进行连接，集线器是一种物理层设备。作用于比特而不是帧，当一个比特到达接口时，集线器重新生成这个比特，并将其能量强度放大，从而扩大网络的传输距离，之后再将这个比特发送到其他所有接口。如果集线器同时收到两个不同接口的帧，那么就发生了碰撞。\n目前以太网使用交换机替代了集线器，交换机是一种链路层设备，它不会发生碰撞，能根据MAC地址进行存储转发。\n以太网格式：\n类型：标记上层使用的协议 数据：长度为46~1500之间，如果太小则需要填充 FCS：真检验序列，使用的时CRC检验方法 交换机 ","permalink":"https://showguan.github.io/en/posts/tech/%E5%90%8E%E7%AB%AF%E5%85%AB%E8%82%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","summary":"title = \u0026lsquo;后端八股学习笔记\u0026rsquo; date = 2024-04-06T17:47:22+08:00 draft = false +++ 后端八股学习笔记 想要生活能进步，就不能走退步路。 计算机网络 网络是把主机连接起来","title":""},{"content":"周赛240407 出师不利，第一题变量名能写错，慢就是快，少就是多，提交之前一定要有万全的检查。\n第二题100242. 满足距离约束且字典序最小的字符串 纯思维题，先花时间想清楚基础问题再想后面的问题。吸取教训，代码一定要写的清晰明了，自己才能更好的看懂并写下去。\nPython 取模运算中余数符号和除数符号一致，并满足：$被除数-除数*商(整除)=余数$\n思路：转换问题，问不超过k，那么用完$k$是最优的，因为用$k$总能使字典序变小(除非原序列全是$a$), 那么就依次枚举，知道不能转换为$a$的情况下将剩余的$k$转换称可以转换成的最小的字典序字母。\nclass Solution: def getSmallestString(self, s: str, k: int) -\u0026gt; str: s = list(s) n = len(s) for i in range(n): d = min(ord(s[i])-ord(\u0026#39;a\u0026#39;), ord(\u0026#39;a\u0026#39;)-ord(s[i])+26) if k\u0026gt;=d: k-=d s[i]=\u0026#39;a\u0026#39; else: num = ord(s[i])-ord(\u0026#39;a\u0026#39;) ch = min((num-k)%26, (num+k)%26) ch = chr(ch+ord(\u0026#39;a\u0026#39;)) s[i] = ch break return \u0026#39;\u0026#39;.join(s) 第三题 3107. 使数组中位数等于 K 的最少操作数 这题比较简答，最后一刻用二分交的，结果右端点取值保守错了一发。\n实际不需要二分，在排好序的序列里，用中位数去靠近中位数更优，所以直接排序计算将前面比k大的和后面比$k$小的计算差值就可以了。\nclass Solution: def minOperationsToMakeMedianK(self, nums: List[int], k: int) -\u0026gt; int: nums.sort() n = len(nums) mid = n // 2 op=abs(nums[mid]-k) for i in range(mid): if nums[i]\u0026gt;k: op += nums[i] - k for i in range(mid+1, n): if nums[i]\u0026lt;k: op += k - nums[i] return op 第四题100244. 带权图里旅途的最小代价 并查集+思维题。如果一些数字相与$(and)$， 如果存在较小的数字二进制位中是$0$，那么就算有再多的数字在这一位上是$1$也没有用了。所以在一个连通块内最小代价就是所有边都走一遍，而连通块可以用并查集来判断。\nclass Solution: def minimumCost(self, n: int, edges: List[List[int]], query: List[List[int]]) -\u0026gt; List[int]: def find(x): if p[x]!=x: p[x]=find(p[x]) return p[x] p={i:i for i in range(n)} dis={} ret=[] for u,v,_ in edges: p[find(u)]=find(v) for u,v,w in edges: pu = find(u) if pu not in dis: dis[pu]=w else: dis[pu]\u0026amp;=w for x,y in query: if x==y: ret.append(0) continue #如果相等一定要continue px, py = find(x), find(y) if px==py: ret.append(dis[px]) else: ret.append(-1) return ret ","permalink":"https://showguan.github.io/en/posts/tech/%E5%91%A8%E8%B5%9B240407/","summary":"周赛240407 出师不利，第一题变量名能写错，慢就是快，少就是多，提交之前一定要有万全的检查。 第二题100242. 满足距离约束且字典序最小的","title":""},{"content":"图片 ","permalink":"https://showguan.github.io/en/posts/tech/%E5%9B%BE%E7%89%87/","summary":"图片","title":""},{"content":"蓝桥杯笔记 以后做事：切记切记切记，不要一直做新题，及时复习是最重要的。\n一定一定拿一个国奖，6~7月准备两个项目，八月开始投简历。\n真题一定要全部过一遍\n一、基础复习阶段 3.4~3.10\n二、刷题 3.10~3.20\n三、刷真题，搞懂每一道真题 3.20~4.10\n程序易错点 ：\n变量未声明 i,j,k变量写错了 11+12+16+15+12+12 = 78\n七夕祭 $$ p[i] : i给i+1 \\enspace p[i]个糖果 \\ 则 ans = \\sum_{i=1}^n|p[i]| \\ p[1]=a[1]-avg \\ 递推 \\enspace p[2]=p[1]+a[2]-avg \\ p[3]=p[2]+a[3]-avg = p[1]+a[2]-avg+a[3]-avg \\ p[4]=p[3]+a[4]-avg = p[2]+p[3]-avg+a[4]-avg = p[1]+a[2]-avg+a[3]-avg+a[4]-avg \\ =\\sum_{i=2}^4{(a[i]-avg)} - p[1] \\ ans = $$\nfrom collections import defaultdict r = defaultdict(int) c = defaultdict(int) s = defaultdict(int) def get_ans(a, n): ans = 0 avg = sum(a.values()) // n for i in a: a[i] -= avg s[1] = 0 prev_sum = 0 sorted_values = sorted(a.values()) mid = sorted_values[n // 2] for i in range(2, n + 1): prev_sum += a[i] s[i] = prev_sum for i in s.values(): ans += abs(i - mid) return ans n, m, t = map(int, input().split()) for _ in range(t): x, y = map(int, input().split()) r[x] += 1 c[y] += 1 if t % n != 0 and t % m != 0: print(\u0026#34;impossible\u0026#34;) elif t % n == 0 and t % m == 0: print(\u0026#34;both\u0026#34;, get_ans(r, n) + get_ans(c, m)) elif t % n == 0: print(\u0026#34;row\u0026#34;, get_ans(r, n)) else: print(\u0026#34;column\u0026#34;, get_ans(c, m)) 模板 基础+杂项 快速排序 def quick_sort(q, l, r): if l\u0026gt;=r: return i,j,x=l-1,r+1,q[(l+r)\u0026gt;\u0026gt;1] while i\u0026lt;j: i+=1 while q[i]\u0026lt;x: i+=1 j-=1 while q[j]\u0026gt;x: j-=1 if i\u0026lt;j: q[i], q[j] = q[j], q[i] quick_sort(q, l, j) quick_sort(q, j+1, r) n=int(input()) arr=list(map(int, input().split())) quick_sort(arr,0,n-1) print(\u0026#34; \u0026#34;.join(map(str, arr))) 归并排序 j = mid+1 !!!\ndef merge_sort(q,l,r): if l\u0026gt;=r: return mid = (l+r)\u0026gt;\u0026gt;1 merge_sort(q, l, mid) merge_sort(q, mid+1, r) i,j,k = l, mid+1, 0 tmp = [0]*(r-l+1) while i\u0026lt;=mid and j\u0026lt;=r: if q[i]\u0026lt;q[j]: tmp[k]=q[i] k+=1 i+=1 else: tmp[k]=q[j] k+=1 j+=1 while i\u0026lt;=mid: tmp[k]=q[i] i+=1 k+=1 while j\u0026lt;=r: tmp[k]=q[j] j+=1 k+=1 for i in range(l, r+1): q[i]=tmp[i-l] n=int(input()) arr=list(map(int, input().split())) merge_sort(arr, 0, n-1) print(\u0026#34; \u0026#34;.join(map(str, arr))) 二分 def check(x): # 检查 x 是否满足某种性质 pass # 这里需要根据具体的情况实现 def bsearch_1(l, r): while l \u0026lt; r: mid = (l + r) // 2 if check(mid): r = mid else: l = mid + 1 return l def bsearch_2(l, r): while l \u0026lt; r: mid = (l + r + 1) // 2 if check(mid): l = mid else: r = mid - 1 return l # 示例用法 # 首先定义 check 函数来检查性质 # 然后使用 bsearch_1 或 bsearch_2 来进行二分搜索 浮点数二分 def check(x): # 检查x是否满足某种性质 pass # 这里需要根据具体情况实现check函数 def bsearch_3(l, r): eps = 1e-6 # eps 表示精度，取决于题目对精度的要求 while r - l \u0026gt; eps: mid = (l + r) / 2 if check(mid): r = mid else: l = mid return l 一维前缀和 def prefixSum(arr): n = len(arr) prefixSum = [0] * n prefixSum[0] = arr[0] for i in range(1, n): prefixSum[i] = prefixSum[i-1] + arr[i] for i in range(n): print(prefixSum[i], end=\u0026#34; \u0026#34;) arr = [1, 2, 3, 4, 5] prefixSum(arr) 二维前缀和 def prefixSum2D(arr): n = len(arr) m = len(arr[0]) prefixSum = [[0] * m for _ in range(n)] # 计算第一行的前缀和 prefixSum[0][0] = arr[0][0] for j in range(1, m): prefixSum[0][j] = prefixSum[0][j-1] + arr[0][j] # 计算第一列的前缀和 for i in range(1, n): prefixSum[i][0] = prefixSum[i-1][0] + arr[i][0] # 计算其他部分的前缀和 for i in range(1, n): for j in range(1, m): prefixSum[i][j] = prefixSum[i-1][j] + prefixSum[i][j-1] - prefixSum[i-1][j-1] + arr[i][j] return prefixSum def submatrixSum(prefixSum, x1, y1, x2, y2): return prefixSum[x2][y2] - prefixSum[x1-1][y2] - prefixSum[x2][y1-1] + prefixSum[x1-1][y1-1] arr = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] prefixSum = prefixSum2D(arr) print(prefixSum) x1, y1 = 1, 1 x2, y2 = 2, 2 submatrixSum = submatrixSum(prefixSum, x1, y1, x2, y2) print(submatrixSum) 一维差分 差分和前缀和是逆运算。\n需要计算某一段区间$+-$操作时，运用差分操作 updateRange 需要先构造差分数组\n$s[i] = s[i-1]+a[i]$ 逆运算 $d[i]=a[i]-a[i-1]$ （原数组看作为前缀和数组）\ndef updateRange(B, l, r, c): B[l] += c B[r + 1] -= c def printArray(arr): for i in range(len(arr)): print(arr[i], end=\u0026#34; \u0026#34;) print() n= 5 B = [0] * (n + 1) updateRange(B, 1, 3, 2) updateRange(B, 2, 4, 3) printArray(B) 二维差分 def updateSubmatrix(S, x1, y1, x2, y2, c): S[x1][y1] += c S[x2 + 1][y1] -= c S[x1][y2 + 1] -= c S[x2 + 1][y2 + 1] += c def printMatrix(S): rows = len(S) cols = len(S[0]) for i in range(rows): for j in range(cols): print(S[i][j], end=\u0026#34; \u0026#34;) print() rows = 3 cols = 3 S = [[0] * cols for _ in range(rows + 1)] updateSubmatrix(S, 0, 0, 1, 1, 1) updateSubmatrix(S, 1, 1, 2, 2, 2) printMatrix(S) 双指针 for i in range(n): j = 0 while j \u0026lt; i and check(j, i): j += 1 # 具体问题的逻辑 # 常见问题分类： # (1) 对于一个序列，用两个指针维护一段区间 # (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作 位运算 原码，反码，补码 求n二进制表示中第k位数字: n \u0026gt;\u0026gt; k \u0026amp; 1 返回n的最后一位1：lowbit(n) = n \u0026amp; -n 树状数组基本操作 离散化 alls = [] # 存储所有待离散化的值 # 将所有值排序 alls.sort() # 去掉重复元素 alls = list(set(alls)) # 二分求出x对应的离散化的值 def find(x): l, r = 0, len(alls) - 1 while l \u0026lt; r: mid = (l + r) // 2 if alls[mid] \u0026gt;= x: r = mid else: l = mid + 1 return r + 1 # 映射到1, 2, ...n 区间合并 def merge(segs): segs.sort() # 区间左端点排序 res = [] st, ed = -2e9, -2e9 for seg in segs: if ed \u0026lt; seg[0]: if st != -2e9: res.append((st, ed)) st, ed = seg[0], seg[1] else: ed = max(ed, seg[1]) if st != -2e9: res.append((st, ed)) segs[:] = res 数据结构 单链表 N = int(1e5+10) e=[0]*N ne=[0]*N head=-1 idx=1 def insert(x): global idx, head e[idx]=x ne[idx]=head head=idx idx+=1 def add(k, x): global idx e[idx]=x ne[idx]=ne[k] ne[k]=idx idx+=1 def remove(k): global idx, head if k==0: head = ne[head] else: ne[k]=ne[ne[k]] n = int(input()) for _ in range(n): s = input().split() op=s[0] if op==\u0026#39;H\u0026#39;: insert(int(s[1])) elif op==\u0026#39;I\u0026#39;: add(int(s[1]), int(s[2])) else: remove(int(s[1])) i=head while i!=-1: print(e[i], end=\u0026#39; \u0026#39;) i=ne[i] 双链表 N = int(1e5+10) e=[0]*N l=[0]*N r=[0]*N idx=0 def init(): global idx r[2]=1 l[1]=2 idx=3 def insert(k, x): global idx e[idx]=x l[idx]=k r[idx]=r[k] l[r[k]]=idx r[k]=idx idx+=1 def remove(k): l[r[k]]=l[k] r[l[k]]=r[k] init() m=int(input()) for _ in range(m): s=input().split() if s[0]==\u0026#39;L\u0026#39;: x=int(s[1]) insert(2,x) elif s[0]==\u0026#39;R\u0026#39;: x=int(s[1]) insert(l[1],x) elif s[0]==\u0026#39;D\u0026#39;: k=int(s[1])+2 remove(k) elif s[0]==\u0026#39;IL\u0026#39;: k=int(s[1])+2 x=int(s[2]) insert(l[k],x) elif s[0]==\u0026#39;IR\u0026#39;: k=int(s[1])+2 x=int(s[2]) insert(k,x) i=2 while i!=0: if i==2 or i==1: i=r[i] continue print(e[i],end=\u0026#34; \u0026#34;) i=r[i] 栈 N = int(1e5+10) # 假设N的值为100 stk = [0] * N tt = 0 # 向栈顶插入一个数 tt += 1 stk[tt] = x # 从栈顶弹出一个数 tt -= 1 # 栈顶的值 stk[tt] # 判断栈是否为空 if tt \u0026gt; 0: pass 队列 N = 100 # 假设N的值为100 q = [0] * N hh = 0 tt = -1 # 向队尾插入一个数 tt += 1 q[tt] = x # 从队头弹出一个数 hh += 1 # 队头的值 q[hh] # 判断队列是否为空 if hh \u0026lt;= tt: pass N = 100 # 假设N的值为100 q = [0] * N hh = 0 tt = 0 # 向队尾插入一个数 q[tt] = x tt += 1 if tt == N: tt = 0 # 从队头弹出一个数 hh += 1 if hh == N: hh = 0 # 队头的值 q[hh] # 判断队列是否为空 if hh != tt: pass 单调栈 tt = 0 stk = [0] * (n + 1) for i in range(1, n + 1): while tt and check(stk[tt], i): tt -= 1 stk[tt + 1] = i tt += 1 单调队列 n = 10 # 假设n的值为10 hh = 0 tt = -1 q = [0] * n for i in range(n): while hh \u0026lt;= tt and check_out(q[hh]): hh += 1 while hh \u0026lt;= tt and check(q[tt], i): tt -= 1 q[tt + 1] = i tt += 1 N = int(1e6+10) q=[0 for _ in range(N)] n,k=map(int, input().split()) a=[0]+[int(x) for x in input().split()] hh,tt=0,-1 for i in range(1,n+1): if hh\u0026lt;=tt and i-q[hh]+1\u0026gt;k: hh+=1 while hh\u0026lt;=tt and a[q[tt]] \u0026gt;= a[i]: tt-=1 tt+=1 q[tt]=i if i \u0026gt;= k: print(a[q[hh]], end=\u0026#34; \u0026#34;) print() hh,tt=0,-1 for i in range(1,n+1): if hh\u0026lt;=tt and i-q[hh]+1\u0026gt;k: hh+=1 while hh\u0026lt;=tt and a[q[tt]] \u0026lt;= a[i]: tt-=1 tt+=1 q[tt]=i if i\u0026gt;=k: print(a[q[hh]], end=\u0026#34; \u0026#34;) KMP m = len(p) # 假设p为模板串，长度为m n = len(s) # 假设s为模式串，长度为n ne = [0] * (m + 1) # 初始化ne数组 # 求Next数组 j = 0 for i in range(2, m + 1): while j and p[i] != p[j + 1]: j = ne[j] if p[i] == p[j + 1]: j += 1 ne[i] = j # 匹配 j = 0 for i in range(1, n + 1): while j and s[i] != p[j + 1]: j = ne[j] if s[i] == p[j + 1]: j += 1 if j == m: j = ne[j] # 匹配成功后的逻辑 Tire N = 100010 son = [[0] * 26 for _ in range(N)] cnt = [0] * N idx = 0 # 0号点既是根节点，又是空节点 # son[][]存储树中每个节点的子节点 # cnt[]存储以每个节点结尾的单词数量 # 插入一个字符串 def insert(s): global idx p = 0 for i in range(len(s)): u = ord(s[i]) - ord(\u0026#39;a\u0026#39;) if not son[p][u]: idx += 1 son[p][u] = idx p = son[p][u] cnt[p] += 1 # 查询字符串出现的次数 def query(s): p = 0 for i in range(len(s)): u = ord(s[i]) - ord(\u0026#39;a\u0026#39;) if not son[p][u]: return 0 p = son[p][u] return cnt[p] 并查集 N = 1000005 # 假设N的值为1000005 p = [0] * N # 初始化p数组 # 返回x的祖宗节点 def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] # 初始化，假定节点编号是1~n for i in range(1, n + 1): p[i] = i # 合并a和b所在的两个集合 p[find(a)] = find(b) 维护size信息\n# Python中没有类似于C++的数组声明方式，我们直接使用列表来代替 p = [i for i in range(N)] size = [1] * N # 返回x的祖宗节点 def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] # 初始化，假定节点编号是1~n n = N # 假设n是提前定义好的 for i in range(1, n + 1): p[i] = i size[i] = 1 # 合并a和b所在的两个集合 p[find(a)] = find(b) size[b] += size[a] 维护到祖宗节点距离的并查集\n# Python中没有类似于C++的数组声明方式，我们直接使用列表来代替 p = [i for i in range(N)] d = [0] * N # 返回x的祖宗节点 def find(x): if p[x] != x: u = find(p[x]) d[x] += d[p[x]] p[x] = u return p[x] # 初始化，假定节点编号是1~n n = N # 假设n是提前定义好的 for i in range(1, n + 1): p[i] = i d[i] = 0 # 合并a和b所在的两个集合 p[find(a)] = find(b) d[find(a)] = distance # 根据具体问题，初始化find(a)的偏移量 堆 # h[N] 存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1 # ph pos[k] 存储第k个插入的点在堆中的位置 # hp ord[k] 存储堆中下标是k的点是第几个插入的 N = 1000005 # 假设N的值为1000005 h = [0] * N # 初始化h数组 ph = [0] * N # 初始化ph数组 hp = [0] * N # 初始化hp数组 size = 0 # 初始化size为0 # 交换两个点，及其映射关系 def heap_swap(a, b): ph[hp[a]], ph[hp[b]] = ph[hp[b]], ph[hp[a]] hp[a], hp[b] = hp[b], hp[a] h[a], h[b] = h[b], h[a] def down(u): t = u if u * 2 \u0026lt;= size and h[u * 2] \u0026lt; h[t]: t = u * 2 if u * 2 + 1 \u0026lt;= size and h[u * 2 + 1] \u0026lt; h[t]: t = u * 2 + 1 if u != t: heap_swap(u, t) down(t) def up(u): while u // 2 and h[u] \u0026lt; h[u // 2]: heap_swap(u, u // 2) u \u0026gt;\u0026gt;= 1 # O(n)建堆 for i in range(n // 2, 0, -1): down(i) def add_element(x): global size size += 1 h[size] = x ph[size] = size hp[size] = size up(size) def get_heap_top(): return h[1] def delete_element(k): global size heap_swap(k, size) size -= 1 down(k) up(k) def update_element(k, x): h[k] = x down(k) up(k) # 添加元素 add_element(x) # 堆顶元素 heap_top = get_heap_top() # 删除第size个节点 delete_element(1) # 删除第k个节点 delete_element(k) # 将第k个元素赋值为x update_element(k, x) 哈希 (1)拉链法 N = 1000005 # 假设N的值为1000005 h = [-1] * N # 初始化h数组为-1 e = [0] * N # 初始化e数组 ne = [0] * N # 初始化ne数组 idx = 0 # 初始化idx为0 # 向哈希表中插入一个数 def insert(x): k = (x % N + N) % N e[idx] = x ne[idx] = h[k] h[k] = idx idx += 1 # 在哈希表中查询某个数是否存在 def find(x): k = (x % N + N) % N i = h[k] while i != -1: if e[i] == x: return True i = ne[i] return False (2) 开放寻址法 N = 1000005 # 假设N的值为1000005 h = [0] * N # 初始化h数组 # 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置 def find(x): t = (x % N + N) % N while h[t] != 0 and h[t] != x: t += 1 if t == N: t = 0 return t 字符串哈希 N = 1000005 # 假设N的值为1000005 P = 131 # 或者可以设置为13331 h = [0] * N # 初始化h数组 p = [0] * N # 初始化p数组 # 初始化 p[0] = 1 for i in range(1, n + 1): h[i] = h[i - 1] * P + ord(str[i]) p[i] = p[i - 1] * P # 计算子串 str[l ~ r] 的哈希值 def get(l, r): return h[r] - h[l - 1] * p[r - l + 1] 图论 树的存储 邻接矩阵 # 创建一个二维列表表示邻接矩阵 n = 10 # 顶点数量 g = [[0] * n for _ in range(n)] # 添加一条边a-\u0026gt;b def add_edge(a, b): g[a][b] = 1 # 初始化 g = [[0] * n for _ in range(n)] 邻接表 # 创建一个列表表示邻接表 n = 10 # 顶点数量 h = [-1] * n e = [0] * n ne = [0] * n idx = 0 # 添加一条边a-\u0026gt;b def add_edge(a, b): global idx e[idx] = b ne[idx] = h[a] h[a] = idx idx += 1 # 初始化 idx = 0 h = [-1] * n 树和图的存储 # 邻接表表示的图 N = 100010 # 根据具体需求设置合适的最大节点数量 # 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点 h = [-1] * N # 存储边的目标节点 e = [0] * N # 存储下一条边的索引 ne = [0] * N # 边的索引 idx = 0 # 添加一条边a-\u0026gt;b def add(a, b): global idx e[idx] = b ne[idx] = h[a] h[a] = idx idx += 1 # 初始化 idx = 0 for i in range(N): h[i] = -1 树和图的遍历 DFS def dfs(u): st[u] = True # st[u] 表示点u已经被遍历过 for i in range(h[u], -1, -1): j = e[i] if not st[j]: dfs(j) BFS from queue import Queue q = Queue() st[1] = True # 表示1号点已经被遍历过 q.put(1) while not q.empty(): t = q.get() for i in range(h[t], -1, -1): j = e[i] if not st[j]: st[j] = True # 表示点j已经被遍历过 q.put(j) 拓扑排序 def topsort(): hh = 0 tt = -1 # d[i] 存储点i的入度 for i in range(1, n + 1): if d[i] == 0: q.append(i) tt += 1 while hh \u0026lt;= tt: t = q[hh] hh += 1 for i in range(h[t], -1, -1): j = e[i] d[j] -= 1 if d[j] == 0: q.append(j) tt += 1 # 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。 return tt == n - 1 LCA def lca(x,y): if dep[x] \u0026lt; dep[y]: x,y = y,x d = dep[x]-dep[y] while d: # 循环直到深度差为 0 v = d \u0026amp; -d # 获取 d 的最低位的 1 所在的位置 i = v.bit_length() - 1 # 计算最低位的位置索引 x = fa[i][x] # 将节点 x 上移到和节点 y 同一深度 d -= v # 更新深度差 if x==y: return x for k in range(K-1, -1, -1): if fa[k][x] != fa[k][y]: x = fa[k][x] y = fa[k][y] return fa[0][x] 最短路 单元最短路\n​\t所有边权为正：\n​\t朴素版Dijkstra $O(n^2)$,堆优化版的Dijkstra $O(mlogn)$,\n​\t存在负权边\n​\tBellman-Ford $O(nm)$, SPFA 队列优化的Bellman-Ford, 一般情况：$O(m)$ 最坏情况：$O(nm)$\n多元汇最短路：\n​\tFloyed $O(n^3)$\n朴素Dijkstra N = int(5e2)+10 INF = 0x3f3f3f3f g = [[INF]*N for _ in range(N)] #g = defaultdict(lambda:defaultdict(lambda:INF)) 同样的效果 dis = [INF]*N st = [False]*N def dijkstra(): dis[1]=0 for i in range(n-1): t=-1 for j in range(1,n+1): if not st[j] and (t==-1 or dis[j]\u0026lt;dis[t]): t=j for j in range(1,n+1): dis[j]=min(dis[j], dis[t] + g[t][j]) st[t]=True if dis[n]==INF: return -1 return dis[n] n, m = map(int, input().split()) for _ in range(m): x, y, z = map(int ,input().split()) g[x][y] = min(g[x][y], z) print(dijkstra()) 堆优化版Dijkstra from heapq import * import sys input = lambda:sys.stdin.readline().strip() N = 150010 INF = 0x3f3f3f3f e, ne, head, w, dis= [0]*N, [0]*N, [-1]*N, [0]*N, [INF]*N st = [False]*N idx=0 def add(a, b, x): global idx e[idx]=b w[idx]=x ne[idx]=head[a] head[a]=idx idx+=1 def dijkstra(): dis[1]=0 h=[] heappush(h, (0,1)) while h: dist, ver = heappop(h) if st[ver]: continue st[ver]=True i=head[ver] while i!=-1: j=e[i] if not st[j] and dis[j]\u0026gt;dist+w[i]: dis[j]=dist+w[i] heappush(h, (dis[j], j)) i=ne[i] if dis[n]==INF: print(-1) else: print(dis[n]) n, m = map(int, input().split()) for _ in range(m): x, y, z = map(int, input().split()) add(x,y,z) dijkstra() 另一种写法 from heapq import * from collections import defaultdict import sys input=lambda:sys.stdin.readline().strip() N, INF = 150010, 0x3f3f3f3f dis, st = [INF]*N, [False]*N g=defaultdict(list) def dijkstra(): dis[1]=0 h=[] heappush(h, (0, 1)) while h: dist, ver = heappop(h) if st[ver]: continue st[ver]=True for y, z in g[ver]: if dis[y]\u0026gt;dis[ver]+z: dis[y]=dis[ver]+z heappush(h, (dis[y], y)) if dis[n]==INF: print(-1) else: print(dis[n]) n, m = map(int, input().split()) for _ in range(m): x,y,z = map(int, input().split()) g[x].append((y, z)) dijkstra() Bellman-Ford # n表示点数，m表示边数 dist = [float(\u0026#39;inf\u0026#39;)] * (n + 1) # dist[x]存储1到x的最短路距离 # 边，a表示出点，b表示入点，w表示边的权重 edges = [] # 求1到n的最短路距离，如果无法从1走到n，则返回-1。 def bellman_ford(): dist[1] = 0 # 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。 for i in range(n): for j in range(m): a, b, w = edges[j][\u0026#39;a\u0026#39;], edges[j][\u0026#39;b\u0026#39;], edges[j][\u0026#39;w\u0026#39;] if dist[b] \u0026gt; dist[a] + w: dist[b] = dist[a] + w if dist[n] \u0026gt; float(\u0026#39;inf\u0026#39;) / 2: return -1 return dist[n] SPFA from collections import defaultdict, deque import sys input = lambda:sys.stdin.readline().strip() N, INF = int(1e5+10), 0x3f3f3f3f dis, st = [INF]*N, [False]*N g=defaultdict(list) def spfa(): q=deque() q.append(1) st[1]=True dis[1]=0 while q: x=q.popleft() st[x]=False for y, z in g[x]: if dis[y]\u0026gt;dis[x]+z: dis[y]=dis[x]+z if not st[y]: st[y]=True q.append(y) if dis[n]==INF: print(\u0026#39;impossible\u0026#39;) else: print(dis[n]) n, m = map(int, input().split()) for _ in range(m): x, y, z = map(int, input().split()) g[x].append((y, z)) spfa() 判断负环 from collections import deque N = int(1e5+10) INF = 0x3f3f3f3f n = 0 # 总点数 h = [-1] * N # 邻接表存储所有边 e, ne, w = [0] * N, [0] * N, [0] * N idx = 0 dist, cnt = [INF] * N, [0] * N # dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数 st = [False] * N # 存储每个点是否在队列中 # 如果存在负环，则返回True，否则返回False。 def spfa(): # 不需要初始化dist数组 # 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环 q = deque() for i in range(1, n + 1): q.append(i) st[i] = True while q: t = q.popleft() st[t] = False i = h[t] while i != -1: j = e[i] if dist[j] \u0026gt; dist[t] + w[i]: dist[j] = dist[t] + w[i] cnt[j] = cnt[t] + 1 if cnt[j] \u0026gt;= n: return True # 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环 if not st[j]: q.append(j) st[j] = True i = ne[i] return False # Example usage: # n = 5 # h = [-1, 2, 1, 4, 3, -1] # e = [0, 2, 1, 4, 3, 0] # ne = [1, -1, 3, -1, -1, 2] # w = [0, 1, 2, 3, 4, 5] # if spfa(): # print(\u0026#34;Exist negative cycle\u0026#34;) # else: # print(\u0026#34;No negative cycle\u0026#34;) floyd INF = float(\u0026#39;inf\u0026#39;) # 初始化距离矩阵d，d[a][b]表示a到b的最短距离 def initialize(n): d = [[0 if i == j else INF for j in range(n)] for i in range(n)] return d # Floyd算法求解最短路径 def floyd(d, n): for k in range(n): for i in range(n): for j in range(n): d[i][j] = min(d[i][j], d[i][k] + d[k][j]) return d # Example usage: # n = 5 # d = initialize(n) # d = floyd(d, n) # print(d) Prim INF = float(\u0026#39;inf\u0026#39;) # Prim算法求解最小生成树的权重之和 def prim(n, g): dist = [INF] * (n + 1) st = [False] * (n + 1) res = 0 for i in range(n): t = -1 for j in range(1, n + 1): if not st[j] and (t == -1 or dist[t] \u0026gt; dist[j]): t = j if i and dist[t] == INF: return INF if i: res += dist[t] st[t] = True for j in range(1, n + 1): dist[j] = min(dist[j], g[t][j]) return res # Example usage: # n = 5 # g = [[0] * (n + 1) for _ in range(n + 1)] # dist = prim(n, g) # print(dist) Kruskal INF = float(\u0026#39;inf\u0026#39;) # 并查集的查找操作 def find(x, p): if p[x] != x: p[x] = find(p[x], p) return p[x] # Kruskal算法求解最小生成树的权重之和 def kruskal(n, m, edges): edges.sort(key=lambda x: x[2]) # 按照边权重对边进行排序 p = [i for i in range(n + 1)] # 初始化并查集的父节点数组 res = 0 cnt = 0 for edge in edges: a, b, w = edge a = find(a, p) b = find(b, p) if a != b: # 如果两个连通块不连通，则将这两个连通块合并 p[a] = b res += w cnt += 1 if cnt \u0026lt; n - 1: return INF return res # Example usage: # n, m = 5, 7 # edges = [(1, 2, 2), (1, 3, 5), (1, 4, 6), (2, 3, 1), (2, 4, 3), (3, 4, 4), (4, 5, 7)] # min_spanning_tree_weight = kruskal(n, m, edges) # print(min_spanning_tree_weight) 染色法 # 定义全局变量 N = 10005 # 根据需要修改 M = 20005 # 根据需要修改 h = [-1] * N # 邻接表头 e, ne = [0] * M, [0] * M # 邻接表存储图 idx = 0 # 邻接表索引 color = [-1] * N # 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色 # 深度优先搜索进行着色 def dfs(u, c): color[u] = c i = h[u] while i != -1: j = e[i] if color[j] == -1: if not dfs(j, 1 - c): return False elif color[j] == c: return False i = ne[i] return True # 检查图是否是二分图 def check(n): flag = True for i in range(1, n + 1): if color[i] == -1: if not dfs(i, 0): flag = False break return flag # Example usage: # n = 5 # h = [-1, 2, -1, 4, -1, 4] # 邻接表头 # e = [0, 3, 0, 1, 0, 4] # 邻接表存储图 # ne = [1, -1, -1, 2, 5, -1] # 邻接表存储图 # if check(n): # print(\u0026#34;Graph is a bipartite graph.\u0026#34;) # else: # print(\u0026#34;Graph is not a bipartite graph.\u0026#34;) 匈牙利算法 N = 1005 # 根据需要修改 M = 100005 # 根据需要修改 h = [-1] * N # 邻接表头 e, ne = [0] * M, [0] * M # 邻接表存储所有边，只存储从第二个集合指向第一个集合的边 idx = 0 # 邻接表索引 match = [0] * N # 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个 st = [False] * N # 表示第二个集合中的每个点是否已经被遍历过 # 匈牙利算法中的深度优先搜索寻找增广路 def find(x): for i in range(h[x]): j = e[i] if not st[j]: st[j] = True if match[j] == 0 or find(match[j]): match[j] = x return True return False # 求最大匹配数 def hungarian(n1, n2): res = 0 for i in range(1, n1 + 1): st = [False] * N # 重置st数组 if find(i): res += 1 return res # Example usage: # n1, n2 = 5, 5 # h = [-1, 2, 3, 4, 0, 0] # 邻接表头 # e = [1, 2, 3, 4, 0, 0] # 邻接表存储所有边，只存储从第二个集合指向第一个集合的边 # ne = [1, 2, 3, 4, -1, -1] # 邻接表存储所有边，只存储从第二个集合指向第一个集合的边 # max_matching = hungarian(n1, n2) # print(max_matching) 数学 试除法判定质数 # 判断一个数是否是素数 def is_prime(x): if x \u0026lt; 2: return False for i in range(2, int(x ** 0.5) + 1): if x % i == 0: return False return True # Example usage: # result = is_prime(17) # print(result) # Output: True 试除法分解质因数 # 因数分解函数 def divide(x): i = 2 while i \u0026lt;= x ** 0.5: if x % i == 0: s = 0 while x % i == 0: x //= i s += 1 print(i, s) i += 1 if x \u0026gt; 1: print(x, 1) print() # Example usage: # divide(36) 朴素筛法求素数 N = 1000005 # 根据需要修改 primes = [] # 存储所有素数 st = [False] * N # st[x]存储x是否被筛掉 # 筛素数函数 def get_primes(n): global primes global st for i in range(2, n + 1): if not st[i]: primes.append(i) for j in range(i, n + 1, i): st[j] = True # Example usage: # get_primes(100) # print(primes) 线性筛法求素数 N = 1000005 # 根据需要修改 primes = [] # 存储所有素数 st = [False] * N # st[x]存储x是否被筛掉 # 筛素数函数 def get_primes(n): global primes global st for i in range(2, n + 1): if not st[i]: primes.append(i) for j in range(len(primes)): if primes[j] * i \u0026gt; n: break st[primes[j] * i] = True if i % primes[j] == 0: break # Example usage: # get_primes(100) # print(primes) 试除法求所有约数 # 获取因数函数 def get_divisors(x): res = [] i = 1 while i \u0026lt;= x ** 0.5: if x % i == 0: res.append(i) if i != x // i: res.append(x // i) i += 1 res.sort() return res # Example usage: # divisors = get_divisors(36) # print(divisors) 约数个数和约数之和 如果 N = p1^c1 * p2^c2 * ... *pk^ck\r约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1)\r约数之和： (p1^0 + p1^1 + ... + p1^c1) * ... * (pk^0 + pk^1 + ... + pk^ck) gcd def gcd(a, b): return gcd(b, a % b) if b else a 求欧拉函数 # 计算欧拉函数 def phi(x): res = x i = 2 while i \u0026lt;= x ** 0.5: if x % i == 0: res = res // i * (i - 1) while x % i == 0: x //= i i += 1 if x \u0026gt; 1: res = res // x * (x - 1) return res # Example usage: # result = phi(36) # print(result) 筛法求欧拉函数 N = 1000005 # 根据需要修改 primes = [] # 存储所有素数 euler = [0] * N # 存储每个数的欧拉函数 st = [False] * N # st[x]存储x是否被筛掉 # 获取欧拉函数数组 def get_eulers(n): global primes global euler global st euler[1] = 1 for i in range(2, n + 1): if not st[i]: primes.append(i) euler[i] = i - 1 for j in range(len(primes)): if primes[j] * i \u0026gt; n: break t = primes[j] * i st[t] = True if i % primes[j] == 0: euler[t] = euler[i] * primes[j] break euler[t] = euler[i] * (primes[j] - 1) # Example usage: # get_eulers(100) # print(euler) 快速幂 # 快速幂函数 def qmi(m, k, p): res, t = 1 % p, m while k: if k \u0026amp; 1: res = res * t % p t = t * t % p k \u0026gt;\u0026gt;= 1 return res # Example usage: # result = qmi(2, 10, 1000000007) # print(result) 拓展欧几里得 # 求 x, y，使得 ax + by = gcd(a, b) def exgcd(a, b, x, y): if b == 0: x[0], y[0] = 1, 0 return a d = exgcd(b, a % b, y, x) y[0] -= (a // b) * x[0] return d # Example usage: # x = [0] # y = [0] # gcd = exgcd(30, 20, x, y) # print(\u0026#34;x:\u0026#34;, x[0], \u0026#34;y:\u0026#34;, y[0], \u0026#34;gcd:\u0026#34;, gcd) 高斯消元 eps = 1e-8 # 根据需要调整 # a 是增广矩阵，n 是矩阵维度 def gauss(a, n): c, r = 0, 0 for c in range(n): t = r for i in range(r, n): if abs(a[i][c]) \u0026gt; abs(a[t][c]): t = i if abs(a[t][c]) \u0026lt; eps: continue for i in range(c, n + 1): a[r][i], a[t][i] = a[t][i], a[r][i] for i in range(n, c - 1, -1): a[r][i] //= a[r][c] for i in range(r + 1, n): if abs(a[i][c]) \u0026gt; eps: for j in range(n, c - 1, -1): a[i][j] -= a[r][j] * a[i][c] r += 1 if r \u0026lt; n: for i in range(r, n): if abs(a[i][n]) \u0026gt; eps: return 2 # 无解 return 1 # 有无穷多组解 for i in range(n - 1, -1, -1): for j in range(i + 1, n): a[i][n] -= a[i][j] * a[j][n] return 0 # 有唯一解 # Example usage: # a = [[2, 1, -1, 8], [-3, -1, 2, -11], [-2, 1, 2, -3]] # n = 3 # result = gauss(a, n) # print(result) 递归法求组合数 N = 1005 # 根据需要调整 mod = 1000000007 # 根据需要调整 c = [[0] * N for _ in range(N)] # 初始化二维数组 # 计算组合数 for i in range(N): for j in range(i + 1): if j == 0: c[i][j] = 1 else: c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod # Example usage: # result = c[5][2] # 获取从5个苹果中选2个的方案数 # print(result) 通过预处理逆元的方式求组合数 mod = 1000000007 # 根据需要调整 N = 1005 # 根据需要调整 fact = [0] * N # 存储阶乘的余数 infact = [0] * N # 存储阶乘逆元的余数 # 快速幂模板 def qmi(a, k, p): res = 1 while k: if k \u0026amp; 1: res = (res * a) % p a = (a * a) % p k \u0026gt;\u0026gt;= 1 return res # 预处理阶乘的余数和阶乘逆元的余数 fact[0] = infact[0] = 1 for i in range(1, N): fact[i] = (fact[i - 1] * i) % mod infact[i] = (infact[i - 1] * qmi(i, mod - 2, mod)) % mod # 计算组合数 def C(n, m): if m \u0026gt; n: return 0 return (fact[n] * infact[m] % mod * infact[n - m] % mod) # Example usage: # result = C(5, 2) # 获取组合数 C(5, 2) # print(result) Lucas定理 p = 1000000007 # 根据需要调整 # 快速幂模板 def qmi(a, k): res = 1 while k: if k \u0026amp; 1: res = (res * a) % p a = (a * a) % p k \u0026gt;\u0026gt;= 1 return res # 通过定理求组合数C(a, b) def C(a, b): res = 1 for i in range(1, b + 1): res = (res * (a - i + 1)) % p res = (res * qmi(i, p - 2)) % p return res # Lucas定理计算组合数 def lucas(a, b): if a \u0026lt; p and b \u0026lt; p: return C(a, b) return (C(a % p, b % p) * lucas(a // p, b // p)) % p # Example usage: # result = lucas(10, 5) # 计算组合数 C(10, 5) # print(result) 分解质因数法求组合数 # 获取素数列表 def get_primes(n): primes = [] st = [False] * (n + 1) for i in range(2, n + 1): if not st[i]: primes.append(i) for j in range(len(primes)): if primes[j] * i \u0026gt; n: break st[primes[j] * i] = True if i % primes[j] == 0: break return primes # 获取n!中p的次数 def get(n, p): res = 0 while n: res += n // p n //= p return res # 高精度乘法 def mul(a, b): res = [0] * (len(a) + len(b)) for i in range(len(a)): t = 0 for j in range(len(b)): t += res[i + j] + a[i] * b[j] res[i + j] = t % 10 t //= 10 res[i + len(b)] += t while len(res) \u0026gt; 1 and res[-1] == 0: res.pop() return res # 计算组合数 def calc_combination(a, b): primes = get_primes(a) sum = [0] * len(primes) for i in range(len(primes)): p = primes[i] sum[i] = get(a, p) - get(b, p) - get(a - b, p) res = [1] for i in range(len(primes)): for j in range(sum[i]): res = mul(res, [primes[i]]) return res # Example usage: # result = calc_combination(10, 5) # 计算组合数 C(10, 5) # print(\u0026#39;\u0026#39;.join(map(str, result[::-1]))) 题目 日期差值 mm = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30,31, 30, 31] def day(x): y = int(x/10000) m = int((x/100)%100) d = x%100 mm[2]=29 if (y%4==0 and y%100!=0) or y%400==0 else 28 for i in range(1, m): d+=mm[i] for i in range(1, y): d+=366 if (i%4==0 and i%100!=0) or i%400==0 else 365 return d while True: try: x=int(input()) y=int(input()) print( abs(day(x)-day(y))+1 ) except: break 特殊排序 # Forward declaration of compare API. # def compare(a, b): # @param a, b int # @return bool # return bool means whether a is less than b. class Solution(object): def specialSort(self, N): \u0026#34;\u0026#34;\u0026#34; :type N: int :rtype: List[int] \u0026#34;\u0026#34;\u0026#34; a = [1] for i in range(2, N+1): l, r = 0, len(a)-1 while l\u0026lt;r: mid = (l+r)\u0026gt;\u0026gt;1 if compare(i, a[mid]): r=mid else: l=mid+1 a[r+1:]=a[r:] a[r]=i if compare(a[r+1],a[r]): a[r], a[r+1] = a[r+1], a[r] return a 单链表 N = int(1e5+10) h, idx, e, ne = -1, 1, [0]*N, [0]*N def insert(x): global h, idx e[idx]=x ne[idx]=h h=idx idx+=1 def add(k, x): global h,idx e[idx]=x ne[idx]=ne[k] ne[k]=idx idx+=1 def remove(k): global h if k==0: h = ne[h] else: ne[k]=ne[ne[k]] n=int(input()) for _ in range(n): op = input().split() if op[0]==\u0026#39;H\u0026#39;: insert(int(op[1])) elif op[0]==\u0026#39;D\u0026#39;: remove(int(op[1])) elif op[0]==\u0026#39;I\u0026#39;: add(int(op[1]), int(op[2])) i=h while i!=-1: print(e[i], end=\u0026#34; \u0026#34;) i=ne[i] DP 数字三角形 f=[] n=int(input()) for _ in range(n): f.append([int(x) for x in input().split()]) for i in range(n-2,-1,-1): for j in range(i+1): f[i][j]=max(f[i+1][j], f[i+1][j+1])+f[i][j] print(f[0][0]) 背包 空间优化成1维之后，只有完全背包问题的体积是从小到大循环的\n01背包 N = int(1e3+10) f=[ 0 for _ in range(N) ] n,v=map(int,input().split()) for i in range(n): vi,wi=map(int,input().split()) for j in range(v, vi-1,-1): f[j]=max(f[j],f[j-vi]+wi) print(f[v]) 多重背包 单调队列 MN = int(2e4+10) f=[0 for _ in range(MN)] q=[0 for _ in range(MN)] g=[0 for _ in range(MN)] N,V = map(int, input().split()) for i in range(N): v,w,s=map(int, input().split()) g=f[:] for j in range(v): hh,tt=0,-1 for k in range(j,V+1,v): while hh\u0026lt;=tt and q[hh]\u0026lt;k-s*v: hh+=1 while hh\u0026lt;=tt and g[q[tt]]+(k-q[tt])//v*w \u0026lt;= g[k]: tt-=1 tt+=1 q[tt]=k f[k]=g[q[hh]]+(k-q[hh])//v*w print(f[V]) 二维费用背包 N = int(1e2+10) f=[[0]*N for _ in range(N)] n,V,M = map(int , input().split()) for i in range(n): v,m,w=map(int , input().split()) for j in range(V,v-1,-1): for k in range(M, m-1, -1): f[j][k]=max(f[j][k], f[j-v][k-m]+w) print(f[V][M]) 宠物小精灵 N = int(1e3+10) M = int(5e2+10) f=[[0]*M for _ in range(N)] n,m,kk = map(int, input().split()) for i in range(kk): v1,v2=map(int, input().split()) for j in range(n, v1-1, -1): for k in range(m-1,v2-1,-1): f[j][k]=max(f[j][k], f[j-v1][k-v2]+1) print(f[n][m-1], end=\u0026#34; \u0026#34;) t=m-1 while t\u0026gt;0 and f[n][m-1]==f[n][t-1]: t-=1 print(m-t) 潜水 最多\n恰好\n最少\nN = int(1e2+10) INF = 0x3f3f3f3f f=[ [INF]*N for _ in range(N) ] f[0][0]=0 m,n=map(int, input().split()) k=int(input()) for i in range(k): a,b,c=map(int, input().split()) for j in range(m,-1,-1): for k in range(n,-1,-1): f[j][k]=min(f[j][k], f[max(j-a, 0)][max(k-b, 0)]+c) print(f[m][n]) 庆功会 N = int(6e3+10) f=[0 for _ in range(N)] n,m = map(int, input().split()) for i in range(n): v,w,s=map(int, input().split()) for j in range(1,s+1): for k in range(m, v-1, -1): f[k]=max(f[k], f[k-v]+w) print(f[m]) 分组背包 分组背包的顺序：\n物品组 体积 决策 N = int(1e2+10) f=[0 for _ in range(N)] v=[0 for _ in range(N)] w=[0 for _ in range(N)] N,V = map(int, input().split()) for i in range(N): # 物品组 s=int(input()) for j in range(s): v[j],w[j]=map(int, input().split()) for j in range(V,-1,-1): #体积 for k in range(s): #决策 if j\u0026gt;=v[k]: f[j]=max(f[j], f[j-v[k]]+w[k]) print(f[V]) 机器分配 多重背包变种\nN = 100 f=[0 for _ in range(N)] w=[[0]*N for _ in range(N)] c=[[0]*N for _ in range(N)] n,m=map(int, input().split()) for i in range(n): w[i]=[0]+[int(x) for x in input().split()] for i in range(n): for j in range(m,-1,-1): for k in range(1,j+1): if f[j-k]+w[i][k] \u0026gt; f[j]: f[j]=f[j-k]+w[i][k] c[i][j]=k print(f[m]) t=m for i in range(n-1,-1,-1): print(i+1, c[i][t]) t-=c[i][t] 金明的预算方案 N = 80 M = 32010 f=[0 for _ in range(M)] mas=[[0,0] for _ in range(N)] ser=[[] for _ in range(N)] n,m=map(int,input().split()) for i in range(1,m+1): v,p,q=map(int, input().split()) if q==0: mas[i]=[v,v*p] else: ser[q].append((v, v*p)) for i in range(1,m+1): for j in range(n, -1, -1): for k in range( (1 \u0026lt;\u0026lt; len(ser[i]) )): v,p=mas[i] for l in range(len(ser[i])): if k\u0026gt;\u0026gt;l \u0026amp; 1: v+=ser[i][l][0] p+=ser[i][l][1] if j\u0026gt;=v: f[j]=max(f[j], f[j-v]+p) print(f[n]) 摘花生 N = 105 f=[ [0]*N for _ in range(N)] t=int(input()) for _ in range(t): r,c=map(int, input().split()) for i in range(1,r+1): f[i] = [0] + [int(x) for x in input().split()] for j in range(1,c+1): f[i][j]+=max(f[i-1][j], f[i][j-1]) print(f[r][c]) 最小通行费 N = int(1e3+10) INF = 0x3f3f3f3f f = [[INF]*N for _ in range(N)] f[1][0]=f[0][1]=0 n=int(input()) for i in range(1,n+1): f[i]=[INF]+[int(x) for x in input().split()] for i in range(1,n+1): for j in range(1,n+1): f[i][j]+=min(f[i-1][j],f[i][j-1]) print(f[n][n]) 方格 N = 15 g = [[0]*N for _ in range(N)] f = [[[[0]*N for _ in range(N)] for _ in range(N)] for _ in range(N)] n=int(input()) while True: r,c,x=map(int,input().split()) if r==0 and c==0 and x==0: break g[r][c]=x for i in range(1,n+1): for j in range(1,n+1): for k in range(1,n+1): for l in range(1,n+1): if i==k and j==l: f[i][j][k][l] = max(f[i-1][j][k-1][l], f[i-1][j][k][l-1], f[i][j-1][k-1][l], f[i][j-1][k][l-1]) + g[i][j] else: f[i][j][k][l] = max(f[i-1][j][k-1][l], f[i-1][j][k][l-1], f[i][j-1][k-1][l], f[i][j-1][k][l-1]) + g[i][j] + g[k][l] print(f[n][n][n][n]) N = 55 g=[[0]*N for _ in range(N)] f=[[[[0]*N for _ in range(N)] for _ in range(N)] for _ in range(N)] m,n=map(int, input().split()) for i in range(1,m+1): g[i]=[0]+[int(x) for x in input().split()] for i in range(1,m+1): for j in range(1,n+1): for k in range(1,m+1): for l in range(1,n+1): if i==k and j==l: f[i][j][k][l]=max(f[i-1][j][k-1][l], f[i-1][j][k][l-1], f[i][j-1][k-1][l], f[i][j-1][k][l-1])+g[i][j] else: f[i][j][k][l]=max(f[i-1][j][k-1][l], f[i-1][j][k][l-1], f[i][j-1][k-1][l], f[i][j-1][k][l-1])+g[i][j]+g[k][l] print(f[m][n][m][n]) LIS N=int(1e3+10) f=[1 for _ in range(N)] a=[] n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): for j in range(1,i): if a[i]\u0026gt;a[j]: f[i]=max(f[i],f[j]+1) ans = 0 for i in range(1,n+1): ans = max(ans, f[i]) print(ans) LCS N = int(1e3+10) f=[[0]*N for _ in range(N)] a=\u0026#34;\u0026#34; b=\u0026#34;\u0026#34; n,m=map(int, input().split()) a=input() b=input() for i in range(n): for j in range(m): f[i][j]=max(f[i-1][j], f[i][j-1]) if a[i]==b[j]: f[i][j]=f[i-1][j-1]+1 print(f[n-1][m-1]) 最大上升子序列和 import copy a=[] f=[] ans=0 n=int(input()) a=[int(x) for x in input().split()] f=copy.deepcopy(a) for i in range(n): for j in range(i): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+a[i]) for i in range(n): ans = max(ans, f[i]) print(ans) N = int(1e3+10) f=[0 for _ in range(N)] ans = 0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): f[i]=a[i] for j in range(1,i): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+a[i]) ans = max(ans, f[i]) print(ans) 最大上升子序列II N = int(1e5+10) INF = 0x3f3f3f3f q=[INF for _ in range(N)] ans=0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): l,r=0,i while l\u0026lt;r: mid = (l+r+1)\u0026gt;\u0026gt;1 if q[mid]\u0026lt;a[i]: l=mid else: r=mid-1 ans = max(ans, l+1) q[l+1]=min(q[l+1], a[i]) print(ans) N = int(1e5+10) q=[0 for _ in range(N)] len = 0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1, n+1): l,r=0,len while l\u0026lt;r: mid = (l+r+1)\u0026gt;\u0026gt;1 if q[mid]\u0026lt;a[i]: l=mid else: r=mid-1 len=max(len, l+1) q[l+1]=a[i] print(len) N = int(1e5+10) q=[0 for _ in range(N)] len = 0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): l,r=0,len while l\u0026lt;r: mid = (l+r+1)\u0026gt;\u0026gt;1 if q[mid]\u0026gt;=a[i]: r=mid-1 else: l=mid len = max(len, l+1) q[l+1]=a[i] print(len) 二分原则：\n有单调性，并且二分之后能保持单调性\n怪盗基德的滑翔翼 N = int(1e3+10) f=[0 for _ in range(N)] t=int(input()) while t: t-=1 ans=0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): f[i]=1 for j in range(1,i): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+1) ans = max(ans, f[i]) for i in range(n,0,-1): f[i]=1 for j in range(n,i,-1): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+1) ans = max(ans, f[i]) print(ans) 登山 N = int(1e3+10) f=[1 for _ in range(N)] g=[1 for _ in range(N)] ans = 0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): for j in range(1,i): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+1) for i in range(n,0,-1): for j in range(n,i,-1): if a[i]\u0026gt;a[j]: g[i]=max(g[i], g[j]+1) for i in range(1,n+1): ans = max(ans, f[i]+g[i]-1) print(ans) 合唱队形 N = int(1e3+10) f=[1 for _ in range(N)] g=[1 for _ in range(N)] ans = 0 n=int(input()) a=[0]+[int(x) for x in input().split()] for i in range(1,n+1): for j in range(1,i): if a[i]\u0026gt;a[j]: f[i]=max(f[i], f[j]+1) for i in range(n,0,-1): for j in range(n,i,-1): if a[i]\u0026gt;a[j]: g[i]=max(g[i], g[j]+1) for i in range(1,n+1): ans = max(ans, f[i]+g[i]-1) print(n-ans) 友好城市 N = int(5e3+10) a=[(-1,-1)] f=[1 for _ in range(N)] ans = 0 n=int(input()) for i in range(n): x,y=map(int, input().split()) a.append((x,y)) a.sort(key=lambda x:x[0]) for i in range(1,n+1): for j in range(1,i): if a[i][1]\u0026gt;a[j][1]: f[i]=max(f[i], f[j]+1) ans = max(f[i], ans) print(ans) 拦截导弹 贪心证明\nN = int(1e3+10) f=[1 for _ in range(N)] g=[0 for _ in range(N)] ans = 0 cnt = 0 a=[0]+[int(x) for x in input().split()] n=len(a) for i in range(n-1,0,-1): for j in range(n-1,i,-1): if a[i]\u0026gt;=a[j]: f[i]=max(f[i], f[j]+1) ans = max(ans, f[i]) print(ans) for i in range(1, n): k=0 while k\u0026lt;cnt and g[k]\u0026lt;a[i]: k+=1 if k\u0026gt;=cnt: cnt+=1 g[k]=a[i] print(cnt) 导弹防御系统 N = int(1e2+10) up=[0 for _ in range(N)] down=[0 for _ in range(N)] ans=0 def dfs(u, su, sd): global ans if su + sd\u0026gt;=ans: return if u==n: ans=su+sd return k=0 while k\u0026lt;su and up[k]\u0026gt;=a[u]: k+=1 t=up[k] up[k]=a[u] if k\u0026gt;=su: dfs(u+1, su+1, sd) else: dfs(u+1, su, sd) up[k]=t k=0 while k\u0026lt;sd and down[k]\u0026lt;=a[u]: k+=1 t=down[k] down[k]=a[u] if k\u0026gt;=sd: dfs(u+1, su, sd+1) else: dfs(u+1, su, sd) down[k]=t while True: n=int(input()) ans = n if n==0: break a=[int(x) for x in input().split()] dfs(0,0,0) print(ans) 最长公共上升子序列 N = int(3e3+10) f=[[0]*N for _ in range(N)] ans=0 n=int(input()) a=[0]+[int(x) for x in input().split()] b=[0]+[int(x) for x in input().split()] for i in range(1,n+1): maxv=1 for j in range(1,n+1): f[i][j]=f[i-1][j] if a[i]==b[j]: f[i][j]=max(f[i][j], maxv) if a[i]\u0026gt;b[j]: maxv=max(maxv, f[i][j]+1) for i in range(1,n+1): ans = max(ans, f[n][i]) print(ans) 状态机模型 闫氏DP分析法——状态机分析法\nN = int(1e5+10) t=int(input()) while t: t-=1 f=[[0]*2 for _ in range(N)] n=int(input()) a=[0]+[int(x) for x in input().split()] f[1][0]=0 f[1][1]=a[1] for i in range(2,n+1): f[i][0]=max(f[i-1][1],f[i-1][0]) f[i][1]=max(f[i-1][0], f[i-2][1])+a[i] print(max(f[n][0], f[n][1])) 买卖股票 IV K = 110 INF = 0x3f3f3f3f f=[[[-INF]*2 for _ in range(K)] for _ in range(2)] n,k = map(int ,input().split()) w=[0]+[int(x) for x in input().split()] f[1][0][0]=0 t=0 for i in range(1,n+1): for j in range(k+1): f[t][j][0]=max(f[t^1][j][0], f[t^1][j][1]+w[i]) f[t][j][1]=max(f[t^1][j][1], f[t^1][j-1][0]-w[i]) t^=1 res =max(f[t^1][i][0] for i in range(k+1)) print(res) 股票交易V N = int(1e5+10) INF = 0x3f3f3f3f f=[[-INF]*3 for _ in range(N)] n=int(input()) w=[0]+[int(x) for x in input().split()] f[0][2]=0 for i in range(1,n+1): f[i][0]=max(f[i-1][0], f[i-1][2]-w[i]) f[i][1]=f[i-1][0]+w[i] f[i][2]=max(f[i-1][1], f[i-1][2]) print(max(f[n][1], f[n][2])) 状态压缩DP 小国王 N = 13 M = 1\u0026lt;\u0026lt;N K = 110 state=[] h=[[] for _ in range(M)] cnt = [0]*M f=[[[0]*M for _ in range(K)] for _ in range(N)] def check(x): global n for i in range(n): if (x\u0026gt;\u0026gt;i)\u0026amp;1 and (x\u0026gt;\u0026gt;i+1)\u0026amp;1: return False return True def count(x): global n cnt=0 for i in range(n): if (x\u0026gt;\u0026gt;i)\u0026amp;1: cnt+=1 return cnt n,m = map(int, input().split()) for i in range(1\u0026lt;\u0026lt;n): if check(i): state.append(i) cnt[i]=count(i) for i in range(len(state)): for j in range(len(state)): a = state[i] b = state[j] if (a\u0026amp;b)==0 and check(a|b): h[i].append(j) f[0][0][0]=1 for i in range(1,n+2): for j in range(m+1): for k in range(len(state)): for t in h[k]: c = cnt[state[k]] if j\u0026gt;=c: f[i][j][state[k]]+=f[i-1][j-c][state[t]] print(f[n+1][m][0]) 愤怒的小鸟 eps = 1e-6 N = 18 M = 1\u0026lt;\u0026lt;18 INF = 0x3f3f3f3f def cmp(a,b): if abs(a-b)\u0026lt;eps: return 0 if a\u0026gt;b: return 1 return -1 t = int(input()) for _ in range(t): f = [INF]*M path = [[0]*N for _ in range(N)] q = [0]*N n,m = map(int, input().split()) for i in range(n): x,y = map(float, input().split()) q[i]=(x,y) for i in range(n): path[i][i]=1\u0026lt;\u0026lt;i #关键点：与其他点的抛物线可能都不合法，所以需要独立出一条抛物线 for j in range(n): x1,y1 = q[i] x2,y2 = q[j] if cmp(x1,x2)==0: continue a = (y1/x1-y2/x2)/(x1-x2) if cmp(a,0)\u0026gt;=0: continue b = y1/x1-a*x1 state=0 for k in range(n): x3,y3 = q[k] if cmp(a*x3*x3+b*x3, y3) == 0: state+=(1\u0026lt;\u0026lt;k) path[i][j]=state f[0]=0 for i in range(1\u0026lt;\u0026lt;n): for j in range(n): if not (i\u0026gt;\u0026gt;j)\u0026amp;1: x=j break for j in range(n): f[i | path[x][j]] = min(f[i | path[x][j]], f[i]+1) print(f[(1\u0026lt;\u0026lt;n)-1]) 集合类状态压缩DP 最短Hamilton距离 N = 22 M = 1\u0026lt;\u0026lt;20 INF = 0x3f3f3f3f f=[[INF]*N for _ in range(M)] w=[[]*N for _ in range(N)] n=int(input()) for i in range(n): w[i]=[int(_) for _ in input().split()] f[1][0]=0 for i in range(1\u0026lt;\u0026lt;n): for j in range(n): if i\u0026gt;\u0026gt;j\u0026amp;1: for k in range(n): if i\u0026gt;\u0026gt;k\u0026amp;1: f[i][j]=min(f[i][j], f[i-(1\u0026lt;\u0026lt;j)][k]+w[k][j]) print(f[(1\u0026lt;\u0026lt;n)-1][n-1]) 区间DP 石子合并\nN = 1010 INF = 0x3f3f3f3f f=[[INF]*N for _ in range(N)] s=[0]*N n = int(input()) a=[0]+[int(_) for _ in input().split()] for i in range(1,n+1): f[i][i]=0 s[i]=s[i-1]+a[i] for l in range(2,n+1): for i in range(1,n-l+2): j=i+l-1 for k in range(i,j): f[i][j] = min(f[i][j], f[i][k] + f[k+1][j] + s[j]-s[i-1]) print(f[1][n]) 环形石子合并 N = 410 w=[0]*N s=[0]*N INF = 0x3f3f3f3f f=[[-INF]*N for _ in range(N)] g=[[INF]*N for _ in range(N)] n=int(input()) a= [0]+[int(_) for _ in input().split()] for i in range(1,n+1): w[i] = w[i+n] = a[i] for i in range(1,n*2+1): s[i]=s[i-1]+w[i] for l in range(1,n+1): for i in range(1,n*2-l+2): j=i+l-1 if l==1: f[i][j]=g[i][j]=0 for k in range(i,j): f[i][j] = max(f[i][j], f[i][k]+f[k+1][j]+s[j]-s[i-1]) g[i][j] = min(g[i][j], g[i][k]+g[k+1][j]+s[j]-s[i-1]) minv, maxv = INF, -INF for i in range(1,n+1): minv = min(minv, g[i][i+n-1]) maxv = max(maxv, f[i][i+n-1]) print(minv, maxv, sep=\u0026#39;\\n\u0026#39;) 能量项链 N = 210 w=[0]*N f=[[0]*N for _ in range(N)] n = int(input()) a=[0]+[int(_) for _ in input().split()] for i in range(1,n+1): w[i]=w[i+n]=a[i] for l in range(3,n+2): for i in range(1,n*2-l+2): j=i+l-1 for k in range(i+1,j): f[i][j] = max(f[i][j], f[i][k]+f[k][j]+w[i]*w[k]*w[j]) maxv = -1 for i in range(1,n+1): maxv = max(maxv, f[i][i+n]) print(maxv) 凸多边形的划分 N = 55 INF = 1e30 f=[[INF]*N for _ in range(N)] n = int(input()) w=[0]+[int(_) for _ in input().split()] for i in range(1,n+1): f[i][i+1]=0 for l in range(3,n+1): for i in range(1, n-l+2): j=i+l-1 for k in range(i+1,j): f[i][j] = min(f[i][j], f[i][k]+f[k][j]+w[i]*w[k]*w[j]) print(f[1][n]) 加分二叉树 N = 50 def dfs(l, r): if l\u0026gt;r: return k=root[l][r] print(k,end=\u0026#39; \u0026#39;) dfs(l,k-1) dfs(k+1,r) n = int(input()) w = [0]+[int(_) for _ in input().split()] f=[[0]*N for _ in range(N)] root=[[0]*N for _ in range(N)] for l in range(1,n+1): for i in range(1,n-l+2): j=i+l-1 for k in range(i,j+1): left = 1 if k==i else f[i][k-1] right = 1 if k==j else f[k+1][j] s = left*right+w[k] if i==j: s=w[k] if f[i][j]\u0026lt;s: f[i][j]=s root[i][j]=k print(f[1][n]) dfs(1,n) 树形DP 树的最长路径 注意注意再注意，while循环链不符合要求是需要 i=ne[i]\nimport sys sys.setrecursionlimit(int(1e5+10)) N = 10010*2 e = [0]*N ne = [0]*N w = [0]*N h = [-1]*N idx = 1 ans = -1 def add(a, b, c): global idx e[idx]=b w[idx]=c ne[idx]=h[a] h[a]=idx idx+=1 def dfs(root, father): global ans dis, d1, d2 = 0,0,0 i=h[root] while i!=-1: j = e[i] if j==father: i=ne[i] # 重点 continue d = dfs(j, root)+w[i] dis = max(dis, d) if d\u0026gt;d1: d2=d1 d1=d else: d2 = max(d2, d) i=ne[i] ans = max(ans, d1+d2) return dis n = int(input()) for i in range(n-1): a,b,c = map(int, input().split()) add(a,b,c) add(b,a,c) dfs(1,-1) print(ans) 树的中心 N = 10010*2 e = [0]*N ne=[0]*N h=[-1]*N w=[0]*N d1=[0]*N d2=[0]*N s1=[0]*N up=[0]*N idx = 1 def add(a,b,c): global idx e[idx]=b w[idx]=c ne[idx]=h[a] h[a]=idx idx+=1 def dfs1(u, father): i=h[u] while i!=-1: j=e[i] if j==father: i=ne[i] continue dfs1(j,u) dis = d1[j]+w[i] if dis\u0026gt;d1[u]: d2[u]=d1[u] d1[u], s1[u]=dis, j elif dis\u0026gt;d2[u]: d2[u]=dis i=ne[i] def dfs2(u, father): i=h[u] while i!=-1: j=e[i] if j==father: i=ne[i] continue if s1[u]==j: up[j]=max(up[u], d2[u])+w[i] else: up[j]=max(up[u], d1[u])+w[i] i=ne[i] dfs2(j, u) n = int(input()) for i in range(n-1): a,b,c = map(int ,input().split()) add(a,b,c) add(b,a,c) dfs1(1,-1) dfs2(1,-1) ans = 1e10 for i in range(1,n+1): ans = min(ans, max(up[i], d1[i])) print(ans) 数字转换 N = int(5e4+10) s=[0]*N st=[False]*N e=[0]*N ne=[0]*N h=[-1]*N idx=1 ans = -1 def add(a,b): global idx e[idx]=b ne[idx]=h[a] h[a]=idx idx+=1 def dfs(u): global ans d1,d2=0,0 i=h[u] while i!=-1: j=e[i] dis = dfs(j)+1 if dis\u0026gt;d1: d2,d1=d1,dis elif dis\u0026gt;d2: d2=dis i=ne[i] ans = max(ans, d1+d2) return d1 n = int(input()) for i in range(1,n+1): for j in range(2,n+1): if i\u0026gt;n//j: break s[i*j]+=i for i in range(2,n+1): if s[i]\u0026lt;i: add(s[i], i) st[i]=True # for i in range(1,n+1): # if not st[i]: # dfs(i) dfs(1) print(ans) 没有上司的舞会 import sys sys.setrecursionlimit(int(1e4)) N = int(7e3) v=[[] for _ in range(N)] f=[[0]*2 for _ in range(N)] st=[False]*N h=[0]*N root=0 def dfs(u): f[u][1]+=h[u] for i in v[u]: dfs(i) f[u][1]+=f[i][0] f[u][0]+=max(f[i][0], f[i][1]) n = int(input()) for i in range(1,n+1): h[i]=int(input()) for i in range(n-1): l,k = map(int, input().split()) v[k].append(l) st[l]=True for i in range(1,n+1): if not st[i]: root=i dfs(root) print(max(f[root][0], f[root][1])) 单调队列优化的DP 最大子序和 N = 300010 q, s = [0]*N, [0]*N ans = -2**33 hh, tt = 0, 0 n,m = map(int, input().split()) s = [0]+list(map(int, input().split())) for i in range(1,n+1): s[i]+=s[i-1] for i in range(1,n+1): if q[hh]\u0026lt;i-m: hh+=1 ans = max(ans, s[i]-s[q[hh]]) while hh\u0026lt;=tt and s[q[tt]]\u0026gt;=s[i]: tt-=1 tt+=1 q[tt]=i print(ans) 数位DP 1081\nfrom typing import List N = 35 def init() -\u0026gt; List[List[int]]: f = [[0] * N for _ in range(N)] for i in range(N): for j in range(i + 1): if j == 0: f[i][j] = 1 else: f[i][j] = f[i - 1][j] + f[i - 1][j - 1] return f def dp(n: int, k: int, b: int, f: List[List[int]]) -\u0026gt; int: if n == 0: return 0 nums = [] while n: nums.append(n % b) n //= b res = 0 last = 0 for i in range(len(nums) - 1, -1, -1): x = nums[i] if x \u0026gt; 0: res += f[i][k - last] if x \u0026gt; 1: if k - last - 1 \u0026gt;= 0: res += f[i][k - last - 1] break else: last += 1 if last \u0026gt; k: break if i == 0 and last == k: res += 1 return res def solve(l: int, r: int, k: int, b: int) -\u0026gt; int: f = init() return dp(r, k, b, f) - dp(l - 1, k, b, f) if __name__ == \u0026#34;__main__\u0026#34;: l, r, k, b = map(int, input().split()) print(solve(l, r, k, b)) 记忆化 import heapq class Node: def __init__(self, i, j, num): self.i = i self.j = j self.num = num def main(): n, m = map(int, input().split()) f = [[1] * (m + 2) for _ in range(n + 2)] # distance g = [[0] * (m + 2) for _ in range(n + 2)] # store heights pq = [] for i in range(1, n + 1): nums = list(map(int, input().split())) for j, num in enumerate(nums, 1): g[i][j] = num heapq.heappush(pq, Node(i, j, num)) ma = -1 while pq: t = heapq.heappop(pq) i, j, nu = t.i, t.j, t.num if g[i - 1][j] \u0026lt; nu: f[i][j] = max(f[i][j], f[i - 1][j] + 1) if g[i + 1][j] \u0026lt; nu: f[i][j] = max(f[i][j], f[i + 1][j] + 1) if g[i][j - 1] \u0026lt; nu: f[i][j] = max(f[i][j], f[i][j - 1] + 1) if g[i][j + 1] \u0026lt; nu: f[i][j] = max(f[i][j], f[i][j + 1] + 1) ma = max(ma, f[i][j]) print(ma) if __name__ == \u0026#34;__main__\u0026#34;: main() 数论 试除法求约数\ndef get(x): ans = [] for i in range(1,x+1): if i\u0026gt;x//i: break if x%i==0: ans.append(i) if i!=x//i: ans.append(x//i) ans.sort() return ans n = int(input()) for i in range(n): x = int(input()) ans = get(x) for i in ans : print(i, end=\u0026#39; \u0026#39;) print() 树状数组 楼兰图腾\nimport sys input=lambda:sys.stdin.readline() M = 200010 suml, sumg = 0, 0 tr = [0]*M n = int(input()) a = [0]+[int(_) for _ in input().split()] def lowbit(x): return x\u0026amp;-x def add(x,v): while x\u0026lt;M: tr[x]+=v x+=lowbit(x) def query(x): res = 0 while x: res+=tr[x] x-=lowbit(x) return res for i in range(1,n+1): y=a[i] lw = query(y-1) lwr = y-1-lw # the lower element on the right side gr = query(n)-query(y) grr = (n-y) - gr suml += (lw*lwr) sumg += (gr*grr) add(y,1) print(sumg, suml) 线段树 # 定义树节点，l,r, val表示该节点记录的是区间[l, r]的最大值是val class Tree(): def __init__(self): self.l = 0 self.r = 0 self.lazy = 0 self.val = 0 # 二叉树是堆形式，可以用一维数组存储，注意数组长度要开4倍空间 tree = [Tree() for i in range(10*4)] # 建树，用cur\u0026lt;\u0026lt;1访问左子树，cur\u0026lt;\u0026lt;1|1访问右子树，位运算操作很方便 def build(cur, l, r): tree[cur].l, tree[cur].r, tree[cur].lazy, tree[cur].val = l, r, 0, 0 # 当l==r的时候结束递归 if l \u0026lt; r: mid = l + r \u0026gt;\u0026gt; 1 build(cur\u0026lt;\u0026lt;1, l, mid) build(cur\u0026lt;\u0026lt;1|1, mid+1, r) # 当子节点计算完成后，用子节点的值来更新自己的值 def pushup(cur): tree[cur].val = max(tree[cur\u0026lt;\u0026lt;1].val, tree[cur\u0026lt;\u0026lt;1|1].val) # 单点更新 def add(cur, x, v): if tree[cur].l == tree[cur].r: tree[cur].val += v else: mid = tree[cur].r + tree[cur].l \u0026gt;\u0026gt; 1 if x \u0026gt; mid: add(cur\u0026gt;\u0026gt;1|1, x, v) else: add(cur\u0026lt;\u0026lt;1, x, v) pushup(cur) # 将lazy标记向下传递一层 def pushdown(cur): if tree[cur].lazy: lazy = tree[cur].lazy tree[cur\u0026lt;\u0026lt;1].lazy += lazy tree[cur\u0026lt;\u0026lt;1|1].lazy += lazy tree[cur\u0026lt;\u0026lt;1].val += lazy tree[cur\u0026lt;\u0026lt;1|1].val += lazy tree[cur].lazy = 0 # 区间更新 def update(cur, l, r, v): if l \u0026lt;= tree[cur].l and tree[cur].r \u0026lt;= r: tree[cur].lazy += v tree[cur].val += v return if r \u0026lt; tree[cur].l or l \u0026gt; tree[cur].r: return if tree[cur].lazy: pushdown(cur) update(cur\u0026lt;\u0026lt;1, l, r, v) update(cur\u0026lt;\u0026lt;1|1, l, r, v) pushup(cur) # 区间查询 def query(cur, l, r): if l \u0026lt;= tree[cur].l and tree[cur].r \u0026lt;= r: return tree[cur].val if tree[cur].l \u0026gt; r or tree[cur].r \u0026lt; l: return 0 if tree[cur].lazy: pushdown(cur) return max(query(cur\u0026lt;\u0026lt;1, l, r), query(cur\u0026lt;\u0026lt;1|1)) # 测试 # ----- # --- # ------- # -- # -- build(1, 1, 10) update(1, 1, 5, 1) update(1, 7, 10, 1) update(1, 2, 8, 1) update(1, 3, 4, 1) update(1, 9, 10, 1) print(query(1, 1, 10)) def pushup(u): tr[u] = tr[u \u0026lt;\u0026lt; 1] + tr[u \u0026lt;\u0026lt; 1 | 1] def build(u, l, r): if l == r: tr[u] = 0 else: mid = (l + r) \u0026gt;\u0026gt; 1 build(u \u0026lt;\u0026lt; 1, l, mid) build(u \u0026lt;\u0026lt; 1 | 1, mid + 1, r) pushup(u) def query(u, l, r, ql, qr): if l \u0026gt;= ql and r \u0026lt;= qr: return tr[u] mid = (l + r) \u0026gt;\u0026gt; 1 if mid==l and mid==r: return 0 res = 0 if ql \u0026lt;= mid: res = query(u \u0026lt;\u0026lt; 1, l, mid, ql, qr) if qr \u0026gt; mid: res += query(u \u0026lt;\u0026lt; 1 | 1, mid + 1, r, ql, qr) return res def modify(u, x, l, r, val): if l == r: tr[u] += val else: mid = (l + r) \u0026gt;\u0026gt; 1 if x \u0026lt;= mid: modify(u \u0026lt;\u0026lt; 1, x, l, mid, val) else: modify(u \u0026lt;\u0026lt; 1 | 1, x, mid + 1, r, val) pushup(u) 搜索深入 池塘计数 import sys from collections import deque input = lambda:sys.stdin.readline().strip() N = int(1e3+10) M = N*N g = [0]*N cnt=0 vis = [ [False]*N for _ in range(N) ] def bfs(x, y): q=deque() q.append( (x,y) ) while q: tx, ty = q[0] q.popleft() for i in range(-1, 2): for j in range(-1, 2): if i==0 and j==0: continue xx, yy = tx+i, ty+j if xx\u0026lt;0 or xx\u0026gt;=n or yy\u0026lt;0 or yy\u0026gt;=m or vis[xx][yy] or g[xx][yy]==\u0026#39;.\u0026#39;: continue vis[xx][yy]=True q.append( (xx,yy) ) n, m = map(int, input().split()) for i in range(n): g[i]=input() for i in range(n): for j in range(m): if g[i][j]!=\u0026#39;W\u0026#39; or vis[i][j]: continue bfs(i, j) cnt+=1 print(cnt) 城堡问题 import sys from collections import deque input = lambda:sys.stdin.readline().strip() N = 55 g = [] vis = [[False]*N for _ in range(N)] area = 0 cnt=0 def bfs(x, y): vis[x][y]=True q = deque() q.append((x, y)) dx, dy = [0, -1, 0, 1], [-1, 0, 1, 0] ans=1 while q: tx, ty = q.popleft() for i in range(4): xx = tx+dx[i] yy = ty+dy[i] if xx\u0026lt;0 or xx\u0026gt;=n or yy\u0026lt;0 or yy\u0026gt;=m or vis[xx][yy]: continue if (g[tx][ty]\u0026gt;\u0026gt;i)\u0026amp;1: continue ans+=1 vis[xx][yy]=True q.append((xx,yy)) return ans n, m = map(int, input().split()) for _ in range(n): g.append(list(map(int, input().split()))) for i in range(n): for j in range(m): if vis[i][j]: continue area = max(area, bfs(i, j)) cnt+=1 print(cnt) print(area) 山峰和山谷 import sys from collections import deque N = 1010 g = [] vis = [[0]*N for _ in range(N)] pek, val = 0, 0 def bfs(x, y): global higher, lower vis[x][y]=True q = deque() q.append((x,y)) while q: tx,ty = q.popleft() for i in range(-1, 2): for j in range(-1, 2): if i==0 and j==0: continue xx, yy = tx+i, ty+j if xx\u0026lt;0 or xx\u0026gt;=n or yy\u0026lt;0 or yy\u0026gt;=n: continue if g[xx][yy]!=g[tx][ty]: if g[xx][yy]\u0026gt;g[tx][ty]: higher=True elif g[xx][yy]\u0026lt;g[tx][ty]: lower=True elif not vis[xx][yy]: vis[xx][yy]=True q.append((xx,yy)) higher, lower = False, False n = int(input()) for _ in range(n): g.append(list(map(int, input().split()))) # print(g) for i in range(n): for j in range(n): if vis[i][j]: continue higher, lower = False, False bfs(i, j) if not higher:pek+=1 if not lower:val+=1 print(pek, val) Python特点 IDLE 使用 输入输出 输出列表：\nprint（*a） # 输出列表中的所有数，用空格分隔 print（*a，sep=\u0026#34;\\n\u0026#34;） #每个数单独放一行 *运算符 解包运算符： 当*运算符用于可迭代对象（如列表、元组、集合等）前面时，它可以将可迭代对象解包为多个元素。例如：\na = [1, 2, 3] print(*a) # 解包并打印出每个元素：1 2 3 可变参数： 当*运算符用于函数定义时，它表示接受任意数量的参数，并将它们作为元组传递给函数。这种用法通常称为可变参数。例如：\ndef my_func(*args): for arg in args: print(arg) my_func(1, 2, 3) # 打印出每个参数：1 2 3 扩展运算符： 当*运算符用于可迭代对象前面时，它可以将可迭代对象的元素扩展到另一个可迭代对象中。这种用法通常称为扩展运算符。例如：\na = [1, 2, 3] b = [4, 5, 6 c = [*a, *b] # 扩展a和b的元素到c中 print(c) # 输出：[1, 2, 3, 4, 5, 6] 乘法运算符： 当*运算符用于数字和可迭代对象之间时，它表示重复该可迭代对象的元素。例如：\na = [1, 2, 3] b = a * 3 # 重复a的元素3次 print(b) # 输出：[1, 2, 3, 1, 2, 3, 1, 2, 3] 和* *和**在函数定义中的使用： *args用于接收任意数量的位置参数，并将它们作为元组传递给函数。 **kwargs用于接收任意数量的关键字参数，并将它们作为字典传递给函数。 *和**在函数调用中的使用： 在函数调用时，*用于解包可迭代对象，并将其作为位置参数传递给函数。 在函数调用时，**用于解包字典，并将其作为关键字参数传递给函数。 栈模拟递归 from collections import deque def dfs(idx,p): q = deque() q.append((idx,p)) while q: idx,p = q.pop() D[idx] = D[p] + V[idx] for u in A[idx]: if u == p: continue q.append((u,idx)) 引用赋值、浅拷贝和深拷贝 Python赋值、浅拷贝、深拷贝的区别 [:]和.copy()都属于“浅拷贝”，只拷贝最外层元素，外层元素是独立内存；内层嵌套元素则通过引用方式共享，而非独立分配内存。使用 copy 模块的 copy.copy（ 浅拷贝 ）和 copy.deepcopy（深拷贝），其中deepcopy是构建了一个完全独立的对象。\n1、b = a: 赋值引用，a 和 b 都指向同一个对象。\n2、b = a.copy(): 浅拷贝, a 和 b 是一个独立的对象，但他们的子对象（内层嵌套对象）还是指向统一对象（是引用）。\n3、b = copy.deepcopy(a): 深度拷贝, a 和 b 完全拷贝了父对象及其子对象，两者是完全独立的。\n例子：\n引用赋值 \u0026gt;\u0026gt;\u0026gt;a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \u0026gt;\u0026gt;\u0026gt;b = a[:] \u0026gt;\u0026gt;\u0026gt;print(b) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \u0026gt;\u0026gt;\u0026gt;print(id(a)) #41946376 \u0026gt;\u0026gt;\u0026gt;print(id(b)) #41921864 或 \u0026gt;\u0026gt;\u0026gt;b = a.copy() \u0026gt;\u0026gt;\u0026gt;print(b) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \u0026gt;\u0026gt;\u0026gt;print(id(a)) #39783752 \u0026gt;\u0026gt;\u0026gt;print(id(b)) #39759176 浅拷贝 \u0026gt;\u0026gt;\u0026gt;a = [1,2,[\u0026#39;A\u0026#39;,\u0026#39;B\u0026#39;]] \u0026gt;\u0026gt;\u0026gt;print(\u0026#39;a={}\u0026#39;.format(a)) \u0026gt;\u0026gt;\u0026gt;b = a[:] \u0026gt;\u0026gt;\u0026gt;b[0] = 9 #修改b的最外层元素，将1变成9 \u0026gt;\u0026gt;\u0026gt;b[2][0] = \u0026#39;D\u0026#39; #修改b的内嵌层元素 \u0026gt;\u0026gt;\u0026gt;print(\u0026#39;a={}\u0026#39;.format(a)) \u0026gt;\u0026gt;\u0026gt;print(\u0026#39;b={}\u0026#39;.format(b)) \u0026gt;\u0026gt;\u0026gt;print(\u0026#39;id(a)={}\u0026#39;.format(id(a))) \u0026gt;\u0026gt;\u0026gt;print(\u0026#39;id(b)={}\u0026#39;.format(id(b))) a=[1, 2, [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;]] #原始a a=[1, 2, [\u0026#39;D\u0026#39;, \u0026#39;B\u0026#39;]] #b修改内部元素A为D后，a中的A也变成了D，说明共享内部嵌套元素，但外部元素1没变。 b=[9, 2, [\u0026#39;D\u0026#39;, \u0026#39;B\u0026#39;]] #修改后的b id(a)=38669128 id(b)=38669192 深拷贝 import copy a = [1, 2, 3, 4, [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;]] #原始对象 b = a #赋值，传对象的引用 c = copy.copy(a) #对象拷贝，浅拷贝 d = copy.deepcopy(a) #对象拷贝，深拷贝 a.append(5) #修改对象a a[4].append(\u0026#39;c\u0026#39;) #修改对象a中的[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;]数组对象 print( \u0026#39;a = \u0026#39;, a ) print( \u0026#39;b = \u0026#39;, b ) print( \u0026#39;c = \u0026#39;, c ) print( \u0026#39;d = \u0026#39;, d ) #输出： \u0026#39;a = \u0026#39;, [1, 2, 3, 4, [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;], 5] \u0026#39;b = \u0026#39;, [1, 2, 3, 4, [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;], 5] \u0026#39;c = \u0026#39;, [1, 2, 3, 4, [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]] \u0026#39;d = \u0026#39;, [1, 2, 3, 4, [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;]] 栈代替递归 增加递归深度 import sys sys.setrecursionlimit(150000000) print(sys.getrecursionlimit()) 迭代加深搜索 s = input() l = len(s) s = \u0026#34;0\u0026#34; + s # 1~l ans = set() st = {} def dfs(curlen, last): global ans, st stack = [(curlen, last)] while stack: curlen, last = stack.pop() if curlen - 2 \u0026gt; 4 and last != s[curlen - 1:curlen + 1]: if (curlen - 1, curlen) not in st: st[(curlen - 1, curlen)] = 1 ans.add(s[curlen - 1:curlen + 1]) stack.append((curlen - 2, s[curlen - 1:curlen + 1])) if curlen - 3 \u0026gt; 4 and last != s[curlen - 2:curlen + 1]: if (curlen - 2, curlen) not in st: st[(curlen - 2, curlen)] = 1 ans.add(s[curlen - 2:curlen + 1]) stack.append((curlen - 3, s[curlen - 2:curlen + 1])) dfs(l, \u0026#34;\u0026#34;) ans = sorted(ans) # 将集合转换为列表并排序 print(len(ans)) for si in ans: print(si) 加速读入 import sys print(\u0026#39;Plase input your name: \u0026#39;) name = sys.stdin.readline() print(name) 队列 Queue中有FIFO（先入先出）队列Queue，LIFO（后入先出）栈LifoQueue，和优先级队列PriorityQueue，但速度较慢，且不能不出栈地访问头部元素，想要访问头部元素，只能用get方法出栈首部获取方法返回值的来进行访问，非常不方便。\n可以用deque()模拟\nimport collections q=collections.deque() m=int(input()) for i in range(m): s = input().split() if s[0]==\u0026#39;push\u0026#39;: q.append(s[1]) elif s[0]==\u0026#39;pop\u0026#39;: q.popleft() elif s[0]==\u0026#39;empty\u0026#39;: if len(q)==0: print(\u0026#39;YES\u0026#39;) else: print(\u0026#39;NO\u0026#39;) else: print(q[0]) 栈 列表模拟\nm=int(input()) stk=[] for i in range(m): s = input().split() if s[0]==\u0026#39;push\u0026#39;: stk.append(int(s[1])) elif s[0]==\u0026#39;pop\u0026#39;: stk.pop() elif s[0]==\u0026#39;empty\u0026#39;: if len(stk)==0: print(\u0026#39;YES\u0026#39;) else: print(\u0026#39;NO\u0026#39;) else: print(stk[-1]) deque模拟\nimport collections stk = collections.deque() m=int(input()) for i in range(m): s = input().split() if s[0]==\u0026#39;push\u0026#39;: stk.appendleft( int(s[1]) ) elif s[0]==\u0026#39;pop\u0026#39;: stk.popleft() elif s[0]==\u0026#39;empty\u0026#39;: if len(stk)==0: print(\u0026#39;YES\u0026#39;) else: print(\u0026#39;NO\u0026#39;) else: print(stk[0]) Python 常用内置库 array 定长数组 argparse 命令行参数处理 bisect 二分查找 collections 有序字典、双端队列等数据结构 fractions 有理数 heapq 基于堆的优先级队列 io 文件流、内存流 itertools 迭代器 math 数学函数 os.path 系统路径等 random 随机数 re 正则表达式 struct 转换结构体和二进制数据 sys 系统信息 defaultdict() from collections import defaultdict # 创建一个 defaultdict，指定默认值为 int 类型的 0 d = defaultdict() # 修改默认值为 100 d.default_factory = lambda: (1,2) Counter() from collections import Counter # 定义一个列表 lst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] s = \u0026#39;abcdgsaa\u0026#39; # 使用 Counter 统计列表中元素的出现次数 c1 = Counter(lst) c2 = Counter(s) print(c1,c2, sep=\u0026#39;\\n\u0026#39;) # 使用 most_common() 方法按照元素的出现次数进行排序 sorted_items = c1.most_common() for x,y in enumerate(sorted_items): print(y[0]) heapq 建堆 ( 小根堆 )\na = [1, 5, 20, 18, 10, 200] heapq.heapify(a) print(a) 建大根堆\na = [] for i in [1, 5, 20, 18, 10, 200]: heapq.heappush(a,-i) print( list( map(lambda x:-x,a) ) ) heap_sort(heappush)\nimport heapq def heap_sort(arr): if not arr: return [] h = [] #建立空堆 for i in arr: heapq.heappush(h,i) #heappush自动建立小根堆 return [heapq.heappop(h) for i in range(len(h))] #heappop每次删除并返回列表中最小的值 # 堆排序取最小的m个数字 import heapq def heap_sort(arr, k): if not arr: return [] h=[] for i in arr: heapq.heappush(h, i) return [heapq.heappop(h) for _ in range(k)] n,m = map(int, input().split()) arr = list(map(int, input().split())) ans = heap_sort(arr, m) print(\u0026#39; \u0026#39;.join(map(str, ans))) heappushpop\n先push再pop\n[1, 18, 5, 20, 90, 10, 200] h [1, 18, 5, 20, 90, 10, 200] heapq.heappushpop(h, 300) 1 h [5, 18, 10, 20, 90, 300, 200] heapreplace\n先pop再push\nh [5, 18, 10, 20, 90, 300, 200] heapq.heapreplace(h, -1) 5 h [-1, 18, 10, 20, 90, 300, 200] heapq.merge\nimport heapq h1 = [90, 1, 5, 20, 18, 10, 200] h2 = [4,2,3,4,1000] heapq.heapify(h1) heapq.heapify(h2) print(list(heapq.merge(h1, h2))) heap.nlargest\nh1 [1, 18, 5, 20, 90, 10, 200] heapq.nlargest(2,h1,key=lambda x:-x) [1, 5] List() del list[1] 删除列表元素 列表比较 import operator operator.eq(a,b) len(list) max(list) min(list) list(seq) 将元组转换为列表 list.append(obj) list.count(obj) list.extend(seq) list.index(obj) list.insert(index, obj) list.pop([index=-1]) 删除列表中一个元素 list.remove(obj) 删除第一个匹配项 list.reverse() list.sort(key=None, reverse=False) list.clear() list.copy() tuple() 元素组合 类似list\nSortedList() from sortedcontainers import SortedList sl = SortedList() sl.add(1) print(sl[-1]) print(sl[0]) sl.update([3,2,1]) print(sl) sl.update([9,8,7]) print(sl) ##sl.clear() sl.discard(5) sl.remove(9) print(sl) sl.pop() print(sl) sl.pop(-2) print(sl) print(sl.bisect_left(12)) #返回需要插入的位置，如有存在则返回左侧的位置 print(sl.bisect_right(2)) print(sl.count(1)) print(sl.index(1)) it = sl.islice(2,4) print(list(it)) dict() 键值必须不可变\nd = {\u0026#39;1\u0026#39;:\u0026#39;a\u0026#39;, \u0026#39;2\u0026#39;:\u0026#39;b\u0026#39;, \u0026#39;99\u0026#39;:\u0026#39;xycz\u0026#39;} print(d) if \u0026#39;0\u0026#39; in d :del d[\u0026#39;0\u0026#39;] del d[\u0026#39;1\u0026#39;] print(d) {\u0026#39;1\u0026#39;: \u0026#39;a\u0026#39;, \u0026#39;2\u0026#39;: \u0026#39;b\u0026#39;, \u0026#39;99\u0026#39;: \u0026#39;xycz\u0026#39;} {\u0026#39;2\u0026#39;: \u0026#39;b\u0026#39;, \u0026#39;99\u0026#39;: \u0026#39;xycz\u0026#39;} 内置方法 len str type dict.clear() dict.copy() dict.fromkeys(seq) 将seq作为字典的键值， 字典中val为默认 dict.get(key, default=None) key in dict dict.items() dict.keys() dict.setdefault(key, default = None) dict.update(dict2) 把dict2添加到dict中 dict.values() 返回值 pop(key[,default]) 删除字典中key所对应的值并返回 popitem() 返回并删除字典中最后一对键值 set() 空集合用set() 支持 -, |, \u0026amp;, ^(不同时包含于两个集合) difference() 在原集合上修改，无返回值, difference_update() 返回新集合 union() 并集 intersection() intersection_update() 返回交集 isdisjoint() 判断两个集合是否包含相同的元素 issubset() 判断指定参数的集合是否为该调用方法的集合的子集 issuperset() 判断该方法是否为指定参数的子集 symmetric_difference() 返回两个集合中不重复的元素集合 symmetric_difference_update() 移除相同的元素，并插入没有的元素 s.add(x) 添加元素 s.update(x) 可以添加多个元素，并且可以是列表元组字典 s.remove(x) 将元素从集合中移除， 如果不存在则报错 s.discard(x) 移除元素，但是不报错 s.pop() 设置随机删除结合中的一个元素（无序集合的第一个元素） len(s) s.clear() x in s s.copy() 自定义比较参数 from functools import cmp_to_key def compare(s1, s2): if len(s1) == len(s2): for c1, c2 in zip(s1, s2): if c1 \u0026gt; c2: return 1 elif c1 \u0026lt; c2: return -1 return 0 else: if len(s1) \u0026gt; len(s2): return 1 else: return -1 things = input().split() # 使用 cmp_to_key 将比较函数转换为 key 函数 things.sort(key=cmp_to_key(compare)) print(things) __init__魔术方法 class Fib(object): def __init__(self): pass def __call__(self, num): # 将对象作为函数调用时触发 a, b = 0, 1 self.l = [] for i in range(num): self.l.append(a) a, b = b, a+b return self.l def __str__(self): # 使用print(对象）或者str (对象)的时候触发 return str(self.l) # 必须返回字符串类型 __rept__=__str__ # 使用repr(对象) f = Fib() print(f(10)) ","permalink":"https://showguan.github.io/en/posts/tech/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AC%94%E8%AE%B0/","summary":"蓝桥杯笔记 以后做事：切记切记切记，不要一直做新题，及时复习是最重要的。 一定一定拿一个国奖，6~7月准备两个项目，八月开始投简历。 真题一定要全","title":""}]